!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
.DEFAULT_GOAL	Makefile	/^.DEFAULT_GOAL := default$/;"	m
APP_REGION	example/build/Makefile	/^run:export APP_REGION=wuhan$/;"	m
APP_REGION	example/build/Makefile	/^version:export APP_REGION=wuhan$/;"	m
APP_ZONE	example/build/Makefile	/^run:export APP_ZONE=f3$/;"	m
APP_ZONE	example/build/Makefile	/^version:export APP_ZONE=f3$/;"	m
Add	pkg/ecode/code.go	/^func Add(code int, message string) *spbStatus {$/;"	f
Add	pkg/metric/counter.go	/^func (counter *counterVec) Add(v float64, labels ...string) {$/;"	f
Add	pkg/metric/gauge.go	/^func (gv *gaugeVec) Add(v float64, labels ...string) {$/;"	f
Add	pkg/util/xp2c/leastloaded/least_loaded.go	/^func (p *leastLoaded) Add(item interface{}) {$/;"	f
AddFunc	pkg/worker/xcron/cron.go	/^func (c *Cron) AddFunc(spec string, cmd func() error) (EntryID, error) {$/;"	f
AddJob	pkg/worker/xcron/cron.go	/^func (c *Cron) AddJob(spec string, cmd NamedJob) (EntryID, error) {$/;"	f
Addr2Hex	pkg/util/xstring/string.go	/^func Addr2Hex(str string) (string, error) {$/;"	f
Address	pkg/governor/config.go	/^func (config Config) Address() string {$/;"	f
Address	pkg/server/xecho/config.go	/^func (config *Config) Address() string {$/;"	f
Address	pkg/server/xgin/config.go	/^func (config *Config) Address() string {$/;"	f
Address	pkg/server/xgoframe/config.go	/^func (config *Config) Address() string {$/;"	f
Address	pkg/server/xgrpc/config.go	/^func (config Config) Address() string {$/;"	f
After	pkg/util/xtime/rash_timer.go	/^func (w *rashTimer) After(d time.Duration) <-chan time.Time {$/;"	f
After	pkg/util/xtime/rash_timer.go	/^func After(d time.Duration) <-chan time.Time {$/;"	f
AfterFunc	pkg/util/xtime/rash_timer.go	/^func (w *rashTimer) AfterFunc(d time.Duration, f func()) *Timer {$/;"	f
AfterFunc	pkg/util/xtime/rash_timer.go	/^func AfterFunc(d time.Duration, f func()) *Timer {$/;"	f
Alphabetic	pkg/util/xrand/string.go	/^	Alphabetic = Uppercase + Lowercase$/;"	c
Alphanumeric	pkg/util/xrand/string.go	/^	Alphanumeric = Alphabetic + Numeric$/;"	c
Any	pkg/xlog/log.go	/^	Any = zap.Any$/;"	v
AnyBlank	pkg/util/xstring/string.go	/^func AnyBlank(ss []string) bool {$/;"	f
AppHost	pkg/env.go	/^func AppHost() string {$/;"	f
AppID	pkg/pkg.go	/^func AppID() string {$/;"	f
AppInstance	pkg/env.go	/^func AppInstance() string {$/;"	f
AppLogDir	pkg/env.go	/^func AppLogDir() string {$/;"	f
AppMode	pkg/env.go	/^func AppMode() string {$/;"	f
AppRegion	pkg/env.go	/^func AppRegion() string {$/;"	f
AppVersion	pkg/pkg.go	/^func AppVersion() string {$/;"	f
AppZone	pkg/env.go	/^func AppZone() string {$/;"	f
Append	pkg/imeta/md.go	/^func (md MD) Append(k string, vals ...string) {$/;"	f
Application	jupiter.go	/^type Application = application.Application$/;"	t
Application	pkg/application/application.go	/^type Application struct {$/;"	t
Apply	pkg/conf/api.go	/^func Apply(conf map[string]interface{}) error {$/;"	f
Apply	pkg/flag/flag.go	/^func (f *BoolFlag) Apply(set *FlagSet) {$/;"	f
Apply	pkg/flag/flag.go	/^func (f *Float64Flag) Apply(set *FlagSet) {$/;"	f
Apply	pkg/flag/flag.go	/^func (f *IntFlag) Apply(set *FlagSet) {$/;"	f
Apply	pkg/flag/flag.go	/^func (f *StringFlag) Apply(set *FlagSet) {$/;"	f
Apply	pkg/flag/flag.go	/^func (f *UintFlag) Apply(set *FlagSet) {$/;"	f
Apply	pkg/trace/const.go	/^func (sso NullStartSpanOption) Apply(options *opentracing.StartSpanOptions) {}$/;"	f
ApplyOptions	pkg/server/server.go	/^func ApplyOptions(options ...Option) ServiceInfo {$/;"	f
Association	pkg/store/gorm/orm.go	/^	Association = gorm.Association$/;"	t
Attributes	pkg/util/xattr/attr.go	/^type Attributes struct {$/;"	t
Auto	pkg/xlog/api.go	/^func Auto(err error) Func {$/;"	f
AutoLevel	pkg/xlog/log.go	/^func (logger *Logger) AutoLevel(confKey string) {$/;"	f
BASE_PATH	cmd/jupiter/new/templates/Makefile	/^BASE_PATH:=$(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))$/;"	m
BASE_PATH	tools/build/Makefile	/^BASE_PATH:=$(shell dirname $(shell dirname $(realpath $(lastword $(MAKEFILE_LIST)))))$/;"	m
BUILD_PATH	cmd/jupiter/new/templates/Makefile	/^BUILD_PATH:=$(BASE_PATH)\/build$/;"	m
BUILD_PATH	tools/build/Makefile	/^BUILD_PATH:=$(BASE_PATH)\/build$/;"	m
BUILD_TIME	cmd/jupiter/new/templates/Makefile	/^BUILD_TIME:=$(shell date +%Y-%m-%d--%T)$/;"	m
BUILD_TIME	tools/build/Makefile	/^BUILD_TIME:=$(shell date +%Y-%m-%d--%T)$/;"	m
BeginOfDay	pkg/util/xtime/time.go	/^func (t *Time) BeginOfDay() *Time {$/;"	f
BeginOfHour	pkg/util/xtime/time.go	/^func (t *Time) BeginOfHour() *Time {$/;"	f
BeginOfMinute	pkg/util/xtime/time.go	/^func (t *Time) BeginOfMinute() *Time {$/;"	f
BeginOfMonth	pkg/util/xtime/time.go	/^func (t *Time) BeginOfMonth() *Time {$/;"	f
BeginOfWeek	pkg/util/xtime/time.go	/^func (t *Time) BeginOfWeek() *Time {$/;"	f
BeginOfYear	pkg/util/xtime/time.go	/^func (t *Time) BeginOfYear() *Time {$/;"	f
BenchmarkWriteSyncer	pkg/xlog/buffer_syncer_bench_test.go	/^func BenchmarkWriteSyncer(b *testing.B) {$/;"	f
BindFlags	pkg/client/etcdv3/config.go	/^func (config *Config) BindFlags(fs *flag.FlagSet) {$/;"	f
Blue	pkg/util/xcolor/string_darwin.go	/^func Blue(msg string, arg ...interface{}) string {$/;"	f
Blue	pkg/util/xcolor/string_linux.go	/^func Blue(msg string, arg ...interface{}) string {$/;"	f
Blue	pkg/util/xcolor/string_windows.go	/^func Blue(msg string, arg ...interface{}) string {$/;"	f
BlueColor	pkg/util/xcolor/util.go	/^	BlueColor$/;"	c
Bool	pkg/flag/flag.go	/^func (fs *FlagSet) Bool(name string) bool {$/;"	f
Bool	pkg/flag/flag.go	/^func Bool(name string) bool { return flagset.Bool(name) }$/;"	f
BoolE	pkg/flag/flag.go	/^func (fs *FlagSet) BoolE(name string) (bool, error) {$/;"	f
BoolE	pkg/flag/flag.go	/^func BoolE(name string) (bool, error) { return flagset.BoolE(name) }$/;"	f
BoolFlag	pkg/flag/flag.go	/^type BoolFlag struct {$/;"	t
Buffer	pkg/xlog/buffer_syncer.go	/^func Buffer(ws zapcore.WriteSyncer, bufferSize int, flushInterval time.Duration) (zapcore.WriteSyncer, CloseFunc) {$/;"	f
Build	pkg/client/etcdv3/config.go	/^func (config *Config) Build() (*Client, error) {$/;"	f
Build	pkg/client/grpc/balancer/base.go	/^func (bb *baseBuilder) Build(cc balancer.ClientConn, opt balancer.BuildOptions) balancer.Balancer {$/;"	f
Build	pkg/client/grpc/balancer/p2c/least_loaded.go	/^func (*p2cPickerBuilder) Build(readySCs map[resolver.Address]balancer.SubConn) balancer.Picker {$/;"	f
Build	pkg/client/grpc/balancer/swr.go	/^func (s swrPickerBuilder) Build(info PickerBuildInfo) balancer.V2Picker {$/;"	f
Build	pkg/client/grpc/config.go	/^func (config *Config) Build() *grpc.ClientConn {$/;"	f
Build	pkg/client/grpc/resolver/resolver.go	/^func (b *baseBuilder) Build(target resolver.Target, cc resolver.ClientConn, opts resolver.BuildOptions) (resolver.Resolver, error) {$/;"	f
Build	pkg/client/redis/config.go	/^func (config Config) Build() *Redis {$/;"	f
Build	pkg/client/rocketmq/consumer.go	/^func (conf *ConsumerConfig) Build() *PushConsumer {$/;"	f
Build	pkg/client/rocketmq/producer.go	/^func (conf *ProducerConfig) Build() *Producer {$/;"	f
Build	pkg/governor/config.go	/^func (config *Config) Build() *Server {$/;"	f
Build	pkg/metric/counter.go	/^func (opts CounterVecOpts) Build() *counterVec {$/;"	f
Build	pkg/metric/gauge.go	/^func (opts GaugeVecOpts) Build() *gaugeVec {$/;"	f
Build	pkg/metric/histogram.go	/^func (opts HistogramVecOpts) Build() *histogramVec {$/;"	f
Build	pkg/metric/summary.go	/^func (opts SummaryVecOpts) Build() *summaryVec {$/;"	f
Build	pkg/registry/etcdv3/config.go	/^func (config Config) Build() (registry.Registry, error) {$/;"	f
Build	pkg/sentinel/config.go	/^func (config *Config) Build() error {$/;"	f
Build	pkg/server/xecho/config.go	/^func (config *Config) Build() (*Server, error) {$/;"	f
Build	pkg/server/xgin/config.go	/^func (config *Config) Build() *Server {$/;"	f
Build	pkg/server/xgoframe/config.go	/^func (config *Config) Build() *Server {$/;"	f
Build	pkg/server/xgrpc/config.go	/^func (config *Config) Build() (*Server, error) {$/;"	f
Build	pkg/store/gorm/config.go	/^func (config *Config) Build() *DB {$/;"	f
Build	pkg/store/mongox/option.go	/^func (config Config) Build() *mongo.Client {$/;"	f
Build	pkg/trace/jaeger/config.go	/^func (config *Config) Build(options ...jconfig.Option) opentracing.Tracer {$/;"	f
Build	pkg/worker/xcron/config.go	/^func (config Config) Build() *Cron {$/;"	f
Build	pkg/xlog/config.go	/^func (config Config) Build() *Logger {$/;"	f
BuildHost	pkg/pkg.go	/^func BuildHost() string {$/;"	f
BuildInfoGauge	pkg/metric/metric.go	/^	BuildInfoGauge = GaugeVecOpts{$/;"	v
BuildTime	pkg/pkg.go	/^func BuildTime() string {$/;"	f
BuildUser	pkg/pkg.go	/^func BuildUser() string {$/;"	f
Builder	pkg/registry/init.go	/^type Builder func(string) Registry$/;"	t
BuildinModule	pkg/conf/option.go	/^func BuildinModule(module string) GetOption {$/;"	f
ByteString	pkg/xlog/log.go	/^	ByteString = zap.ByteString$/;"	v
C	pkg/client/etcdv3/watch.go	/^func (w *Watch) C() chan *clientv3.Event {$/;"	f
CacheHandleCounter	pkg/metric/metric.go	/^	CacheHandleCounter = CounterVecOpts{$/;"	v
CacheHandleHistogram	pkg/metric/metric.go	/^	CacheHandleHistogram = HistogramVecOpts{$/;"	v
Callback	pkg/store/gorm/orm.go	/^	Callback = gorm.Callback$/;"	t
CallbackProcessor	pkg/store/gorm/orm.go	/^	CallbackProcessor = gorm.CallbackProcessor$/;"	t
CallerName	pkg/util/xstring/function.go	/^func CallerName(skip int) string {$/;"	f
CauseCode	pkg/ecode/status.go	/^func (s *spbStatus) CauseCode() int {$/;"	f
CheckAndGetParentDir	pkg/util/xfile/file.go	/^func CheckAndGetParentDir(path string) string {$/;"	f
Clean	pkg/defers/defer.go	/^func Clean() {$/;"	f
Clean	pkg/util/xdefer/stack.go	/^func (ds *DeferStack) Clean() {$/;"	f
Client	pkg/client/etcdv3/client.go	/^type Client struct {$/;"	t
ClientHandleCounter	pkg/metric/metric.go	/^	ClientHandleCounter = CounterVecOpts{$/;"	v
ClientHandleHistogram	pkg/metric/metric.go	/^	ClientHandleHistogram = HistogramVecOpts{$/;"	v
Close	pkg/client/etcdv3/watch.go	/^func (w *Watch) Close() error {$/;"	f
Close	pkg/client/grpc/balancer/base.go	/^func (b *baseBalancer) Close() {$/;"	f
Close	pkg/client/grpc/resolver/resolver.go	/^func (b *baseResolver) Close() { b.stop <- struct{}{} }$/;"	f
Close	pkg/client/redis/redis_cmds.go	/^func (r *Redis) Close() (err error) {$/;"	f
Close	pkg/client/rocketmq/consumer.go	/^func (cc *PushConsumer) Close() error {$/;"	f
Close	pkg/client/rocketmq/producer.go	/^func (pc *Producer) Close() error {$/;"	f
Close	pkg/conf/datasource/apollo/apollo.go	/^func (ap *apolloDataSource) Close() error {$/;"	f
Close	pkg/conf/datasource/apollo/mockserver/mockserver.go	/^func Close() error {$/;"	f
Close	pkg/conf/datasource/etcdv3/etcdv3.go	/^func (s *etcdv3DataSource) Close() error {$/;"	f
Close	pkg/conf/datasource/file/file.go	/^func (fp *fileDataSource) Close() error {$/;"	f
Close	pkg/conf/datasource/http/yasee.go	/^func (y *yaseeDataSource) Close() error {$/;"	f
Close	pkg/datasource/apollo/apollo.go	/^func (ap *apolloDataSource) Close() error {$/;"	f
Close	pkg/datasource/apollo/mockserver/mockserver.go	/^func Close() error {$/;"	f
Close	pkg/datasource/etcdv3/etcdv3.go	/^func (s *etcdv3DataSource) Close() error {$/;"	f
Close	pkg/datasource/file/file.go	/^func (fp *fileDataSource) Close() error {$/;"	f
Close	pkg/datasource/http/yasee.go	/^func (y *yaseeDataSource) Close() error {$/;"	f
Close	pkg/registry/etcdv3/registry.go	/^func (reg *etcdv3Registry) Close() error {$/;"	f
Close	pkg/registry/nop.go	/^func (n Local) Close() error { return nil }$/;"	f
Close	pkg/util/xcycle/lifecycle.go	/^func (c *Cycle) Close() {$/;"	f
Close	pkg/util/xfile/lock_unix.go	/^func (l lockCloser) Close() error {$/;"	f
Close	pkg/util/xfile/lock_windows.go	/^func (l lockCloser) Close() error {$/;"	f
Close	pkg/xlog/rotate/lumberjack_darwin.go	/^func (l *Logger) Close() error {$/;"	f
Close	pkg/xlog/rotate/lumberjack_linux.go	/^func (l *Logger) Close() error {$/;"	f
Close	pkg/xlog/rotate/lumberjack_windows.go	/^func (l *Logger) Close() error {$/;"	f
CloseFunc	pkg/xlog/buffer_syncer.go	/^type CloseFunc func() error$/;"	t
Cluster	pkg/client/redis/redis.go	/^func (r *Redis) Cluster() *redis.ClusterClient {$/;"	f
ClusterMode	pkg/client/redis/config.go	/^	ClusterMode string = "cluster"$/;"	c
Cmd	cmd/jupiter/new/new_cmd.go	/^var Cmd = cli.Command{$/;"	v
Cmd	cmd/jupiter/protoc/protoc_cmd.go	/^var Cmd = cli.Command{$/;"	v
CodeCacheHit	pkg/metric/metric.go	/^	CodeCacheHit = "hit"$/;"	v
CodeCacheMiss	pkg/metric/metric.go	/^	CodeCacheMiss = "miss"$/;"	v
CodeJobFail	pkg/metric/metric.go	/^	CodeJobFail = "fail"$/;"	v
CodeJobReentry	pkg/metric/metric.go	/^	CodeJobReentry = "reentry"$/;"	v
CodeJobSuccess	pkg/metric/metric.go	/^	CodeJobSuccess = "ok"$/;"	v
Config	cmd/jupiter/confgen/testdata/config.go	/^type Config struct {$/;"	t
Config	pkg/client/etcdv3/config.go	/^	Config struct {$/;"	t
Config	pkg/client/grpc/config.go	/^type Config struct {$/;"	t
Config	pkg/client/redis/config.go	/^type Config struct {$/;"	t
Config	pkg/client/rocketmq/option.go	/^type Config struct {$/;"	t
Config	pkg/governor/config.go	/^type Config struct {$/;"	t
Config	pkg/registry/etcdv3/config.go	/^type Config struct {$/;"	t
Config	pkg/registry/init.go	/^type Config map[string]struct {$/;"	t
Config	pkg/sentinel/config.go	/^type Config struct {$/;"	t
Config	pkg/server/xecho/config.go	/^type Config struct {$/;"	t
Config	pkg/server/xgin/config.go	/^type Config struct {$/;"	t
Config	pkg/server/xgoframe/config.go	/^type Config struct {$/;"	t
Config	pkg/server/xgrpc/config.go	/^type Config struct {$/;"	t
Config	pkg/store/gorm/config.go	/^type Config struct {$/;"	t
Config	pkg/store/mongox/option.go	/^	Config struct {$/;"	t
Config	pkg/trace/jaeger/config.go	/^type Config struct {$/;"	t
Config	pkg/worker/xcron/config.go	/^type Config struct {$/;"	t
Config	pkg/xlog/config.go	/^type Config struct {$/;"	t
ConfigData	pkg/conf/datasource/http/yasee.go	/^type ConfigData struct {$/;"	t
ConfigData	pkg/datasource/http/yasee.go	/^type ConfigData struct {$/;"	t
ConfigDesc	tools/ast_codes/main.go	/^type ConfigDesc struct {$/;"	t
ConfigEntry	pkg/xlog/config.go	/^func ConfigEntry(name string) string {$/;"	f
ConfigHandler	pkg/conf/datasource/apollo/mockserver/mockserver.go	/^func (s *mockServer) ConfigHandler(rw http.ResponseWriter, req *http.Request) {$/;"	f
ConfigHandler	pkg/datasource/apollo/mockserver/mockserver.go	/^func (s *mockServer) ConfigHandler(rw http.ResponseWriter, req *http.Request) {$/;"	f
ConfigInfo	pkg/server/server.go	/^type ConfigInfo struct {$/;"	t
ConfigPrefix	pkg/client/etcdv3/config.go	/^var ConfigPrefix = constant.ConfigPrefix + ".etcdv3"$/;"	v
ConfigPrefix	pkg/constant/config.go	/^var ConfigPrefix = "jupiter"$/;"	v
ConfigPrefix	pkg/xlog/config.go	/^var ConfigPrefix = constant.ConfigPrefix + ".logger"$/;"	v
Configs	pkg/store/gorm/instance.go	/^func Configs() map[string]interface{} {$/;"	f
Configuration	pkg/conf/conf.go	/^type Configuration struct {$/;"	t
Configuration	pkg/registry/registry.go	/^type Configuration struct {$/;"	t
ConsumerConfig	pkg/client/rocketmq/option.go	/^type ConsumerConfig struct {$/;"	t
ConsumerConfig	pkg/registry/endpoint.go	/^type ConsumerConfig struct {$/;"	t
Context	pkg/server/xgrpc/interceptor.go	/^func (css contextedServerStream) Context() context.Context {$/;"	f
ContinueWhenError	pkg/util/xgo/serial.go	/^	ContinueWhenError WhenError = 2$/;"	v
Copy	pkg/imeta/md.go	/^func (md MD) Copy() MD {$/;"	f
CopyStruct	pkg/util/xstruct/clone.go	/^func CopyStruct(src, dst interface{}) {$/;"	f
CounterVecOpts	pkg/metric/counter.go	/^type CounterVecOpts struct {$/;"	t
CreateProject	cmd/jupiter/new/tools.go	/^func CreateProject(cli *cli.Context) (err error) {$/;"	f
Cron	pkg/worker/xcron/cron.go	/^type Cron struct {$/;"	t
CurrentTimeMillis	pkg/util/xtime/time.go	/^func CurrentTimeMillis() uint64 {$/;"	f
CurrentTimeMillsWithTicker	pkg/util/xtime/time_ticker.go	/^func CurrentTimeMillsWithTicker() uint64 {$/;"	f
CurrentTimeNano	pkg/util/xtime/time.go	/^func CurrentTimeNano() uint64 {$/;"	f
CustomTag	pkg/trace/const.go	/^func CustomTag(key string, val interface{}) opentracing.Tag {$/;"	f
Cycle	pkg/util/xcycle/lifecycle.go	/^type Cycle struct {$/;"	t
DB	pkg/store/gorm/orm.go	/^	DB = gorm.DB$/;"	t
DPanic	pkg/xlog/api.go	/^func DPanic(msg string, fields ...Field) {$/;"	f
DPanic	pkg/xlog/log.go	/^func (logger *Logger) DPanic(msg string, fields ...Field) {$/;"	f
DPanicf	pkg/xlog/api.go	/^func DPanicf(msg string, args ...interface{}) {$/;"	f
DPanicf	pkg/xlog/log.go	/^func (logger *Logger) DPanicf(template string, args ...interface{}) {$/;"	f
DPanicw	pkg/xlog/api.go	/^func DPanicw(msg string, keysAndValues ...interface{}) {$/;"	f
DPanicw	pkg/xlog/log.go	/^func (logger *Logger) DPanicw(msg string, keysAndValues ...interface{}) {$/;"	f
DSN	pkg/store/gorm/dsn.go	/^type DSN struct {$/;"	t
DataSource	pkg/conf/datasource.go	/^type DataSource interface {$/;"	t
DataSourceApollo	pkg/conf/datasource/apollo/register.go	/^const DataSourceApollo = "apollo"$/;"	c
DataSourceApollo	pkg/datasource/apollo/register.go	/^const DataSourceApollo = "apollo"$/;"	c
DataSourceCreatorFunc	pkg/conf/datasource.go	/^type DataSourceCreatorFunc func() DataSource$/;"	t
DataSourceCreatorFunc	pkg/datasource/manager/manager.go	/^type DataSourceCreatorFunc func() conf.DataSource$/;"	t
DataSourceEtcdv3	pkg/conf/datasource/etcdv3/register.go	/^const DataSourceEtcdv3 = "etcdv3"$/;"	c
DataSourceEtcdv3	pkg/datasource/etcdv3/register.go	/^const DataSourceEtcdv3 = "etcdv3"$/;"	c
DataSourceFile	pkg/conf/datasource/file/register.go	/^const DataSourceFile = "file"$/;"	c
DataSourceFile	pkg/datasource/file/register.go	/^const DataSourceFile = "file"$/;"	c
DataSourceHttp	pkg/conf/datasource/http/register.go	/^	DataSourceHttp  = "http"$/;"	c
DataSourceHttp	pkg/datasource/http/register.go	/^	DataSourceHttp  = "http"$/;"	c
DataSourceHttps	pkg/conf/datasource/http/register.go	/^	DataSourceHttps = "https"$/;"	c
DataSourceHttps	pkg/datasource/http/register.go	/^	DataSourceHttps = "https"$/;"	c
DateFormat	pkg/util/xtime/time.go	/^	DateFormat         = "2006-01-02"$/;"	c
Debug	pkg/conf/api.go	/^func Debug(sep string) {$/;"	f
Debug	pkg/xlog/api.go	/^func Debug(msg string, fields ...Field) {$/;"	f
Debug	pkg/xlog/log.go	/^func (logger *Logger) Debug(msg string, fields ...Field) {$/;"	f
DebugBytes	pkg/util/xdebug/print.go	/^func DebugBytes(obj interface{}) string {$/;"	f
DebugEncodeLevel	pkg/xlog/log.go	/^func DebugEncodeLevel(lv zapcore.Level, enc zapcore.PrimitiveArrayEncoder) {$/;"	f
DebugLevel	pkg/xlog/log.go	/^	DebugLevel = zap.DebugLevel$/;"	c
Debugf	pkg/xlog/api.go	/^func Debugf(msg string, args ...interface{}) {$/;"	f
Debugf	pkg/xlog/log.go	/^func (logger *Logger) Debugf(template string, args ...interface{}) {$/;"	f
Debugw	pkg/xlog/api.go	/^func Debugw(msg string, keysAndValues ...interface{}) {$/;"	f
Debugw	pkg/xlog/log.go	/^func (logger *Logger) Debugw(msg string, keysAndValues ...interface{}) {$/;"	f
Decode	pkg/util/xcast/decode.go	/^func Decode(m interface{}, val interface{}) error {$/;"	f
Decr	pkg/client/redis/redis_cmds.go	/^func (r *Redis) Decr(key string) bool {$/;"	f
DeepCopy	pkg/registry/endpoint.go	/^func (in *Endpoints) DeepCopy() *Endpoints {$/;"	f
DeepCopyInfo	pkg/registry/endpoint.go	/^func (in *Endpoints) DeepCopyInfo(out *Endpoints) {$/;"	f
DeepSearchInMap	pkg/util/xmap/util.go	/^func DeepSearchInMap(m map[string]interface{}, paths ...string) map[string]interface{} {$/;"	f
DefaultApp	jupiter.go	/^var DefaultApp = application.DefaultApp$/;"	v
DefaultApp	pkg/application/application.go	/^func DefaultApp() *Application {$/;"	f
DefaultBalanceGroup	pkg/constant/env.go	/^	DefaultBalanceGroup = "default"$/;"	c
DefaultConfig	pkg/client/etcdv3/config.go	/^func DefaultConfig() *Config {$/;"	f
DefaultConfig	pkg/client/grpc/config.go	/^func DefaultConfig() *Config {$/;"	f
DefaultConfig	pkg/client/rocketmq/option.go	/^func DefaultConfig() Config {$/;"	f
DefaultConfig	pkg/governor/config.go	/^func DefaultConfig() *Config {$/;"	f
DefaultConfig	pkg/registry/etcdv3/config.go	/^func DefaultConfig() *Config {$/;"	f
DefaultConfig	pkg/sentinel/config.go	/^func DefaultConfig() *Config {$/;"	f
DefaultConfig	pkg/server/xecho/config.go	/^func DefaultConfig() *Config {$/;"	f
DefaultConfig	pkg/server/xgin/config.go	/^func DefaultConfig() *Config {$/;"	f
DefaultConfig	pkg/server/xgoframe/config.go	/^func DefaultConfig() *Config {$/;"	f
DefaultConfig	pkg/server/xgrpc/config.go	/^func DefaultConfig() *Config {$/;"	f
DefaultConfig	pkg/store/gorm/config.go	/^func DefaultConfig() *Config {$/;"	f
DefaultConfig	pkg/store/mongox/option.go	/^func DefaultConfig() Config {$/;"	f
DefaultConfig	pkg/trace/jaeger/config.go	/^func DefaultConfig() *Config {$/;"	f
DefaultConfig	pkg/worker/xcron/config.go	/^func DefaultConfig() Config {$/;"	f
DefaultConfig	pkg/xlog/config.go	/^func DefaultConfig() *Config {$/;"	f
DefaultConsumerConfig	pkg/client/rocketmq/option.go	/^func DefaultConsumerConfig() ConsumerConfig {$/;"	f
DefaultDeployment	pkg/constant/env.go	/^	DefaultDeployment = ""$/;"	c
DefaultLogger	pkg/xlog/api.go	/^var DefaultLogger = Config{$/;"	v
DefaultNamespace	pkg/metric/metric.go	/^	DefaultNamespace = "jupiter"$/;"	v
DefaultProducerConfig	pkg/client/rocketmq/option.go	/^func DefaultProducerConfig() ProducerConfig {$/;"	f
DefaultProjectName	cmd/jupiter/new/option.go	/^	DefaultProjectName = "jupiter-demo"$/;"	v
DefaultRedisConfig	pkg/client/redis/config.go	/^func DefaultRedisConfig() Config {$/;"	f
DefaultRegion	pkg/constant/env.go	/^	DefaultRegion = ""$/;"	c
DefaultRegisterer	pkg/registry/init.go	/^var DefaultRegisterer Registry = &Local{}$/;"	v
DefaultScheme	pkg/datasource/manager/manager.go	/^	DefaultScheme string$/;"	v
DefaultServeMux	pkg/governor/http.go	/^	DefaultServeMux = http.NewServeMux()$/;"	v
DefaultTTL	pkg/worker/xcron/config.go	/^	DefaultTTL          = 60   \/\/ default set$/;"	c
DefaultWaitLockTime	pkg/worker/xcron/config.go	/^	DefaultWaitLockTime = 1000 \/\/ ms$/;"	c
DefaultZapConfig	pkg/xlog/log.go	/^func DefaultZapConfig() *zapcore.EncoderConfig {$/;"	f
DefaultZone	pkg/constant/env.go	/^	DefaultZone = ""$/;"	c
DeferStack	pkg/util/xdefer/stack.go	/^type DeferStack struct {$/;"	t
Del	pkg/client/redis/redis_cmds.go	/^func (r *Redis) Del(key string) int64 {$/;"	f
DelPrefix	pkg/client/etcdv3/client.go	/^func (client *Client) DelPrefix(ctx context.Context, prefix string) (deleted int64, err error) {$/;"	f
DelWithErr	pkg/client/redis/redis_cmds.go	/^func (r *Redis) DelWithErr(key string) (int64, error) {$/;"	f
DelayGo	pkg/util/xgo/goroutine.go	/^func DelayGo(delay time.Duration, fn func()) {$/;"	f
Delete	pkg/conf/datasource/apollo/mockserver/mockserver.go	/^func (s *mockServer) Delete(namespace, key string) {$/;"	f
Delete	pkg/conf/datasource/apollo/mockserver/mockserver.go	/^func Delete(namespace, key string) {$/;"	f
Delete	pkg/datasource/apollo/mockserver/mockserver.go	/^func (s *mockServer) Delete(namespace, key string) {$/;"	f
Delete	pkg/datasource/apollo/mockserver/mockserver.go	/^func Delete(namespace, key string) {$/;"	f
Descriptor	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (*HelloReply) Descriptor() ([]byte, []int) {$/;"	f
Descriptor	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (*HelloRequest) Descriptor() ([]byte, []int) {$/;"	f
Descriptor	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (*WhoServerReply) Descriptor() ([]byte, []int) {$/;"	f
Descriptor	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (*WhoServerReq) Descriptor() ([]byte, []int) {$/;"	f
Dial	pkg/util/xnet/ping.go	/^func Dial(addr string, timeout time.Duration) error {$/;"	f
Dialect	pkg/store/gorm/orm.go	/^	Dialect = gorm.Dialect$/;"	t
Disable	jupiter_option.go	/^type Disable = application.Disable$/;"	t
Disable	pkg/application/option.go	/^type Disable int$/;"	t
DisableDefaultGovernor	jupiter_option.go	/^	DisableDefaultGovernor Disable = application.DisableDefaultGovernor$/;"	c
DisableDefaultGovernor	pkg/application/option.go	/^	DisableDefaultGovernor Disable = 3$/;"	c
DisableLoadConfig	jupiter_option.go	/^	DisableLoadConfig      Disable = application.DisableLoadConfig$/;"	c
DisableLoadConfig	pkg/application/option.go	/^	DisableLoadConfig      Disable = 2$/;"	c
DisableParserFlag	jupiter_option.go	/^	DisableParserFlag      Disable = application.DisableParserFlag$/;"	c
DisableParserFlag	pkg/application/option.go	/^	DisableParserFlag      Disable = 1$/;"	c
Done	pkg/util/xcycle/lifecycle.go	/^func (c *Cycle) Done() <-chan struct{} {$/;"	f
DoneAndClose	pkg/util/xcycle/lifecycle.go	/^func (c *Cycle) DoneAndClose() {$/;"	f
DumpPanicTrace	pkg/util/xdebug/debug.go	/^func DumpPanicTrace(kb int) {$/;"	f
Duration	pkg/util/xtime/duration.go	/^func Duration(str string) time.Duration {$/;"	f
Duration	pkg/xlog/log.go	/^	Duration = zap.Duration$/;"	v
Durationp	pkg/xlog/log.go	/^	Durationp = zap.Durationp$/;"	v
ERRCHECK	Makefile	/^ERRCHECK := $(shell command -v errcheck 2 > \/dev\/null)$/;"	m
EcodeNum	pkg/ecode/code.go	/^const EcodeNum int32 = 9999$/;"	c
Elapse	pkg/util/xtime/api.go	/^func Elapse(f func()) int64 {$/;"	f
EmptyCall	pkg/client/grpc/balancer/p2c/least_loaded_test.go	/^func (s *testServer) EmptyCall(ctx context.Context, in *testpb.Empty) (*testpb.Empty, error) {$/;"	f
EmptyMessage	pkg/server/xecho/status.go	/^type EmptyMessage struct{}$/;"	t
EmptyMessage	pkg/server/xgin/status.go	/^type EmptyMessage struct{}$/;"	t
EmptyMessage	pkg/server/xgoframe/status.go	/^type EmptyMessage struct{}$/;"	t
EndOfDay	pkg/util/xtime/time.go	/^func (t *Time) EndOfDay() *Time {$/;"	f
EndOfHour	pkg/util/xtime/time.go	/^func (t *Time) EndOfHour() *Time {$/;"	f
EndOfMinute	pkg/util/xtime/time.go	/^func (t *Time) EndOfMinute() *Time {$/;"	f
EndOfMonth	pkg/util/xtime/time.go	/^func (t *Time) EndOfMonth() *Time {$/;"	f
EndOfWeek	pkg/util/xtime/time.go	/^func (t *Time) EndOfWeek() *Time {$/;"	f
EndOfYear	pkg/util/xtime/time.go	/^func (t *Time) EndOfYear() *Time {$/;"	f
Endpoints	pkg/registry/endpoint.go	/^type Endpoints struct {$/;"	t
Engine	example/all/internal/app/demo/engine.go	/^type Engine struct {$/;"	t
Engine	example/build/main.go	/^type Engine struct {$/;"	t
Engine	example/client/redis/main.go	/^type Engine struct {$/;"	t
Engine	example/client/rocketmq/main.go	/^type Engine struct {$/;"	t
Engine	example/config/onelineByEtcdv3/main.go	/^type Engine struct {$/;"	t
Engine	example/config/onelineByFile/main.go	/^type Engine struct {$/;"	t
Engine	example/config/onelineByFileWatch/main.go	/^type Engine struct {$/;"	t
Engine	example/config/onelineByRemoteConfig/main.go	/^type Engine struct {$/;"	t
Engine	example/config/onelineByRemoteConfigWatch/main.go	/^type Engine struct {$/;"	t
Engine	example/config/onelinebyApollo/main.go	/^type Engine struct {$/;"	t
Engine	example/config/structByFile/main.go	/^type Engine struct {$/;"	t
Engine	example/config/structByFileWatch/main.go	/^type Engine struct {$/;"	t
Engine	example/config/structByRemoteConfigWatch/main.go	/^type Engine struct {$/;"	t
Engine	example/config/structByremoteConfig/main.go	/^type Engine struct {$/;"	t
Engine	example/grpc/direct/direct-client/main.go	/^type Engine struct {$/;"	t
Engine	example/grpc/direct/direct-server/main.go	/^type Engine struct {$/;"	t
Engine	example/grpc/etcd/etcd-client/main.go	/^type Engine struct {$/;"	t
Engine	example/grpc/etcd/etcd-server/main.go	/^type Engine struct {$/;"	t
Engine	example/helloworld/main.go	/^type Engine struct {$/;"	t
Engine	example/http/all/main.go	/^type Engine struct {$/;"	t
Engine	example/http/gin-swagger/main.go	/^type Engine struct {$/;"	t
Engine	example/http/gin/main.go	/^type Engine struct {$/;"	t
Engine	example/http/gin_ws_cors/main.go	/^type Engine struct {$/;"	t
Engine	example/http/gofame/main.go	/^type Engine struct {$/;"	t
Engine	example/http/register/main.go	/^type Engine struct {$/;"	t
Engine	example/http/simple/main.go	/^type Engine struct {$/;"	t
Engine	example/job/main.go	/^type Engine struct {$/;"	t
Engine	example/logger/command/main.go	/^type Engine struct {$/;"	t
Engine	example/logger/file/main.go	/^type Engine struct {$/;"	t
Engine	example/logger/fileByWatch/main.go	/^type Engine struct {$/;"	t
Engine	example/monitor/main.go	/^type Engine struct {$/;"	t
Engine	example/remoteconfig/main.go	/^type Engine struct {$/;"	t
Engine	example/sentinel/main.go	/^type Engine struct {$/;"	t
Engine	example/store/mongo/main.go	/^type Engine struct {$/;"	t
Engine	example/trace/main.go	/^type Engine struct {$/;"	t
Engine	example/worker/cron/main.go	/^type Engine struct {$/;"	t
Entry	pkg/sentinel/config.go	/^func Entry(resource string) (*base.SentinelEntry, *base.BlockError) {$/;"	f
Entry	pkg/worker/xcron/cron.go	/^	Entry = cron.Entry$/;"	t
EntryID	pkg/worker/xcron/cron.go	/^	EntryID = cron.EntryID$/;"	t
EnvAppHost	pkg/constant/env.go	/^	EnvAppHost     = "APP_HOST"$/;"	c
EnvAppInstance	pkg/constant/env.go	/^	EnvAppInstance = "APP_INSTANCE" \/\/ application unique instance id.$/;"	c
EnvAppLogDir	pkg/constant/env.go	/^	EnvAppLogDir   = "APP_LOG_DIR"$/;"	c
EnvAppMode	pkg/constant/env.go	/^	EnvAppMode     = "APP_MODE"$/;"	c
EnvAppName	pkg/constant/env.go	/^	EnvAppName = "APP_NAME"$/;"	c
EnvAppRegion	pkg/constant/env.go	/^	EnvAppRegion   = "APP_REGION"$/;"	c
EnvAppZone	pkg/constant/env.go	/^	EnvAppZone     = "APP_ZONE"$/;"	c
EnvDeployment	pkg/constant/env.go	/^	EnvDeployment = "APP_DEPLOYMENT"$/;"	c
EnvKeySentinelAppName	pkg/constant/env.go	/^	EnvKeySentinelAppName = "SENTINEL_APP_NAME"$/;"	c
EnvKeySentinelLogDir	pkg/constant/env.go	/^	EnvKeySentinelLogDir = "SENTINEL_LOG_DIR"$/;"	c
EnvServerHost	pkg/application/runtime.go	/^func EnvServerHost() string {$/;"	f
ErrCantStartTransaction	pkg/store/gorm/orm.go	/^	ErrCantStartTransaction = gorm.ErrCantStartTransaction$/;"	v
ErrConfigAddr	pkg/conf/datasource.go	/^	ErrConfigAddr = errors.New("no config... ")$/;"	v
ErrConfigAddr	pkg/datasource/manager/manager.go	/^	ErrConfigAddr = errors.New("no config... ")$/;"	v
ErrFoo	pkg/util/xtest/server/yell/server.go	/^var ErrFoo = errors.New("error foo")$/;"	v
ErrGRPCInvokeLen	pkg/server/xecho/error.go	/^	ErrGRPCInvokeLen = grpc.Errorf(codes.Internal, "invoke request without len 2 res")$/;"	v
ErrGRPCInvokeLen	pkg/server/xgin/error.go	/^	ErrGRPCInvokeLen = grpc.Errorf(codes.Internal, "invoke request without len 2 res")$/;"	v
ErrGRPCResponseValid	pkg/server/xecho/error.go	/^	ErrGRPCResponseValid = grpc.Errorf(codes.Internal, "response valid")$/;"	v
ErrGRPCResponseValid	pkg/server/xgin/error.go	/^	ErrGRPCResponseValid = grpc.Errorf(codes.Internal, "response valid")$/;"	v
ErrInvalidDataSource	pkg/conf/datasource.go	/^	ErrInvalidDataSource = errors.New("invalid data source, please make sure the scheme has been registered")$/;"	v
ErrInvalidDataSource	pkg/datasource/manager/manager.go	/^	ErrInvalidDataSource = errors.New("invalid data source, please make sure the scheme has been registered")$/;"	v
ErrInvalidKVPairs	pkg/util/xattr/attr.go	/^	ErrInvalidKVPairs = errors.New("invalid kv pairs")$/;"	v
ErrInvalidKey	pkg/conf/conf.go	/^var ErrInvalidKey = errors.New("invalid key, maybe not exist in config")$/;"	v
ErrInvalidSQL	pkg/store/gorm/orm.go	/^	ErrInvalidSQL = gorm.ErrInvalidSQL$/;"	v
ErrInvalidTransaction	pkg/store/gorm/orm.go	/^	ErrInvalidTransaction = gorm.ErrInvalidTransaction$/;"	v
ErrKindAny	pkg/ecode/unified.go	/^	ErrKindAny = "any"$/;"	c
ErrKindFlagErr	pkg/ecode/unified.go	/^	ErrKindFlagErr = "flag err"$/;"	c
ErrKindListenErr	pkg/ecode/unified.go	/^	ErrKindListenErr = "listen err"$/;"	c
ErrKindRegisterErr	pkg/ecode/unified.go	/^	ErrKindRegisterErr = "register err"$/;"	c
ErrKindRequestErr	pkg/ecode/unified.go	/^	ErrKindRequestErr = "request err"$/;"	c
ErrKindUnmarshalConfigErr	pkg/ecode/unified.go	/^	ErrKindUnmarshalConfigErr = "unmarshal config err"$/;"	c
ErrKindUriErr	pkg/ecode/unified.go	/^	ErrKindUriErr = "uri err"$/;"	c
ErrNotFound	pkg/server/xecho/error.go	/^var ErrNotFound = HTTPError{$/;"	v
ErrNotFound	pkg/server/xgin/error.go	/^var ErrNotFound = HTTPError{$/;"	v
ErrNotPointer	pkg/util/xcast/decode.go	/^	ErrNotPointer = errors.New("val must be a pointer")$/;"	v
ErrRecordNotFound	pkg/store/gorm/orm.go	/^	ErrRecordNotFound = gorm.ErrRecordNotFound$/;"	v
ErrUnaddressable	pkg/store/gorm/orm.go	/^	ErrUnaddressable = gorm.ErrUnaddressable$/;"	v
ErrUnaddressable	pkg/util/xcast/decode.go	/^	ErrUnaddressable = errors.New("val must be addressable")$/;"	v
Error	pkg/server/xecho/error.go	/^func (e HTTPError) Error() string {$/;"	f
Error	pkg/server/xgin/error.go	/^func (e HTTPError) Error() string {$/;"	f
Error	pkg/worker/xcron/config.go	/^func (wl *wrappedLogger) Error(err error, msg string, keysAndValues ...interface{}) {$/;"	f
Error	pkg/xgrpclog/logger.go	/^func (l *loggerWrapper) Error(args ...interface{}) {$/;"	f
Error	pkg/xlog/api.go	/^func Error(msg string, fields ...Field) {$/;"	f
Error	pkg/xlog/log.go	/^func (logger *Logger) Error(msg string, fields ...Field) {$/;"	f
Error	pkg/xlog/trace.go	/^func (t *Tracer) Error(fields ...Field) {$/;"	f
ErrorLevel	pkg/xlog/log.go	/^	ErrorLevel = zap.ErrorLevel$/;"	c
Errorf	pkg/conf/datasource/apollo/apollo.go	/^func (l *agolloLogger) Errorf(format string, args ...interface{}) {$/;"	f
Errorf	pkg/datasource/apollo/apollo.go	/^func (l *agolloLogger) Errorf(format string, args ...interface{}) {$/;"	f
Errorf	pkg/xgrpclog/logger.go	/^func (l *loggerWrapper) Errorf(format string, args ...interface{}) {$/;"	f
Errorf	pkg/xlog/api.go	/^func Errorf(msg string, args ...interface{}) {$/;"	f
Errorf	pkg/xlog/log.go	/^func (logger *Logger) Errorf(template string, args ...interface{}) {$/;"	f
Errorln	pkg/xgrpclog/logger.go	/^func (l *loggerWrapper) Errorln(args ...interface{}) {$/;"	f
Errors	pkg/store/gorm/orm.go	/^	Errors = gorm.Errors$/;"	t
Errorw	pkg/xlog/api.go	/^func Errorw(msg string, keysAndValues ...interface{}) {$/;"	f
Errorw	pkg/xlog/log.go	/^func (logger *Logger) Errorw(msg string, keysAndValues ...interface{}) {$/;"	f
Event	pkg/registry/registry.go	/^type Event uint8$/;"	t
EventDelete	pkg/registry/registry.go	/^	EventDelete$/;"	c
EventMessage	pkg/registry/registry.go	/^type EventMessage struct {$/;"	t
EventUnknown	pkg/registry/registry.go	/^	EventUnknown Event = iota$/;"	c
EventUpdate	pkg/registry/registry.go	/^	EventUpdate$/;"	c
Every	pkg/worker/xcron/cron.go	/^	Every = cron.Every$/;"	v
Example	pkg/xlog/rotate/example_test.go	/^func Example() {$/;"	f
ExampleLogger_Rotate	pkg/xlog/rotate/rotate_test.go	/^func ExampleLogger_Rotate() {$/;"	f
ExampleTraceFunc	pkg/trace/trace_example_test.go	/^func ExampleTraceFunc() {$/;"	f
Exists	pkg/client/redis/redis_cmds.go	/^func (r *Redis) Exists(key string) bool {$/;"	f
Exists	pkg/conf/api.go	/^func Exists(key string) bool {$/;"	f
Exists	pkg/util/xfile/file.go	/^func Exists(fpath string) bool {$/;"	f
ExistsWithErr	pkg/client/redis/redis_cmds.go	/^func (r *Redis) ExistsWithErr(key string) (bool, error) {$/;"	f
Expire	pkg/client/redis/redis_cmds.go	/^func (r *Redis) Expire(key string, expiration time.Duration) (bool, error) {$/;"	f
ExtractCodes	pkg/ecode/code.go	/^func ExtractCodes(e error) *spbStatus {$/;"	f
ExtractTraceMD	pkg/xlog/trace.go	/^func ExtractTraceMD(ctx interface{ Get(string) interface{} }) (md *Tracer, ok bool) {$/;"	f
Fatal	pkg/xgrpclog/logger.go	/^func (l *loggerWrapper) Fatal(args ...interface{}) {$/;"	f
Fatal	pkg/xlog/api.go	/^func Fatal(msg string, fields ...Field) {$/;"	f
Fatal	pkg/xlog/log.go	/^func (logger *Logger) Fatal(msg string, fields ...Field) {$/;"	f
FatalLevel	pkg/xlog/log.go	/^	FatalLevel = zap.FatalLevel$/;"	c
Fatalf	pkg/xgrpclog/logger.go	/^func (l *loggerWrapper) Fatalf(format string, args ...interface{}) {$/;"	f
Fatalf	pkg/xlog/api.go	/^func Fatalf(msg string, args ...interface{}) {$/;"	f
Fatalf	pkg/xlog/log.go	/^func (logger *Logger) Fatalf(template string, args ...interface{}) {$/;"	f
Fatalln	pkg/xgrpclog/logger.go	/^func (l *loggerWrapper) Fatalln(args ...interface{}) {$/;"	f
Fatalw	pkg/xlog/api.go	/^func Fatalw(msg string, keysAndValues ...interface{}) {$/;"	f
Fatalw	pkg/xlog/log.go	/^func (logger *Logger) Fatalw(msg string, keysAndValues ...interface{}) {$/;"	f
Field	pkg/store/gorm/orm.go	/^	Field = gorm.Field$/;"	t
Field	pkg/xlog/log.go	/^	Field  = zap.Field$/;"	t
FieldAddr	pkg/xlog/field.go	/^func FieldAddr(value string) Field {$/;"	f
FieldAddrAny	pkg/xlog/field.go	/^func FieldAddrAny(value interface{}) Field {$/;"	f
FieldAid	pkg/xlog/field.go	/^func FieldAid(value string) Field {$/;"	f
FieldCode	pkg/xlog/field.go	/^func FieldCode(value int32) Field {$/;"	f
FieldCost	pkg/xlog/field.go	/^func FieldCost(value time.Duration) Field {$/;"	f
FieldDesc	tools/ast_codes/main.go	/^type FieldDesc struct {$/;"	t
FieldErr	pkg/xlog/field.go	/^func FieldErr(err error) Field {$/;"	f
FieldErrKind	pkg/xlog/field.go	/^func FieldErrKind(value string) Field {$/;"	f
FieldEvent	pkg/xlog/field.go	/^func FieldEvent(value string) Field {$/;"	f
FieldExtMessage	pkg/xlog/field.go	/^func FieldExtMessage(vals ...interface{}) Field {$/;"	f
FieldKey	pkg/xlog/field.go	/^func FieldKey(value string) Field {$/;"	f
FieldKeyAny	pkg/xlog/field.go	/^func FieldKeyAny(value interface{}) Field {$/;"	f
FieldMethod	pkg/xlog/field.go	/^func FieldMethod(value string) Field {$/;"	f
FieldMod	pkg/xlog/field.go	/^func FieldMod(value string) Field {$/;"	f
FieldName	pkg/xlog/field.go	/^func FieldName(value string) Field {$/;"	f
FieldStack	pkg/xlog/field.go	/^func FieldStack(value []byte) Field {$/;"	f
FieldStringErr	pkg/xlog/field.go	/^func FieldStringErr(err string) Field {$/;"	f
FieldType	pkg/xlog/field.go	/^func FieldType(value string) Field {$/;"	f
FieldValue	pkg/xlog/field.go	/^func FieldValue(value string) Field {$/;"	f
FieldValueAny	pkg/xlog/field.go	/^func FieldValueAny(value interface{}) Field {$/;"	f
FileInfo	pkg/util/xfile/file.go	/^type FileInfo struct {$/;"	t
FileStat	pkg/util/xfile/filestat_posix.go	/^func FileStat(name string) (fi FileInfo, err error) {$/;"	f
FileStat	pkg/util/xfile/filestat_windows.go	/^func FileStat(name string) (fi FileInfo, err error) {$/;"	f
Filename	pkg/xlog/config.go	/^func (config *Config) Filename() string {$/;"	f
Flag	pkg/flag/flag.go	/^	Flag interface {$/;"	t
FlagSet	pkg/flag/flag.go	/^	FlagSet struct {$/;"	t
FlatMap	pkg/util/xmap/map.go	/^type FlatMap struct {$/;"	t
Float64	pkg/flag/flag.go	/^func (fs *FlagSet) Float64(name string) float64 {$/;"	f
Float64	pkg/flag/flag.go	/^func Float64(name string) float64 { return flagset.Float64(name) }$/;"	f
Float64	pkg/util/xrand/int.go	/^func Float64() float64 {$/;"	f
Float64E	pkg/flag/flag.go	/^func (fs *FlagSet) Float64E(name string) (float64, error) {$/;"	f
Float64E	pkg/flag/flag.go	/^func Float64E(name string) (float64, error) { return flagset.Float64E(name) }$/;"	f
Float64Flag	pkg/flag/flag.go	/^type Float64Flag struct {$/;"	t
FlowInfo	pkg/client/rocketmq/interceptor.go	/^type FlowInfo struct {$/;"	t
FlowInfoBase	pkg/istats/flow_info.go	/^type FlowInfoBase struct {$/;"	t
Flush	pkg/xlog/log.go	/^func (logger *Logger) Flush() error {$/;"	f
Flush	pkg/xlog/trace.go	/^func (t *Tracer) Flush(msg string, logger *Logger) {$/;"	f
FooServer	pkg/util/xtest/server/yell/server.go	/^type FooServer struct {$/;"	t
ForeachKey	pkg/trace/carrier.go	/^func (w MetadataReaderWriter) ForeachKey(handler func(key, val string) error) error {$/;"	f
Format	pkg/util/xstring/format.go	/^func (fm Formatter) Format(args ...interface{}) string {$/;"	f
Format	pkg/util/xtime/time.go	/^func (ts TimeFormat) Format(t time.Time) string {$/;"	f
FormatDate	pkg/util/xtime/time.go	/^func FormatDate(tsMillis uint64) string {$/;"	f
FormatTimeMillis	pkg/util/xtime/time.go	/^func FormatTimeMillis(tsMillis uint64) string {$/;"	f
Formatter	pkg/util/xstring/format.go	/^type Formatter string$/;"	t
FromContext	pkg/imeta/context.go	/^func FromContext(ctx context.Context) (md MD, ok bool) {$/;"	f
FromIncomingContext	pkg/trace/const.go	/^func FromIncomingContext(ctx context.Context) opentracing.StartSpanOption {$/;"	f
FullDuplexCall	pkg/client/grpc/balancer/p2c/least_loaded_test.go	/^func (s *testServer) FullDuplexCall(stream testpb.TestService_FullDuplexCallServer) error {$/;"	f
Func	pkg/xlog/log.go	/^	Func   func(string, ...zap.Field)$/;"	t
FuncJob	pkg/worker/xcron/cron.go	/^type FuncJob func() error$/;"	t
FunctionName	pkg/util/xstring/function.go	/^func FunctionName(i interface{}) string {$/;"	f
GOCMT	Makefile	/^GOCMT := $(shell command -v gocmt 2 > \/dev\/null)$/;"	m
GO_FILES	Makefile	/^GO_FILES := $(shell find . -name '*.go' | grep \/pkg\/ | grep -v _test.go)$/;"	m
GRPCProxyMessage	pkg/server/xecho/status.go	/^type GRPCProxyMessage struct {$/;"	t
GRPCProxyMessage	pkg/server/xgin/status.go	/^type GRPCProxyMessage struct {$/;"	t
GRPCProxyMessage	pkg/server/xgoframe/status.go	/^type GRPCProxyMessage struct {$/;"	t
GRPCProxyWrapper	pkg/server/xecho/handler.go	/^func GRPCProxyWrapper(h interface{}) echo.HandlerFunc {$/;"	f
GRPCServerGen	cmd/jupiter/protoc/server.go	/^type GRPCServerGen struct {$/;"	t
GRPCServerTemplate	cmd/jupiter/protoc/template/server_tmpl.go	/^var GRPCServerTemplate = `$/;"	v
GaugeVecOpts	pkg/metric/gauge.go	/^type GaugeVecOpts struct {$/;"	t
GenerateID	pkg/util/xstring/uuid.go	/^func GenerateID() string {$/;"	f
GenerateUUID	pkg/util/xstring/uuid.go	/^func GenerateUUID(seedTime time.Time) string {$/;"	f
GeoAdd	pkg/client/redis/redis_cmds.go	/^func (r *Redis) GeoAdd(key string, location *redis.GeoLocation) (int64, error) {$/;"	f
GeoRadius	pkg/client/redis/redis_cmds.go	/^func (r *Redis) GeoRadius(key string, longitude, latitude float64, query *redis.GeoRadiusQuery) ([]redis.GeoLocation, error) {$/;"	f
Get	pkg/client/redis/redis_cmds.go	/^func (r *Redis) Get(key string) string {$/;"	f
Get	pkg/conf/api.go	/^func Get(key string) interface{} {$/;"	f
Get	pkg/conf/conf.go	/^func (c *Configuration) Get(key string) interface{} {$/;"	f
Get	pkg/conf/datasource/apollo/mockserver/mockserver.go	/^func (s *mockServer) Get(namespace string) map[string]string {$/;"	f
Get	pkg/datasource/apollo/mockserver/mockserver.go	/^func (s *mockServer) Get(namespace string) map[string]string {$/;"	f
Get	pkg/imeta/md.go	/^func (md MD) Get(k string) []string {$/;"	f
Get	pkg/store/mongox/instance.go	/^func Get(name string) *mongo.Client {$/;"	f
Get	pkg/util/xbuffer/unbounded.go	/^func (b *Unbounded) Get() <-chan interface{} {$/;"	f
Get	pkg/util/xmap/map.go	/^func (flat *FlatMap) Get(key string) interface{} {$/;"	f
GetBool	pkg/conf/conf.go	/^func (c *Configuration) GetBool(key string) bool {$/;"	f
GetBool	pkg/conf/conf.go	/^func GetBool(key string) bool {$/;"	f
GetBool	pkg/util/xmap/map.go	/^func (flat *FlatMap) GetBool(key string) bool {$/;"	f
GetCodeAsBool	pkg/ecode/status.go	/^func (s *spbStatus) GetCodeAsBool() bool {$/;"	f
GetCodeAsInt	pkg/ecode/status.go	/^func (s *spbStatus) GetCodeAsInt() int {$/;"	f
GetCodeAsUint32	pkg/ecode/status.go	/^func (s *spbStatus) GetCodeAsUint32() uint32 {$/;"	f
GetConsumer	pkg/client/rocketmq/init.go	/^func GetConsumer(name string) *PushConsumer {$/;"	f
GetCurrentDirectory	pkg/util/xdebug/testing.go	/^func GetCurrentDirectory() string {$/;"	f
GetCurrentDirectory	pkg/util/xfile/dir.go	/^func GetCurrentDirectory() string {$/;"	f
GetCurrentPackage	pkg/util/xfile/dir.go	/^func GetCurrentPackage() string {$/;"	f
GetDetailMessage	pkg/ecode/status.go	/^func (s *spbStatus) GetDetailMessage(exts ...interface{}) string {$/;"	f
GetDone	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (m *HelloReply) GetDone() bool {$/;"	f
GetDuration	pkg/conf/conf.go	/^func (c *Configuration) GetDuration(key string) time.Duration {$/;"	f
GetDuration	pkg/conf/conf.go	/^func GetDuration(key string) time.Duration {$/;"	f
GetDuration	pkg/util/xmap/map.go	/^func (flat *FlatMap) GetDuration(key string) time.Duration {$/;"	f
GetEntryByName	pkg/worker/xcron/cron.go	/^func (c *Cron) GetEntryByName(name string) cron.Entry {$/;"	f
GetFileName	pkg/conf/datasource/http/cache.go	/^func GetFileName(cacheKey string, cacheDir string) string {$/;"	f
GetFileName	pkg/datasource/http/cache.go	/^func GetFileName(cacheKey string, cacheDir string) string {$/;"	f
GetFloat64	pkg/conf/conf.go	/^func (c *Configuration) GetFloat64(key string) float64 {$/;"	f
GetFloat64	pkg/conf/conf.go	/^func GetFloat64(key string) float64 {$/;"	f
GetFloat64	pkg/util/xmap/map.go	/^func (flat *FlatMap) GetFloat64(key string) float64 {$/;"	f
GetIPs	pkg/util/xnet/ip.go	/^func GetIPs() (ips []string) {$/;"	f
GetId32	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (m *HelloReply) GetId32() int32 {$/;"	f
GetId64	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (m *HelloReply) GetId64() int64 {$/;"	f
GetIdu32	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (m *HelloReply) GetIdu32() uint32 {$/;"	f
GetIdu64	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (m *HelloReply) GetIdu64() uint64 {$/;"	f
GetInt	pkg/conf/conf.go	/^func (c *Configuration) GetInt(key string) int {$/;"	f
GetInt	pkg/conf/conf.go	/^func GetInt(key string) int {$/;"	f
GetInt	pkg/util/xmap/map.go	/^func (flat *FlatMap) GetInt(key string) int {$/;"	f
GetInt64	pkg/conf/conf.go	/^func (c *Configuration) GetInt64(key string) int64 {$/;"	f
GetInt64	pkg/conf/conf.go	/^func GetInt64(key string) int64 {$/;"	f
GetInt64	pkg/util/xmap/map.go	/^func (flat *FlatMap) GetInt64(key string) int64 {$/;"	f
GetJobName	example/job/main.go	/^func (j *JobRunner) GetJobName() string {$/;"	f
GetJobName	pkg/application/application_test.go	/^func (t *namedJobRunner) GetJobName() string {$/;"	f
GetKeyValue	pkg/client/etcdv3/client.go	/^func (client *Client) GetKeyValue(ctx context.Context, key string) (kv *mvccpb.KeyValue, err error) {$/;"	f
GetLeaseSession	pkg/client/etcdv3/client.go	/^func (client *Client) GetLeaseSession(ctx context.Context, opts ...concurrency.SessionOption) (leaseSession *concurrency.Session, err error) {$/;"	f
GetLocalIP	pkg/util/xnet/ip.go	/^func GetLocalIP() (string, error) {$/;"	f
GetLocalMainIP	pkg/util/xnet/ip.go	/^func GetLocalMainIP() (string, int, error) {$/;"	f
GetMacAddrs	pkg/util/xnet/ip.go	/^func GetMacAddrs() (macAddrs []string) {$/;"	f
GetMessage	pkg/ecode/status.go	/^func (s *spbStatus) GetMessage(exts ...interface{}) string {$/;"	f
GetMessage	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (m *HelloReply) GetMessage() string {$/;"	f
GetMessage	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (m *WhoServerReply) GetMessage() string {$/;"	f
GetModPath	cmd/jupiter/common/util.go	/^func GetModPath(projectPath string) (modPath string) {$/;"	f
GetName	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (m *HelloReply) GetName() []byte {$/;"	f
GetName	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (m *HelloRequest) GetName() string {$/;"	f
GetOption	pkg/conf/option.go	/^	GetOption  func(o *GetOptions)$/;"	t
GetOptions	pkg/conf/option.go	/^	GetOptions struct {$/;"	t
GetPrefix	pkg/client/etcdv3/client.go	/^func (client *Client) GetPrefix(ctx context.Context, prefix string) (map[string]string, error) {$/;"	f
GetProducer	pkg/client/rocketmq/init.go	/^func GetProducer(name string) *Producer {$/;"	f
GetRaw	pkg/client/redis/redis_cmds.go	/^func (r *Redis) GetRaw(key string) ([]byte, error) {$/;"	f
GetService	pkg/registry/registry.go	/^func GetService(s string) *server.ServiceInfo {$/;"	f
GetServiceKey	pkg/registry/registry.go	/^func GetServiceKey(prefix string, s *server.ServiceInfo) string {$/;"	f
GetServiceValue	pkg/registry/registry.go	/^func GetServiceValue(s *server.ServiceInfo) string {$/;"	f
GetSlice	pkg/conf/conf.go	/^func (c *Configuration) GetSlice(key string) []interface{} {$/;"	f
GetSlice	pkg/conf/conf.go	/^func GetSlice(key string) []interface{} {$/;"	f
GetSlice	pkg/util/xmap/map.go	/^func (flat *FlatMap) GetSlice(key string) []interface{} {$/;"	f
GetSliceStringMap	pkg/conf/conf.go	/^func (c *Configuration) GetSliceStringMap(key string) []map[string]interface{} {$/;"	f
GetSliceStringMap	pkg/util/xmap/map.go	/^func (flat *FlatMap) GetSliceStringMap(key string) []map[string]interface{} {$/;"	f
GetString	pkg/conf/conf.go	/^func (c *Configuration) GetString(key string) string {$/;"	f
GetString	pkg/conf/conf.go	/^func GetString(key string) string {$/;"	f
GetString	pkg/util/xmap/map.go	/^func (flat *FlatMap) GetString(key string) string {$/;"	f
GetStringMap	pkg/conf/conf.go	/^func (c *Configuration) GetStringMap(key string) map[string]interface{} {$/;"	f
GetStringMap	pkg/conf/conf.go	/^func GetStringMap(key string) map[string]interface{} {$/;"	f
GetStringMap	pkg/util/xmap/map.go	/^func (flat *FlatMap) GetStringMap(key string) map[string]interface{} {$/;"	f
GetStringMapString	pkg/conf/conf.go	/^func (c *Configuration) GetStringMapString(key string) map[string]string {$/;"	f
GetStringMapString	pkg/conf/conf.go	/^func GetStringMapString(key string) map[string]string {$/;"	f
GetStringMapString	pkg/util/xmap/map.go	/^func (flat *FlatMap) GetStringMapString(key string) map[string]string {$/;"	f
GetStringMapStringSlice	pkg/conf/conf.go	/^func (c *Configuration) GetStringMapStringSlice(key string) map[string][]string {$/;"	f
GetStringMapStringSlice	pkg/conf/conf.go	/^func GetStringMapStringSlice(key string) map[string][]string {$/;"	f
GetStringMapStringSlice	pkg/util/xmap/map.go	/^func (flat *FlatMap) GetStringMapStringSlice(key string) map[string][]string {$/;"	f
GetStringSlice	pkg/conf/conf.go	/^func (c *Configuration) GetStringSlice(key string) []string {$/;"	f
GetStringSlice	pkg/conf/conf.go	/^func GetStringSlice(key string) []string {$/;"	f
GetStringSlice	pkg/util/xmap/map.go	/^func (flat *FlatMap) GetStringSlice(key string) []string {$/;"	f
GetTime	pkg/conf/conf.go	/^func (c *Configuration) GetTime(key string) time.Time {$/;"	f
GetTime	pkg/conf/conf.go	/^func GetTime(key string) time.Time {$/;"	f
GetTime	pkg/util/xmap/map.go	/^func (flat *FlatMap) GetTime(key string) time.Time {$/;"	f
GetTimestampInMilli	pkg/util/xtime/api.go	/^func GetTimestampInMilli() int64 {$/;"	f
GetValues	pkg/client/etcdv3/client.go	/^func (client *Client) GetValues(ctx context.Context, keys ...string) (map[string]string, error) {$/;"	f
Go	pkg/util/xgo/goroutine.go	/^func Go(fn func()) {$/;"	f
GoDirect	pkg/util/xgo/goroutine.go	/^func GoDirect(fn interface{}, args ...interface{}) {$/;"	f
GoVersion	pkg/pkg.go	/^func GoVersion() string {$/;"	f
GracefulStop	pkg/application/application.go	/^func (app *Application) GracefulStop(ctx context.Context) (err error) {$/;"	f
GracefulStop	pkg/application/application_test.go	/^func (s *testServer) GracefulStop(ctx context.Context) error {$/;"	f
GracefulStop	pkg/governor/server.go	/^func (s *Server) GracefulStop(ctx context.Context) error {$/;"	f
GracefulStop	pkg/server/xecho/server.go	/^func (s *Server) GracefulStop(ctx context.Context) error {$/;"	f
GracefulStop	pkg/server/xgin/server.go	/^func (s *Server) GracefulStop(ctx context.Context) error {$/;"	f
GracefulStop	pkg/server/xgoframe/server.go	/^func (s *Server) GracefulStop(ctx context.Context) error {$/;"	f
GracefulStop	pkg/server/xgrpc/server.go	/^func (s *Server) GracefulStop(ctx context.Context) error {$/;"	f
Green	pkg/util/xcolor/string_darwin.go	/^func Green(msg string, arg ...interface{}) string {$/;"	f
Green	pkg/util/xcolor/string_linux.go	/^func Green(msg string, arg ...interface{}) string {$/;"	f
Green	pkg/util/xcolor/string_windows.go	/^func Green(msg string, arg ...interface{}) string {$/;"	f
GreenColor	pkg/util/xcolor/util.go	/^	GreenColor$/;"	c
Greeter	example/all/internal/app/greeter/greeter.go	/^type Greeter struct{}$/;"	t
Greeter	example/grpc/direct/direct-server/main.go	/^type Greeter struct{}$/;"	t
Greeter	example/grpc/etcd/etcd-server/main.go	/^type Greeter struct {$/;"	t
Greeter	example/monitor/main.go	/^type Greeter struct{}$/;"	t
GreeterClient	pkg/util/xtest/proto/testproto/hello.pb.go	/^type GreeterClient interface {$/;"	t
GreeterMock	pkg/server/xecho/handler_test.go	/^type GreeterMock struct{}$/;"	t
GreeterServer	pkg/util/xtest/proto/testproto/hello.pb.go	/^type GreeterServer interface {$/;"	t
Greeter_StreamHelloClient	pkg/util/xtest/proto/testproto/hello.pb.go	/^type Greeter_StreamHelloClient interface {$/;"	t
Greeter_StreamHelloServer	pkg/util/xtest/proto/testproto/hello.pb.go	/^type Greeter_StreamHelloServer interface {$/;"	t
HDel	pkg/client/redis/redis_cmds.go	/^func (r *Redis) HDel(key string, field ...string) bool {$/;"	f
HGet	pkg/client/redis/redis_cmds.go	/^func (r *Redis) HGet(key string, fields string) (string, error) {$/;"	f
HGetAll	pkg/client/redis/redis_cmds.go	/^func (r *Redis) HGetAll(key string) map[string]string {$/;"	f
HIncrBy	pkg/client/redis/redis_cmds.go	/^func (r *Redis) HIncrBy(key string, field string, incr int) int64 {$/;"	f
HIncrByWithErr	pkg/client/redis/redis_cmds.go	/^func (r *Redis) HIncrByWithErr(key string, field string, incr int) (int64, error) {$/;"	f
HKeys	pkg/client/redis/redis_cmds.go	/^func (r *Redis) HKeys(key string) []string {$/;"	f
HLen	pkg/client/redis/redis_cmds.go	/^func (r *Redis) HLen(key string) int64 {$/;"	f
HMGet	pkg/client/redis/redis_cmds.go	/^func (r *Redis) HMGet(key string, fileds []string) []string {$/;"	f
HMGetMap	pkg/client/redis/redis_cmds.go	/^func (r *Redis) HMGetMap(key string, fields []string) map[string]string {$/;"	f
HMSet	pkg/client/redis/redis_cmds.go	/^func (r *Redis) HMSet(key string, hash map[string]interface{}, expire time.Duration) bool {$/;"	f
HSet	pkg/client/redis/redis_cmds.go	/^func (r *Redis) HSet(key string, field string, value interface{}) bool {$/;"	f
HTTPError	pkg/server/xecho/error.go	/^type HTTPError struct {$/;"	t
HTTPError	pkg/server/xgin/error.go	/^type HTTPError struct {$/;"	t
HandleFunc	pkg/governor/http.go	/^func HandleFunc(pattern string, handler http.HandlerFunc) {$/;"	f
HandleResolvedAddrs	pkg/client/grpc/balancer/base.go	/^func (b *baseBalancer) HandleResolvedAddrs(addrs []resolver.Address, err error) {$/;"	f
HandleSubConnStateChange	pkg/client/grpc/balancer/base.go	/^func (b *baseBalancer) HandleSubConnStateChange(sc balancer.SubConn, s connectivity.State) {$/;"	f
Handler	pkg/store/gorm/interceptor.go	/^type Handler func(*Scope)$/;"	t
Head	pkg/util/xstring/string.go	/^func (ss Strings) Head() string {$/;"	f
Head2	pkg/util/xstring/string.go	/^func (ss Strings) Head2() (h0, h1 string) {$/;"	f
Head3	pkg/util/xstring/string.go	/^func (ss Strings) Head3() (h0, h1, h2 string) {$/;"	f
Head4	pkg/util/xstring/string.go	/^func (ss Strings) Head4() (h0, h1, h2, h3 string) {$/;"	f
HeadT	pkg/util/xstring/string.go	/^func (ss Strings) HeadT() (string, Strings) {$/;"	f
HeaderAcceptEncoding	pkg/server/xecho/const.go	/^	HeaderAcceptEncoding = "Accept-Encoding"$/;"	c
HeaderAcceptEncoding	pkg/server/xgin/const.go	/^	HeaderAcceptEncoding = "Accept-Encoding"$/;"	c
HeaderContentType	pkg/server/xecho/const.go	/^	HeaderContentType = "Content-Type"$/;"	c
HeaderContentType	pkg/server/xgin/const.go	/^	HeaderContentType = "Content-Type"$/;"	c
HeaderExtractor	pkg/trace/const.go	/^func HeaderExtractor(hdr map[string][]string) opentracing.StartSpanOption {$/;"	f
HeaderHRPCErr	pkg/server/xecho/const.go	/^	HeaderHRPCErr = "HRPC-Errord"$/;"	c
HeaderHRPCErr	pkg/server/xgin/const.go	/^	HeaderHRPCErr = "HRPC-Errord"$/;"	c
HeaderInjector	pkg/trace/const.go	/^func HeaderInjector(ctx context.Context, hdr map[string][]string) context.Context {$/;"	f
Healthz	pkg/application/application_test.go	/^func (s *testServer) Healthz() bool {$/;"	f
Healthz	pkg/server/xecho/server.go	/^func (s *Server) Healthz() bool {$/;"	f
Healthz	pkg/server/xgin/server.go	/^func (s *Server) Healthz() bool {$/;"	f
Healthz	pkg/server/xgrpc/server.go	/^func (s *Server) Healthz() bool {$/;"	f
HelloReply	pkg/util/xtest/proto/testproto/hello.pb.go	/^type HelloReply struct {$/;"	t
HelloRequest	pkg/util/xtest/proto/testproto/hello.pb.go	/^type HelloRequest struct {$/;"	t
Hex	pkg/util/xrand/string.go	/^	Hex = Numeric + "abcdef"$/;"	c
Hex2Addr	pkg/util/xstring/string.go	/^func Hex2Addr(str string) (string, error) {$/;"	f
HistogramVecOpts	pkg/metric/histogram.go	/^type HistogramVecOpts struct {$/;"	t
HostName	pkg/pkg.go	/^func HostName() string {$/;"	f
Hostname	pkg/application/runtime.go	/^func Hostname() string {$/;"	f
IfPanic	pkg/util/xdebug/testing.go	/^func IfPanic(err error) {$/;"	f
Inc	pkg/metric/counter.go	/^func (counter *counterVec) Inc(labels ...string) {$/;"	f
Inc	pkg/metric/gauge.go	/^func (gv *gaugeVec) Inc(labels ...string) {$/;"	f
IncipientKeyValues	pkg/client/etcdv3/watch.go	/^func (w *Watch) IncipientKeyValues() []*mvccpb.KeyValue {$/;"	f
Incr	pkg/client/redis/redis_cmds.go	/^func (r *Redis) Incr(key string) bool {$/;"	f
IncrBy	pkg/client/redis/redis_cmds.go	/^func (r *Redis) IncrBy(key string, increment int64) (int64, error) {$/;"	f
IncrWithErr	pkg/client/redis/redis_cmds.go	/^func (r *Redis) IncrWithErr(key string) (int64, error) {$/;"	f
Info	pkg/application/application_test.go	/^func (s *testServer) Info() *server.ServiceInfo {$/;"	f
Info	pkg/governor/server.go	/^func (s *Server) Info() *server.ServiceInfo {$/;"	f
Info	pkg/server/xecho/server.go	/^func (s *Server) Info() *server.ServiceInfo {$/;"	f
Info	pkg/server/xgin/server.go	/^func (s *Server) Info() *server.ServiceInfo {$/;"	f
Info	pkg/server/xgoframe/server.go	/^func (s *Server) Info() *server.ServiceInfo {$/;"	f
Info	pkg/server/xgrpc/server.go	/^func (s *Server) Info() *server.ServiceInfo {$/;"	f
Info	pkg/worker/xcron/config.go	/^func (wl *wrappedLogger) Info(msg string, keysAndValues ...interface{}) {$/;"	f
Info	pkg/xgrpclog/logger.go	/^func (l *loggerWrapper) Info(args ...interface{}) {$/;"	f
Info	pkg/xlog/api.go	/^func Info(msg string, fields ...Field) {$/;"	f
Info	pkg/xlog/log.go	/^func (logger *Logger) Info(msg string, fields ...Field) {$/;"	f
Info	pkg/xlog/trace.go	/^func (t *Tracer) Info(fields ...Field) {$/;"	f
InfoLevel	pkg/xlog/log.go	/^	InfoLevel = zap.InfoLevel$/;"	c
Infof	pkg/conf/datasource/apollo/apollo.go	/^func (l *agolloLogger) Infof(format string, args ...interface{}) {$/;"	f
Infof	pkg/datasource/apollo/apollo.go	/^func (l *agolloLogger) Infof(format string, args ...interface{}) {$/;"	f
Infof	pkg/xgrpclog/logger.go	/^func (l *loggerWrapper) Infof(format string, args ...interface{}) {$/;"	f
Infof	pkg/xlog/api.go	/^func Infof(msg string, args ...interface{}) {$/;"	f
Infof	pkg/xlog/log.go	/^func (logger *Logger) Infof(template string, args ...interface{}) {$/;"	f
Infoln	pkg/xgrpclog/logger.go	/^func (l *loggerWrapper) Infoln(args ...interface{}) {$/;"	f
Infow	pkg/xlog/api.go	/^func Infow(msg string, keysAndValues ...interface{}) {$/;"	f
Infow	pkg/xlog/log.go	/^func (logger *Logger) Infow(msg string, keysAndValues ...interface{}) {$/;"	f
InitEnv	pkg/env.go	/^func InitEnv() {$/;"	f
InjectTraceMD	pkg/xlog/trace.go	/^func InjectTraceMD(ctx interface{ Set(string, interface{}) }, md *Tracer) {$/;"	f
InsensitiviseMap	pkg/util/xmap/util.go	/^func InsensitiviseMap(m map[string]interface{}) {$/;"	f
Int	pkg/flag/flag.go	/^func (fs *FlagSet) Int(name string) int64 {$/;"	f
Int	pkg/flag/flag.go	/^func Int(name string) int64 { return flagset.Int(name) }$/;"	f
Int	pkg/xlog/log.go	/^	Int = zap.Int$/;"	v
Int32	pkg/xlog/log.go	/^	Int32 = zap.Int32$/;"	v
Int63n	pkg/util/xrand/int.go	/^func Int63n(n int64) int64 {$/;"	f
Int64	pkg/xlog/log.go	/^	Int64 = zap.Int64$/;"	v
IntE	pkg/flag/flag.go	/^func (fs *FlagSet) IntE(name string) (int64, error) {$/;"	f
IntE	pkg/flag/flag.go	/^func IntE(name string) (int64, error) { return flagset.IntE(name) }$/;"	f
IntFlag	pkg/flag/flag.go	/^type IntFlag struct {$/;"	t
Interceptor	pkg/store/gorm/interceptor.go	/^type Interceptor func(*DSN, string, *Config) func(next Handler) Handler$/;"	t
Intn	pkg/util/xrand/int.go	/^func Intn(n int) int {$/;"	f
InvokerProducer	pkg/client/rocketmq/init.go	/^func InvokerProducer(name string) *Producer {$/;"	f
IsConfigChanged	pkg/conf/datasource/apollo/apollo.go	/^func (ap *apolloDataSource) IsConfigChanged() <-chan struct{} {$/;"	f
IsConfigChanged	pkg/conf/datasource/etcdv3/etcdv3.go	/^func (s *etcdv3DataSource) IsConfigChanged() <-chan struct{} {$/;"	f
IsConfigChanged	pkg/conf/datasource/file/file.go	/^func (fp *fileDataSource) IsConfigChanged() <-chan struct{} {$/;"	f
IsConfigChanged	pkg/conf/datasource/http/yasee.go	/^func (y *yaseeDataSource) IsConfigChanged() <-chan struct{} {$/;"	f
IsConfigChanged	pkg/datasource/apollo/apollo.go	/^func (ap *apolloDataSource) IsConfigChanged() <-chan struct{} {$/;"	f
IsConfigChanged	pkg/datasource/etcdv3/etcdv3.go	/^func (s *etcdv3DataSource) IsConfigChanged() <-chan struct{} {$/;"	f
IsConfigChanged	pkg/datasource/file/file.go	/^func (fp *fileDataSource) IsConfigChanged() <-chan struct{} {$/;"	f
IsConfigChanged	pkg/datasource/http/yasee.go	/^func (y *yaseeDataSource) IsConfigChanged() <-chan struct{} {$/;"	f
IsDebugMode	pkg/xlog/log.go	/^func (logger *Logger) IsDebugMode() bool {$/;"	f
IsDevelopmentMode	pkg/util/xdebug/testing.go	/^func IsDevelopmentMode() bool {$/;"	f
IsDirectory	pkg/util/xfile/file.go	/^func IsDirectory(path string) (bool, error) {$/;"	f
IsFileChanged	pkg/util/xfile/file.go	/^func IsFileChanged(src, dest string) (bool, error) {$/;"	f
IsLeapYear	pkg/util/xtime/api.go	/^func IsLeapYear(year int) bool {$/;"	f
IsRecordNotFoundError	pkg/store/gorm/orm.go	/^	IsRecordNotFoundError = gorm.IsRecordNotFoundError$/;"	v
IsShadow	pkg/imeta/md.go	/^func (md MD) IsShadow() bool {$/;"	f
IsTestingMode	pkg/util/xdebug/testing.go	/^func IsTestingMode() bool {$/;"	f
JUPITER	cmd/jupiter/new/templates/Makefile	/^JUPITER:=github.com\/douyu\/jupiter$/;"	m
JUPITER	tools/build/Makefile	/^JUPITER:=github.com\/douyu\/jupiter$/;"	m
Job	pkg/application/application.go	/^func (app *Application) Job(runner job.Runner) error {$/;"	f
Job	pkg/worker/xcron/cron.go	/^	Job = cron.Job$/;"	t
JobHandleCounter	pkg/metric/metric.go	/^	JobHandleCounter = CounterVecOpts{$/;"	v
JobHandleHistogram	pkg/metric/metric.go	/^	JobHandleHistogram = HistogramVecOpts{$/;"	v
JobRunner	example/job/main.go	/^type JobRunner struct {$/;"	t
JobWrapper	pkg/worker/xcron/cron.go	/^	JobWrapper = cron.JobWrapper$/;"	t
Join	pkg/imeta/md.go	/^func Join(mds ...MD) MD {$/;"	f
Json	pkg/util/xstring/json.go	/^func Json(obj interface{}) string {$/;"	f
JsonBytes	pkg/util/xstring/json.go	/^func JsonBytes(obj interface{}) []byte {$/;"	f
JupiterLogger	pkg/xlog/api.go	/^var JupiterLogger = Config{$/;"	v
JupiterVersion	pkg/pkg.go	/^func JupiterVersion() string {$/;"	f
KeyBalanceGroup	pkg/constant/env.go	/^	KeyBalanceGroup = "__group"$/;"	c
KeyConsumerConfig	pkg/constant/key.go	/^	KeyConsumerConfig = "__consumer_config_"$/;"	c
KeyProviderConfig	pkg/constant/key.go	/^	KeyProviderConfig = "__provider_config_"$/;"	c
KeyRouteConfig	pkg/constant/key.go	/^	KeyRouteConfig = "__route_config_"$/;"	c
KeyRouteGroup	pkg/constant/key.go	/^	KeyRouteGroup = "__route_group_"$/;"	c
KeyServiceInfo	pkg/constant/key.go	/^	KeyServiceInfo = "__service_info_"$/;"	c
KeySpliter	pkg/util/xmap/map.go	/^var KeySpliter = "."$/;"	v
KickEmpty	pkg/util/xstring/string.go	/^func KickEmpty(ss []string) Strings {$/;"	f
Kind	pkg/registry/etcdv3/registry.go	/^func (reg *etcdv3Registry) Kind() string { return "etcdv3" }$/;"	f
Kind	pkg/registry/nop.go	/^func (n Local) Kind() string { return "local" }$/;"	f
Kind	pkg/registry/registry.go	/^type Kind uint8$/;"	t
KindConfigurator	pkg/registry/registry.go	/^	KindConfigurator$/;"	c
KindConsumer	pkg/registry/registry.go	/^	KindConsumer$/;"	c
KindProvider	pkg/registry/registry.go	/^	KindProvider$/;"	c
KindUnknown	pkg/registry/registry.go	/^	KindUnknown Kind = iota$/;"	c
LIndex	pkg/client/redis/redis_cmds.go	/^func (r *Redis) LIndex(key string, idx int64) (string, error) {$/;"	f
LLen	pkg/client/redis/redis_cmds.go	/^func (r *Redis) LLen(key string) int64 {$/;"	f
LLenWithErr	pkg/client/redis/redis_cmds.go	/^func (r *Redis) LLenWithErr(key string) (int64, error) {$/;"	f
LPush	pkg/client/redis/redis_cmds.go	/^func (r *Redis) LPush(key string, values ...interface{}) (int64, error) {$/;"	f
LRange	pkg/client/redis/redis_cmds.go	/^func (r *Redis) LRange(key string, start, stop int64) ([]string, error) {$/;"	f
LRem	pkg/client/redis/redis_cmds.go	/^func (r *Redis) LRem(key string, count int64, value interface{}) int64 {$/;"	f
LTrim	pkg/client/redis/redis_cmds.go	/^func (r *Redis) LTrim(key string, start, stop int64) (string, error) {$/;"	f
Label	pkg/server/server.go	/^func (si ServiceInfo) Label() string {$/;"	f
LastErrorWhenError	pkg/util/xgo/serial.go	/^	LastErrorWhenError WhenError = 4$/;"	v
Lcfirst	cmd/jupiter/protoc/util.go	/^func Lcfirst(str string) string {$/;"	f
Len	pkg/imeta/md.go	/^func (md MD) Len() int {$/;"	f
Len	pkg/xlog/rotate/lumberjack_darwin.go	/^func (b byFormatTime) Len() int {$/;"	f
Len	pkg/xlog/rotate/lumberjack_linux.go	/^func (b byFormatTime) Len() int {$/;"	f
Len	pkg/xlog/rotate/lumberjack_windows.go	/^func (b byFormatTime) Len() int {$/;"	f
Less	pkg/xlog/rotate/lumberjack_darwin.go	/^func (b byFormatTime) Less(i, j int) bool {$/;"	f
Less	pkg/xlog/rotate/lumberjack_linux.go	/^func (b byFormatTime) Less(i, j int) bool {$/;"	f
Less	pkg/xlog/rotate/lumberjack_windows.go	/^func (b byFormatTime) Less(i, j int) bool {$/;"	f
Level	pkg/xlog/log.go	/^	Level  = zapcore.Level$/;"	t
LibHandleCounter	pkg/metric/metric.go	/^	LibHandleCounter = CounterVecOpts{$/;"	v
LibHandleHistogram	pkg/metric/metric.go	/^	LibHandleHistogram = HistogramVecOpts{$/;"	v
LibHandleSummary	pkg/metric/metric.go	/^	LibHandleSummary = SummaryVecOpts{$/;"	v
ListFiles	pkg/util/xfile/file.go	/^func ListFiles(dir string, ext string) []string {$/;"	f
ListServices	pkg/registry/etcdv3/registry.go	/^func (reg *etcdv3Registry) ListServices(ctx context.Context, name string, scheme string) (services []*server.ServiceInfo, err error) {$/;"	f
ListServices	pkg/registry/nop.go	/^func (n Local) ListServices(ctx context.Context, s string, s2 string) ([]*server.ServiceInfo, error) {$/;"	f
Load	pkg/conf/conf.go	/^func (c *Configuration) Load(content []byte, unmarshal Unmarshaller) error {$/;"	f
Load	pkg/util/xbuffer/unbounded.go	/^func (b *Unbounded) Load() {$/;"	f
Load	pkg/util/xmap/map.go	/^func (flat *FlatMap) Load(content []byte, unmarshal Unmarshaller) error {$/;"	f
LoadFromDataSource	pkg/conf/api.go	/^func LoadFromDataSource(ds DataSource, unmarshaller Unmarshaller) error {$/;"	f
LoadFromDataSource	pkg/conf/conf.go	/^func (c *Configuration) LoadFromDataSource(ds DataSource, unmarshaller Unmarshaller) error {$/;"	f
LoadFromReader	pkg/conf/api.go	/^func LoadFromReader(r io.Reader, unmarshaller Unmarshaller) error {$/;"	f
LoadFromReader	pkg/conf/conf.go	/^func (c *Configuration) LoadFromReader(reader io.Reader, unmarshaller Unmarshaller) error {$/;"	f
Local	pkg/registry/nop.go	/^type Local struct{}$/;"	t
LocalListener	pkg/util/xnet/listener.go	/^func LocalListener() net.Listener {$/;"	f
Lock	pkg/client/etcdv3/lock.go	/^func (mutex *Mutex) Lock(timeout time.Duration) (err error) {$/;"	f
Lock	pkg/util/xfile/lock.go	/^func Lock(name string) (io.Closer, error) {$/;"	f
Lock	pkg/util/xfile/lock_unix.go	/^func Lock(name string) (io.Closer, error) {$/;"	f
Lock	pkg/util/xfile/lock_windows.go	/^func Lock(name string) (io.Closer, error) {$/;"	f
Log	pkg/xlog/api.go	/^func (fn Func) Log(msg string, fields ...Field) {$/;"	f
Logger	pkg/store/gorm/orm.go	/^	Logger = gorm.Logger$/;"	t
Logger	pkg/xlog/log.go	/^	Logger struct {$/;"	t
Logger	pkg/xlog/rotate/lumberjack_darwin.go	/^type Logger struct {$/;"	t
Logger	pkg/xlog/rotate/lumberjack_linux.go	/^type Logger struct {$/;"	t
Logger	pkg/xlog/rotate/lumberjack_windows.go	/^type Logger struct {$/;"	t
Lookup	pkg/flag/flag.go	/^func (fs *FlagSet) Lookup(name string) *flag.Flag {$/;"	f
Lowercase	pkg/util/xrand/string.go	/^	Lowercase = "abcdefghipqrstuvwxyz"$/;"	c
MD	pkg/imeta/md.go	/^type MD map[string][]string$/;"	t
MDConfig	tools/ast_codes/main.go	/^type MDConfig struct {$/;"	t
MGet	pkg/client/redis/redis_cmds.go	/^func (r *Redis) MGet(keys ...string) ([]string, error) {$/;"	f
MGets	pkg/client/redis/redis_cmds.go	/^func (r *Redis) MGets(keys []string) ([]interface{}, error) {$/;"	f
MIMEApplicationJSON	pkg/server/xecho/const.go	/^	MIMEApplicationJSON = "application\/json"$/;"	c
MIMEApplicationJSON	pkg/server/xgin/const.go	/^	MIMEApplicationJSON = "application\/json"$/;"	c
MIMEApplicationJSONCharsetUTF8	pkg/server/xecho/const.go	/^	MIMEApplicationJSONCharsetUTF8 = MIMEApplicationJSON + "; " + charsetUTF8$/;"	c
MIMEApplicationJSONCharsetUTF8	pkg/server/xgin/const.go	/^	MIMEApplicationJSONCharsetUTF8 = MIMEApplicationJSON + "; " + charsetUTF8$/;"	c
MIMEApplicationProtobuf	pkg/server/xecho/const.go	/^	MIMEApplicationProtobuf = "application\/protobuf"$/;"	c
MIMEApplicationProtobuf	pkg/server/xgin/const.go	/^	MIMEApplicationProtobuf = "application\/protobuf"$/;"	c
MakeDirectory	pkg/util/xfile/dir.go	/^func MakeDirectory(dirs ...string) error {$/;"	f
MarshalJSONPB	pkg/server/xecho/status.go	/^func (m *GRPCProxyMessage) MarshalJSONPB(jsb *jsonpb.Marshaler) ([]byte, error) {$/;"	f
MarshalJSONPB	pkg/server/xgin/status.go	/^func (m *GRPCProxyMessage) MarshalJSONPB(jsb *jsonpb.Marshaler) ([]byte, error) {$/;"	f
MarshalJSONPB	pkg/server/xgoframe/status.go	/^func (m *GRPCProxyMessage) MarshalJSONPB(jsb *jsonpb.Marshaler) ([]byte, error) {$/;"	f
MergeStringMap	pkg/util/xmap/util.go	/^func MergeStringMap(dest, src map[string]interface{}) {$/;"	f
MetadataExtractor	pkg/trace/const.go	/^func MetadataExtractor(md map[string][]string) opentracing.StartSpanOption {$/;"	f
MetadataInjector	pkg/trace/const.go	/^func MetadataInjector(ctx context.Context, md metadata.MD) context.Context {$/;"	f
MetadataReaderWriter	pkg/trace/carrier.go	/^type MetadataReaderWriter struct {$/;"	t
MkdirIfNecessary	pkg/util/xfile/file.go	/^func MkdirIfNecessary(createDir string) error {$/;"	f
ModApp	pkg/ecode/unified.go	/^	ModApp = "app"$/;"	c
ModClientETCD	pkg/ecode/unified.go	/^	ModClientETCD = "client.etcd"$/;"	c
ModClientGrpc	pkg/ecode/unified.go	/^	ModClientGrpc = "client.grpc"$/;"	c
ModClientMySQL	pkg/ecode/unified.go	/^	ModClientMySQL = "client.mysql"$/;"	c
ModConfig	pkg/ecode/unified.go	/^	ModConfig = "config"$/;"	c
ModGrpcServer	pkg/ecode/unified.go	/^	ModGrpcServer = "server.grpc"$/;"	c
ModName	pkg/governor/config.go	/^const ModName = "govern"$/;"	c
ModName	pkg/server/xecho/config.go	/^const ModName = "server.echo"$/;"	c
ModName	pkg/server/xgin/config.go	/^const ModName = "server.gin"$/;"	c
ModName	pkg/server/xgoframe/config.go	/^const ModName = "server.goframe"$/;"	c
ModProc	pkg/ecode/unified.go	/^	ModProc = "proc"$/;"	c
ModRegistryETCD	pkg/ecode/unified.go	/^	ModRegistryETCD = "registry.etcd"$/;"	c
ModXcronETCD	pkg/ecode/unified.go	/^	ModXcronETCD = "xcron.etcd"$/;"	c
Model	pkg/store/gorm/orm.go	/^	Model = gorm.Model$/;"	t
ModelStruct	pkg/store/gorm/orm.go	/^	ModelStruct = gorm.ModelStruct$/;"	t
Module	pkg/conf/option.go	/^func Module(module string) GetOption {$/;"	f
ModuleName	pkg/sentinel/config.go	/^const ModuleName = "sentinel"$/;"	c
MsgAppStartGovernorOk	pkg/ecode/unified.go	/^	MsgAppStartGovernorOk = "governor start"$/;"	c
MsgAppStartServerOk	pkg/ecode/unified.go	/^	MsgAppStartServerOk = "server start"$/;"	c
MsgClientMysqlOpenPanic	pkg/ecode/unified.go	/^	MsgClientMysqlOpenPanic = "mysql open panic"$/;"	c
MsgClientMysqlOpenStart	pkg/ecode/unified.go	/^	MsgClientMysqlOpenStart = "client mysql start"$/;"	c
MsgClientMysqlPingPanic	pkg/ecode/unified.go	/^	MsgClientMysqlPingPanic = "mysql ping panic"$/;"	c
MsgConfigLoadFromFileOK	pkg/ecode/unified.go	/^	MsgConfigLoadFromFileOK = "load from file ok"$/;"	c
MsgConfigLoadFromFilePanic	pkg/ecode/unified.go	/^	MsgConfigLoadFromFilePanic = "load from file panic"$/;"	c
MsgConfigLoadFromRemoteDataSourceOK	pkg/ecode/unified.go	/^	MsgConfigLoadFromRemoteDataSourceOK = "load from remote datasource ok"$/;"	c
MsgConfigLoadFromRemoteDataSourcePanic	pkg/ecode/unified.go	/^	MsgConfigLoadFromRemoteDataSourcePanic = "load from remote datasource panic"$/;"	c
MsgConfigParseFlagPanic	pkg/ecode/unified.go	/^	MsgConfigParseFlagPanic = "parse flag panic"$/;"	c
MsgDeleteParseConfiguratorsUriErr	pkg/ecode/unified.go	/^	MsgDeleteParseConfiguratorsUriErr = "delete parse configurators uri err"$/;"	c
MsgDeleteParseProviderUriErr	pkg/ecode/unified.go	/^	MsgDeleteParseProviderUriErr = "delete parse provider uri err"$/;"	c
MsgDeregisterETCDErr	pkg/ecode/unified.go	/^	MsgDeregisterETCDErr = "deregister etcd service err"$/;"	c
MsgDeregisterETCDOk	pkg/ecode/unified.go	/^	MsgDeregisterETCDOk = "deregister etcd service ok"$/;"	c
MsgGrpcServerNewErr	pkg/ecode/unified.go	/^	MsgGrpcServerNewErr = "new grpc server err"$/;"	c
MsgGrpcServerRecover	pkg/ecode/unified.go	/^	MsgGrpcServerRecover = "grpc server recover"$/;"	c
MsgInfoVistor	tools/ast_codes/main.go	/^type MsgInfoVistor struct {$/;"	t
MsgProcSetOk	pkg/ecode/unified.go	/^	MsgProcSetOk = "set max procs ok"$/;"	c
MsgProcSetPanic	pkg/ecode/unified.go	/^	MsgProcSetPanic = "set max procs panic"$/;"	c
MsgRegisterETCDErr	pkg/ecode/unified.go	/^	MsgRegisterETCDErr = "register service err"$/;"	c
MsgRegisterETCDOk	pkg/ecode/unified.go	/^	MsgRegisterETCDOk = "register service ok"$/;"	c
MsgRegisterParseConfigErr1	pkg/ecode/unified.go	/^	MsgRegisterParseConfigErr1 = "register parse config err1"$/;"	c
MsgRegisterParseConfigErr2	pkg/ecode/unified.go	/^	MsgRegisterParseConfigErr2 = "register parse config err2"$/;"	c
MsgRegistryResolverClose	pkg/ecode/unified.go	/^	MsgRegistryResolverClose = "resolver close"$/;"	c
MsgRegistryResolverNow	pkg/ecode/unified.go	/^	MsgRegistryResolverNow = "resolver now"$/;"	c
MsgRegistryResolverOk	pkg/ecode/unified.go	/^	MsgRegistryResolverOk = "resolver build ok"$/;"	c
MsgUpdateParseConfigErr	pkg/ecode/unified.go	/^	MsgUpdateParseConfigErr = "update parse config err"$/;"	c
MsgUpdateParseConfiguratorsUriErr	pkg/ecode/unified.go	/^	MsgUpdateParseConfiguratorsUriErr = "update parse configurators uri err"$/;"	c
MsgUpdateParseProviderUriErr	pkg/ecode/unified.go	/^	MsgUpdateParseProviderUriErr = "update parse provider uri err"$/;"	c
MsgUpdateResolverOk	pkg/ecode/unified.go	/^	MsgUpdateResolverOk = "update resolver ok"$/;"	c
MsgWatchRequestErr	pkg/ecode/unified.go	/^	MsgWatchRequestErr = "watch request err"$/;"	c
MustBuild	pkg/client/etcdv3/config.go	/^func (config *Config) MustBuild() *Client {$/;"	f
MustBuild	pkg/registry/etcdv3/config.go	/^func (config Config) MustBuild() registry.Registry {$/;"	f
MustBuild	pkg/server/xecho/config.go	/^func (config *Config) MustBuild() *Server {$/;"	f
MustBuild	pkg/server/xgrpc/config.go	/^func (config *Config) MustBuild() *Server {$/;"	f
MustWithDetails	pkg/ecode/status.go	/^func (s *spbStatus) MustWithDetails(details ...interface{}) *spbStatus {$/;"	f
Mutex	pkg/client/etcdv3/lock.go	/^type Mutex struct {$/;"	t
Name	pkg/client/grpc/balancer/base.go	/^func (bb *baseBuilder) Name() string {$/;"	f
Name	pkg/client/grpc/balancer/p2c/least_loaded.go	/^	Name = "p2c_least_loaded"$/;"	c
Name	pkg/pkg.go	/^func Name() string {$/;"	f
Name	pkg/worker/xcron/cron.go	/^func (f FuncJob) Name() string { return xstring.FunctionName(f) }$/;"	f
NameSmoothWeightRoundRobin	pkg/client/grpc/balancer/swr.go	/^	NameSmoothWeightRoundRobin = "swr"$/;"	c
NamedJob	pkg/worker/xcron/cron.go	/^	NamedJob interface {$/;"	t
Namespace	pkg/conf/option.go	/^func Namespace(namespace string) GetOption {$/;"	f
Namespace	pkg/xlog/log.go	/^	Namespace = zap.Namespace$/;"	v
New	jupiter.go	/^var New = application.New$/;"	v
New	pkg/application/application.go	/^func New(fns ...func() error) (*Application, error) {$/;"	f
New	pkg/conf/conf.go	/^func New() *Configuration {$/;"	f
New	pkg/imeta/md.go	/^func New(m map[string]string) MD {$/;"	f
New	pkg/util/xattr/attr.go	/^func New(kvs ...interface{}) *Attributes {$/;"	f
New	pkg/util/xp2c/leastloaded/least_loaded.go	/^func New() xp2c.P2c {$/;"	f
NewBalancerBuilderV2	pkg/client/grpc/balancer/base.go	/^func NewBalancerBuilderV2(name string, pb PickerBuilder, config base.Config) balancer.Builder {$/;"	f
NewChain	pkg/worker/xcron/cron.go	/^	NewChain = cron.NewChain$/;"	v
NewContext	pkg/xlog/trace.go	/^func NewContext(ctx context.Context, tracer Tracer) context.Context {$/;"	f
NewCounterVec	pkg/metric/counter.go	/^func NewCounterVec(name string, labels []string) *counterVec {$/;"	f
NewCycle	pkg/util/xcycle/lifecycle.go	/^func NewCycle() *Cycle {$/;"	f
NewDataSource	pkg/conf/datasource.go	/^func NewDataSource(configAddr string) (DataSource, error) {$/;"	f
NewDataSource	pkg/conf/datasource/apollo/apollo.go	/^func NewDataSource(conf *agollo.Conf, namespace string, key string) conf.DataSource {$/;"	f
NewDataSource	pkg/conf/datasource/etcdv3/etcdv3.go	/^func NewDataSource(client *etcdv3.Client, key string) conf.DataSource {$/;"	f
NewDataSource	pkg/conf/datasource/file/file.go	/^func NewDataSource(path string, watch bool) *fileDataSource {$/;"	f
NewDataSource	pkg/conf/datasource/http/yasee.go	/^func NewDataSource(addr string, enableWatch bool) *yaseeDataSource {$/;"	f
NewDataSource	pkg/datasource/apollo/apollo.go	/^func NewDataSource(conf *agollo.Conf, namespace string, key string) conf.DataSource {$/;"	f
NewDataSource	pkg/datasource/etcdv3/etcdv3.go	/^func NewDataSource(client *etcdv3.Client, key string) conf.DataSource {$/;"	f
NewDataSource	pkg/datasource/file/file.go	/^func NewDataSource(path string, watch bool) *fileDataSource {$/;"	f
NewDataSource	pkg/datasource/http/yasee.go	/^func NewDataSource(addr string, enableWatch bool) *yaseeDataSource {$/;"	f
NewDataSource	pkg/datasource/manager/manager.go	/^func NewDataSource(configAddr string) (conf.DataSource, error) {$/;"	f
NewEngine	example/all/internal/app/demo/engine.go	/^func NewEngine() *Engine {$/;"	f
NewEngine	example/build/main.go	/^func NewEngine() *Engine {$/;"	f
NewEngine	example/client/redis/main.go	/^func NewEngine() *Engine {$/;"	f
NewEngine	example/client/rocketmq/main.go	/^func NewEngine() *Engine {$/;"	f
NewEngine	example/config/onelineByEtcdv3/main.go	/^func NewEngine() *Engine {$/;"	f
NewEngine	example/config/onelineByFile/main.go	/^func NewEngine() *Engine {$/;"	f
NewEngine	example/config/onelineByFileWatch/main.go	/^func NewEngine() *Engine {$/;"	f
NewEngine	example/config/onelineByRemoteConfig/main.go	/^func NewEngine() *Engine {$/;"	f
NewEngine	example/config/onelineByRemoteConfigWatch/main.go	/^func NewEngine() *Engine {$/;"	f
NewEngine	example/config/onelinebyApollo/main.go	/^func NewEngine() *Engine {$/;"	f
NewEngine	example/config/structByFile/main.go	/^func NewEngine() *Engine {$/;"	f
NewEngine	example/config/structByFileWatch/main.go	/^func NewEngine() *Engine {$/;"	f
NewEngine	example/config/structByRemoteConfigWatch/main.go	/^func NewEngine() *Engine {$/;"	f
NewEngine	example/config/structByremoteConfig/main.go	/^func NewEngine() *Engine {$/;"	f
NewEngine	example/grpc/direct/direct-client/main.go	/^func NewEngine() *Engine {$/;"	f
NewEngine	example/grpc/direct/direct-server/main.go	/^func NewEngine() *Engine {$/;"	f
NewEngine	example/grpc/etcd/etcd-client/main.go	/^func NewEngine() *Engine {$/;"	f
NewEngine	example/grpc/etcd/etcd-server/main.go	/^func NewEngine() *Engine {$/;"	f
NewEngine	example/helloworld/main.go	/^func NewEngine() *Engine {$/;"	f
NewEngine	example/http/all/main.go	/^func NewEngine() *Engine {$/;"	f
NewEngine	example/http/gin-swagger/main.go	/^func NewEngine() *Engine {$/;"	f
NewEngine	example/http/gin/main.go	/^func NewEngine() *Engine {$/;"	f
NewEngine	example/http/gin_ws_cors/main.go	/^func NewEngine() *Engine {$/;"	f
NewEngine	example/http/gofame/main.go	/^func NewEngine() *Engine {$/;"	f
NewEngine	example/http/register/main.go	/^func NewEngine() *Engine {$/;"	f
NewEngine	example/http/simple/main.go	/^func NewEngine() *Engine {$/;"	f
NewEngine	example/job/main.go	/^func NewEngine() *Engine {$/;"	f
NewEngine	example/logger/command/main.go	/^func NewEngine() *Engine {$/;"	f
NewEngine	example/logger/file/main.go	/^func NewEngine() *Engine {$/;"	f
NewEngine	example/logger/fileByWatch/main.go	/^func NewEngine() *Engine {$/;"	f
NewEngine	example/monitor/main.go	/^func NewEngine() *Engine {$/;"	f
NewEngine	example/remoteconfig/main.go	/^func NewEngine() *Engine {$/;"	f
NewEngine	example/sentinel/main.go	/^func NewEngine() *Engine {$/;"	f
NewEngine	example/store/mongo/main.go	/^func NewEngine() *Engine {$/;"	f
NewEngine	example/trace/main.go	/^func NewEngine() *Engine {$/;"	f
NewEngine	example/worker/cron/main.go	/^func NewEngine() *Engine {$/;"	f
NewErrPickerV2	pkg/client/grpc/balancer/base.go	/^func NewErrPickerV2(err error) balancer.V2Picker {$/;"	f
NewFlatMap	pkg/util/xmap/map.go	/^func NewFlatMap() *FlatMap {$/;"	f
NewFlowInfoBase	pkg/istats/flow_info.go	/^func NewFlowInfoBase(shadowSwitch string) FlowInfoBase {$/;"	f
NewGRPCServerGen	cmd/jupiter/protoc/server.go	/^func NewGRPCServerGen() *GRPCServerGen {$/;"	f
NewGaugeVec	pkg/metric/gauge.go	/^func NewGaugeVec(name string, labels []string) *gaugeVec {$/;"	f
NewGreeterClient	pkg/util/xtest/proto/testproto/hello.pb.go	/^func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {$/;"	f
NewHTTPError	pkg/server/xecho/error.go	/^func NewHTTPError(code int, msg ...string) *HTTPError {$/;"	f
NewHTTPError	pkg/server/xgin/error.go	/^func NewHTTPError(code int, msg ...string) *HTTPError {$/;"	f
NewJobRunner	example/job/main.go	/^func NewJobRunner() *JobRunner {$/;"	f
NewLogger	pkg/xlog/rotate/lumberjack_darwin.go	/^func NewLogger() *Logger {$/;"	f
NewLogger	pkg/xlog/rotate/lumberjack_linux.go	/^func NewLogger() *Logger {$/;"	f
NewLogger	pkg/xlog/rotate/lumberjack_windows.go	/^func NewLogger() *Logger {$/;"	f
NewMutex	pkg/client/etcdv3/lock.go	/^func (client *Client) NewMutex(key string, opts ...concurrency.SessionOption) (mutex *Mutex, err error) {$/;"	f
NewParser	pkg/worker/xcron/cron.go	/^	NewParser = cron.NewParser$/;"	v
NewProjectHelpTemplate	cmd/jupiter/new/usage.go	/^const NewProjectHelpTemplate = `$/;"	c
NewRashTimer	pkg/util/xtime/rash_timer.go	/^func NewRashTimer(tick time.Duration) *rashTimer {$/;"	f
NewRuntimeStats	pkg/application/runtime.go	/^func NewRuntimeStats() RuntimeStats {$/;"	f
NewStack	pkg/util/xdefer/stack.go	/^func NewStack() *DeferStack {$/;"	f
NewTicker	pkg/util/xtime/rash_timer.go	/^func (w *rashTimer) NewTicker(d time.Duration) *Ticker {$/;"	f
NewTicker	pkg/util/xtime/rash_timer.go	/^func NewTicker(d time.Duration) *Ticker {$/;"	f
NewTimer	pkg/util/xtime/rash_timer.go	/^func (w *rashTimer) NewTimer(d time.Duration) *Timer {$/;"	f
NewTimer	pkg/util/xtime/rash_timer.go	/^func NewTimer(d time.Duration) *Timer {$/;"	f
NewTracer	pkg/xlog/trace.go	/^func NewTracer() *Tracer {$/;"	f
NewUnbounded	pkg/util/xbuffer/unbounded.go	/^func NewUnbounded() *Unbounded {$/;"	f
Next	pkg/util/xp2c/leastloaded/least_loaded.go	/^func (p *leastLoaded) Next() (interface{}, func(balancer.DoneInfo)) {$/;"	f
Next	pkg/worker/xcron/cron.go	/^func (is *immediatelyScheduler) Next(curr time.Time) (next time.Time) {$/;"	f
Node	tools/ast_codes/main.go	/^type Node struct {$/;"	t
NotificationHandler	pkg/conf/datasource/apollo/mockserver/mockserver.go	/^func (s *mockServer) NotificationHandler(rw http.ResponseWriter, req *http.Request) {$/;"	f
NotificationHandler	pkg/datasource/apollo/mockserver/mockserver.go	/^func (s *mockServer) NotificationHandler(rw http.ResponseWriter, req *http.Request) {$/;"	f
Now	pkg/util/xtime/time.go	/^func Now() *Time {$/;"	f
NullStartSpanOption	pkg/trace/const.go	/^type NullStartSpanOption struct{}$/;"	t
Numeric	pkg/util/xrand/string.go	/^	Numeric = "0123456789"$/;"	c
OK	pkg/ecode/code.go	/^	OK = add(int(codes.OK), "OK")$/;"	v
Object	pkg/xlog/log.go	/^	Object = zap.Object$/;"	v
ObjectName	pkg/util/xstring/function.go	/^func ObjectName(i interface{}) string {$/;"	f
Observe	pkg/metric/histogram.go	/^func (histogram *histogramVec) Observe(v float64, labels ...string) {$/;"	f
Observe	pkg/metric/summary.go	/^func (summary *summaryVec) Observe(v float64, labels ...string) {$/;"	f
OmitDefaultAPI	pkg/util/xstring/json.go	/^var OmitDefaultAPI = jsoniter.Config{$/;"	v
OnChange	pkg/conf/api.go	/^func OnChange(fn func(*Configuration)) {$/;"	f
OnChange	pkg/conf/conf.go	/^func (c *Configuration) OnChange(fn func(*Configuration)) {$/;"	f
OnLoaded	pkg/conf/api.go	/^func OnLoaded(fn func(*Configuration)) {$/;"	f
OnLoaded	pkg/conf/conf.go	/^func (c *Configuration) OnLoaded(fn func(*Configuration)) {$/;"	f
Open	pkg/store/gorm/orm.go	/^func Open(dialect string, options *Config) (*DB, error) {$/;"	f
Option	cmd/jupiter/protoc/option.go	/^type Option struct {$/;"	t
Option	jupiter_option.go	/^type Option = application.Option$/;"	t
Option	pkg/application/option.go	/^type Option func(a *Application)$/;"	t
Option	pkg/server/server.go	/^type Option func(c *ServiceInfo)$/;"	t
Option	pkg/worker/xcron/cron.go	/^	Option = cron.Option$/;"	t
P2c	pkg/util/xp2c/p2c.go	/^type P2c interface {$/;"	t
PKG	Makefile	/^PKG := "github.com\/douyu\/jupiter"$/;"	m
PKG_LIST	Makefile	/^PKG_LIST := $(shell go list ${PKG}\/... | grep \/pkg\/)$/;"	m
PROJECT_NAME	Makefile	/^PROJECT_NAME := "jupiter"$/;"	m
Pairs	pkg/imeta/md.go	/^func Pairs(kv ...string) MD {$/;"	f
Panic	pkg/xlog/api.go	/^func Panic(msg string, fields ...Field) {$/;"	f
Panic	pkg/xlog/log.go	/^func (logger *Logger) Panic(msg string, fields ...Field) {$/;"	f
PanicLevel	pkg/xlog/log.go	/^	PanicLevel = zap.PanicLevel$/;"	c
PanicTrace	pkg/util/xdebug/debug.go	/^func PanicTrace(kb int) []byte {$/;"	f
PanicWhenError	pkg/util/xgo/serial.go	/^	PanicWhenError WhenError = 3$/;"	v
Panicf	pkg/xlog/api.go	/^func Panicf(msg string, args ...interface{}) {$/;"	f
Panicf	pkg/xlog/log.go	/^func (logger *Logger) Panicf(template string, args ...interface{}) {$/;"	f
Panicw	pkg/xlog/api.go	/^func Panicw(msg string, keysAndValues ...interface{}) {$/;"	f
Panicw	pkg/xlog/log.go	/^func (logger *Logger) Panicw(msg string, keysAndValues ...interface{}) {$/;"	f
Parallel	pkg/util/xgo/goroutine.go	/^func Parallel(fns ...func()) func() {$/;"	f
ParallelWithError	pkg/util/xgo/parallel.go	/^func ParallelWithError(fns ...func() error) func() error {$/;"	f
ParallelWithErrorChan	pkg/util/xgo/parallel.go	/^func ParallelWithErrorChan(fns ...func() error) chan error {$/;"	f
Parse	pkg/flag/flag.go	/^func (fs *FlagSet) Parse() error {$/;"	f
Parse	pkg/flag/flag.go	/^func Parse() error {$/;"	f
ParseDSN	pkg/store/gorm/dsn.go	/^func ParseDSN(dsn string) (cfg *DSN, err error) {$/;"	f
ParseURL	pkg/util/xnet/url.go	/^func ParseURL(raw string) (*URL, error) {$/;"	f
Parser	pkg/worker/xcron/cron.go	/^	Parser = cron.Parser$/;"	t
Password	pkg/util/xnet/url.go	/^func (u *URL) Password() (string, bool) {$/;"	f
People	example/config/structByFile/main.go	/^type People struct {$/;"	t
People	example/config/structByFileWatch/main.go	/^type People struct {$/;"	t
People	example/config/structByRemoteConfigWatch/main.go	/^type People struct {$/;"	t
People	example/config/structByremoteConfig/main.go	/^type People struct {$/;"	t
Pick	pkg/client/grpc/balancer/base.go	/^func (p *errPickerV2) Pick(info balancer.PickInfo) (balancer.PickResult, error) {$/;"	f
Pick	pkg/client/grpc/balancer/p2c/least_loaded.go	/^func (p *p2cPicker) Pick(ctx context.Context, opts balancer.PickOptions) (balancer.SubConn, func(balancer.DoneInfo), error) {$/;"	f
Pick	pkg/client/grpc/balancer/swr.go	/^func (p *swrPicker) Pick(info balancer.PickInfo) (balancer.PickResult, error) {$/;"	f
PickerBuildInfo	pkg/client/grpc/balancer/swr.go	/^type PickerBuildInfo struct {$/;"	t
PickerBuilder	pkg/client/grpc/balancer/swr.go	/^type PickerBuilder interface {$/;"	t
Ping	pkg/util/xnet/ping.go	/^func Ping(host string, port int) error {$/;"	f
PrettyJSONBytes	pkg/util/xstring/json.go	/^func PrettyJSONBytes(obj interface{}) []byte {$/;"	f
PrettyJson	pkg/util/xstring/json.go	/^func PrettyJson(obj interface{}) string {$/;"	f
PrettyJsonByte	pkg/util/xdebug/testing.go	/^func PrettyJsonByte(obj interface{}) string {$/;"	f
PrettyJsonPrint	pkg/util/xdebug/testing.go	/^func PrettyJsonPrint(message string, obj interface{}) {$/;"	f
PrettyKV	pkg/util/xdebug/testing.go	/^func PrettyKV(key string, val string) {$/;"	f
PrettyKVWithPrefix	pkg/util/xdebug/testing.go	/^func PrettyKVWithPrefix(prefix string, key string, val string) {$/;"	f
PrettyMap	pkg/util/xdebug/testing.go	/^func PrettyMap(data map[string]interface{}) {$/;"	f
PrintKV	pkg/util/xdebug/print.go	/^func PrintKV(key string, val string) {$/;"	f
PrintKVWithPrefix	pkg/util/xdebug/print.go	/^func PrintKVWithPrefix(prefix string, key string, val string) {$/;"	f
PrintMap	pkg/util/xdebug/print.go	/^func PrintMap(data map[string]interface{}) {$/;"	f
PrintObject	pkg/util/xdebug/print.go	/^func PrintObject(message string, obj interface{}) {$/;"	f
PrintVersion	pkg/pkg.go	/^func PrintVersion() {$/;"	f
Producer	pkg/client/rocketmq/producer.go	/^type Producer struct {$/;"	t
ProducerConfig	pkg/client/rocketmq/option.go	/^type ProducerConfig struct {$/;"	t
ProjectInfo	cmd/jupiter/new/option.go	/^type ProjectInfo struct {$/;"	t
Proto	pkg/ecode/status.go	/^func (s *spbStatus) Proto() *spb.Status {$/;"	f
Proto	pkg/server/xecho/status.go	/^func (e *statusErr) Proto() *rstatus.Status {$/;"	f
Proto	pkg/server/xgin/status.go	/^func (e *statusErr) Proto() *rstatus.Status {$/;"	f
Proto	pkg/server/xgoframe/status.go	/^func (e *statusErr) Proto() *rstatus.Status {$/;"	f
ProtoError	pkg/server/xecho/handler.go	/^func ProtoError(c echo.Context, code int, e error) error {$/;"	f
ProtoJSON	pkg/server/xecho/handler.go	/^func ProtoJSON(c echo.Context, code int, i interface{}) error {$/;"	f
ProtoMessage	pkg/server/xecho/status.go	/^func (*EmptyMessage) ProtoMessage() {}$/;"	f
ProtoMessage	pkg/server/xecho/status.go	/^func (*GRPCProxyMessage) ProtoMessage() {}$/;"	f
ProtoMessage	pkg/server/xgin/status.go	/^func (*EmptyMessage) ProtoMessage() {}$/;"	f
ProtoMessage	pkg/server/xgin/status.go	/^func (*GRPCProxyMessage) ProtoMessage() {}$/;"	f
ProtoMessage	pkg/server/xgoframe/status.go	/^func (*EmptyMessage) ProtoMessage() {}$/;"	f
ProtoMessage	pkg/server/xgoframe/status.go	/^func (*GRPCProxyMessage) ProtoMessage() {}$/;"	f
ProtoMessage	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (*HelloReply) ProtoMessage()    {}$/;"	f
ProtoMessage	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (*HelloRequest) ProtoMessage()    {}$/;"	f
ProtoMessage	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (*WhoServerReply) ProtoMessage()    {}$/;"	f
ProtoMessage	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (*WhoServerReq) ProtoMessage()    {}$/;"	f
ProtocHelpTemplate	cmd/jupiter/protoc/usage.go	/^const ProtocHelpTemplate = `$/;"	c
ProviderConfig	pkg/registry/endpoint.go	/^type ProviderConfig struct {$/;"	t
Push	pkg/util/xdefer/stack.go	/^func (ds *DeferStack) Push(fns ...func() error) {$/;"	f
PushConsumer	pkg/client/rocketmq/consumer.go	/^type PushConsumer struct {$/;"	t
Put	pkg/util/xbuffer/unbounded.go	/^func (b *Unbounded) Put(t interface{}) {$/;"	f
Query	pkg/util/xnet/url.go	/^func (u *URL) Query() url.Values {$/;"	f
QueryBool	pkg/util/xnet/url.go	/^func (u *URL) QueryBool(field string, expect bool) (ret bool) {$/;"	f
QueryDuration	pkg/util/xnet/url.go	/^func (u *URL) QueryDuration(field string, expect time.Duration) (ret time.Duration) {$/;"	f
QueryInt	pkg/util/xnet/url.go	/^func (u *URL) QueryInt(field string, expect int) (ret int) {$/;"	f
QueryInt64	pkg/util/xnet/url.go	/^func (u *URL) QueryInt64(field string, expect int64) (ret int64) {$/;"	f
QueryString	pkg/util/xnet/url.go	/^func (u *URL) QueryString(field string, expect string) (ret string) {$/;"	f
REVIVE	Makefile	/^REVIVE := $(shell command -v revive 2 > \/dev\/null)$/;"	m
RPCMeta	cmd/jupiter/protoc/server.go	/^type RPCMeta struct {$/;"	t
RPop	pkg/client/redis/redis_cmds.go	/^func (r *Redis) RPop(key string) (string, error) {$/;"	f
RPush	pkg/client/redis/redis_cmds.go	/^func (r *Redis) RPush(key string, values ...interface{}) (int64, error) {$/;"	f
RandomColor	pkg/util/xcolor/string_darwin.go	/^func RandomColor() string {$/;"	f
RandomColor	pkg/util/xcolor/string_linux.go	/^func RandomColor() string {$/;"	f
RandomColor	pkg/util/xcolor/string_windows.go	/^func RandomColor() string {$/;"	f
Range	pkg/store/gorm/instance.go	/^func Range(fn func(name string, db *DB) bool) {$/;"	f
Range	pkg/store/mongox/instance.go	/^func Range(fn func(name string, db *mongo.Client) bool) {$/;"	f
RawConfig	pkg/client/etcdv3/config.go	/^func RawConfig(key string) *Config {$/;"	f
RawConfig	pkg/client/grpc/config.go	/^func RawConfig(key string) *Config {$/;"	f
RawConfig	pkg/client/rocketmq/option.go	/^func RawConfig(key string) Config {$/;"	f
RawConfig	pkg/governor/config.go	/^func RawConfig(key string) *Config {$/;"	f
RawConfig	pkg/registry/etcdv3/config.go	/^func RawConfig(key string) *Config {$/;"	f
RawConfig	pkg/sentinel/config.go	/^func RawConfig(key string) *Config {$/;"	f
RawConfig	pkg/server/xecho/config.go	/^func RawConfig(key string) *Config {$/;"	f
RawConfig	pkg/server/xgin/config.go	/^func RawConfig(key string) *Config {$/;"	f
RawConfig	pkg/server/xgoframe/config.go	/^func RawConfig(key string) *Config {$/;"	f
RawConfig	pkg/server/xgrpc/config.go	/^func RawConfig(key string) *Config {$/;"	f
RawConfig	pkg/store/gorm/config.go	/^func RawConfig(key string) *Config {$/;"	f
RawConfig	pkg/store/mongox/option.go	/^func RawConfig(key string) Config {$/;"	f
RawConfig	pkg/trace/jaeger/config.go	/^func RawConfig(key string) *Config {$/;"	f
RawConfig	pkg/worker/xcron/config.go	/^func RawConfig(key string) Config {$/;"	f
RawConfig	pkg/xlog/config.go	/^func RawConfig(key string) *Config {$/;"	f
RawConsumerConfig	pkg/client/rocketmq/option.go	/^func RawConsumerConfig(key string) ConsumerConfig {$/;"	f
RawProducerConfig	pkg/client/rocketmq/option.go	/^func RawProducerConfig(key string) ProducerConfig {$/;"	f
RawRedisClusterConfig	pkg/client/redis/config.go	/^func RawRedisClusterConfig(key string) Config {$/;"	f
RawRedisConfig	pkg/client/redis/config.go	/^func RawRedisConfig(key string) Config {$/;"	f
RawRedisStubConfig	pkg/client/redis/config.go	/^func RawRedisStubConfig(key string) Config {$/;"	f
ReadConfig	pkg/conf/datasource/apollo/apollo.go	/^func (ap *apolloDataSource) ReadConfig() ([]byte, error) {$/;"	f
ReadConfig	pkg/conf/datasource/etcdv3/etcdv3.go	/^func (s *etcdv3DataSource) ReadConfig() ([]byte, error) {$/;"	f
ReadConfig	pkg/conf/datasource/file/file.go	/^func (fp *fileDataSource) ReadConfig() (content []byte, err error) {$/;"	f
ReadConfig	pkg/conf/datasource/http/yasee.go	/^func (y *yaseeDataSource) ReadConfig() ([]byte, error) {$/;"	f
ReadConfig	pkg/datasource/apollo/apollo.go	/^func (ap *apolloDataSource) ReadConfig() ([]byte, error) {$/;"	f
ReadConfig	pkg/datasource/etcdv3/etcdv3.go	/^func (s *etcdv3DataSource) ReadConfig() ([]byte, error) {$/;"	f
ReadConfig	pkg/datasource/file/file.go	/^func (fp *fileDataSource) ReadConfig() (content []byte, err error) {$/;"	f
ReadConfig	pkg/datasource/http/yasee.go	/^func (y *yaseeDataSource) ReadConfig() ([]byte, error) {$/;"	f
ReadConfigFromFile	pkg/conf/datasource/http/cache.go	/^func ReadConfigFromFile(cacheKey string, cacheDir string) (string, error) {$/;"	f
ReadConfigFromFile	pkg/datasource/http/cache.go	/^func ReadConfigFromFile(cacheKey string, cacheDir string) (string, error) {$/;"	f
ReadDoc	example/http/gin-swagger/docs/docs.go	/^func (s *s) ReadDoc() string {$/;"	f
RecursiveDirsLookup	pkg/util/xfile/file.go	/^func RecursiveDirsLookup(root string, pattern string) ([]string, error) {$/;"	f
RecursiveFilesLookup	pkg/util/xfile/file.go	/^func RecursiveFilesLookup(root string, pattern string) ([]string, error) {$/;"	f
Recv	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (x *greeterStreamHelloClient) Recv() (*HelloReply, error) {$/;"	f
Recv	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (x *greeterStreamHelloServer) Recv() (*HelloRequest, error) {$/;"	f
Red	pkg/util/xcolor/string_darwin.go	/^func Red(msg string, arg ...interface{}) string {$/;"	f
Red	pkg/util/xcolor/string_linux.go	/^func Red(msg string, arg ...interface{}) string {$/;"	f
Red	pkg/util/xcolor/string_windows.go	/^func Red(msg string, arg ...interface{}) string {$/;"	f
RedColor	pkg/util/xcolor/util.go	/^	RedColor = iota + 31$/;"	c
Redis	pkg/client/redis/redis.go	/^type Redis struct {$/;"	t
Reflect	pkg/xlog/log.go	/^	Reflect = zap.Reflect$/;"	v
RegexpReplace	pkg/util/xregexp/regexp.go	/^func RegexpReplace(reg, src, temp string) string {$/;"	f
Register	pkg/client/grpc/resolver/resolver.go	/^func Register(name string, reg registry.Registry) {$/;"	f
Register	pkg/conf/datasource.go	/^func Register(scheme string, creator DataSourceCreatorFunc) {$/;"	f
Register	pkg/datasource/manager/manager.go	/^func Register(scheme string, creator DataSourceCreatorFunc) {$/;"	f
Register	pkg/defers/defer.go	/^func Register(fns ...func() error) {$/;"	f
Register	pkg/flag/flag.go	/^func (fs *FlagSet) Register(flags ...Flag) {$/;"	f
Register	pkg/flag/flag.go	/^func Register(fs ...Flag) {$/;"	f
RegisterBuilder	pkg/registry/init.go	/^func RegisterBuilder(kind string, build Builder) {$/;"	f
RegisterGreeterServer	pkg/util/xtest/proto/testproto/hello.pb.go	/^func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {$/;"	f
RegisterHooks	pkg/application/application.go	/^func (app *Application) RegisterHooks(k uint32, fns ...func() error) error {$/;"	f
RegisterService	pkg/registry/etcdv3/registry.go	/^func (reg *etcdv3Registry) RegisterService(ctx context.Context, info *server.ServiceInfo) error {$/;"	f
RegisterService	pkg/registry/nop.go	/^func (n Local) RegisterService(ctx context.Context, si *server.ServiceInfo) error {$/;"	f
Registry	pkg/registry/registry.go	/^type Registry interface {$/;"	t
Reset	pkg/conf/api.go	/^func Reset() {$/;"	f
Reset	pkg/server/xecho/status.go	/^func (m *EmptyMessage) Reset() { *m = EmptyMessage{} }$/;"	f
Reset	pkg/server/xecho/status.go	/^func (m *GRPCProxyMessage) Reset() { *m = GRPCProxyMessage{} }$/;"	f
Reset	pkg/server/xgin/status.go	/^func (m *EmptyMessage) Reset() { *m = EmptyMessage{} }$/;"	f
Reset	pkg/server/xgin/status.go	/^func (m *GRPCProxyMessage) Reset() { *m = GRPCProxyMessage{} }$/;"	f
Reset	pkg/server/xgoframe/status.go	/^func (m *EmptyMessage) Reset() { *m = EmptyMessage{} }$/;"	f
Reset	pkg/server/xgoframe/status.go	/^func (m *GRPCProxyMessage) Reset() { *m = GRPCProxyMessage{} }$/;"	f
Reset	pkg/util/xmap/map.go	/^func (flat *FlatMap) Reset() {$/;"	f
Reset	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (m *HelloReply) Reset()         { *m = HelloReply{} }$/;"	f
Reset	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (m *HelloRequest) Reset()         { *m = HelloRequest{} }$/;"	f
Reset	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (m *WhoServerReply) Reset()         { *m = WhoServerReply{} }$/;"	f
Reset	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (m *WhoServerReq) Reset()         { *m = WhoServerReq{} }$/;"	f
Reset	pkg/util/xtime/rash_timer.go	/^func (t *Ticker) Reset(d time.Duration) {$/;"	f
Reset	pkg/util/xtime/rash_timer.go	/^func (t *Timer) Reset(d time.Duration) {$/;"	f
ResolveNow	pkg/client/grpc/resolver/resolver.go	/^func (b *baseResolver) ResolveNow(options resolver.ResolveNowOptions) {}$/;"	f
ResolverError	pkg/client/grpc/balancer/base.go	/^func (b *baseBalancer) ResolverError(err error) {$/;"	f
RespBye	pkg/util/xtest/server/yell/server.go	/^var RespBye = &testproto.HelloReply{Message: "bye"}$/;"	v
RespFantasy	pkg/util/xtest/server/yell/server.go	/^var RespFantasy = &testproto.HelloReply{Message: "fantasy"}$/;"	v
Response	example/http/gin-swagger/main.go	/^type Response struct {$/;"	t
RestrictParallel	pkg/util/xgo/goroutine.go	/^func RestrictParallel(restrict int, fns ...func()) func() {$/;"	f
RestrictParallelWithErrorChan	pkg/util/xgo/parallel.go	/^func RestrictParallelWithErrorChan(concurrency int, fns ...func() error) chan error {$/;"	f
ReturnWhenError	pkg/util/xgo/serial.go	/^	ReturnWhenError WhenError = 1$/;"	v
Rotate	pkg/xlog/rotate/lumberjack_darwin.go	/^func (l *Logger) Rotate() error {$/;"	f
Rotate	pkg/xlog/rotate/lumberjack_linux.go	/^func (l *Logger) Rotate() error {$/;"	f
Rotate	pkg/xlog/rotate/lumberjack_windows.go	/^func (l *Logger) Rotate() error {$/;"	f
Route	pkg/registry/registry.go	/^type Route struct {$/;"	t
Route	pkg/server/server.go	/^type Route struct {$/;"	t
RouteConfig	pkg/registry/endpoint.go	/^type RouteConfig struct {$/;"	t
RowQueryResult	pkg/store/gorm/orm.go	/^	RowQueryResult = gorm.RowQueryResult$/;"	t
RowsQueryResult	pkg/store/gorm/orm.go	/^	RowsQueryResult = gorm.RowsQueryResult$/;"	t
Run	cmd/jupiter/protoc/tools.go	/^func Run(cli *cli.Context) (err error) {$/;"	f
Run	example/job/main.go	/^func (j *JobRunner) Run() {$/;"	f
Run	pkg/application/application.go	/^func (app *Application) Run(servers ...server.Server) error {$/;"	f
Run	pkg/application/application_test.go	/^func (t *namedJobRunner) Run() {}$/;"	f
Run	pkg/application/application_test.go	/^func (t *nonamedJobRunner) Run() {}$/;"	f
Run	pkg/application/application_test.go	/^func (t *testWorker) Run() error {$/;"	f
Run	pkg/conf/datasource/apollo/mockserver/mockserver.go	/^func Run() error {$/;"	f
Run	pkg/datasource/apollo/mockserver/mockserver.go	/^func Run() error {$/;"	f
Run	pkg/util/xcycle/lifecycle.go	/^func (c *Cycle) Run(fn func() error) {$/;"	f
Run	pkg/worker/xcron/config.go	/^func (wj wrappedJob) Run() {$/;"	f
Run	pkg/worker/xcron/cron.go	/^func (c *Cron) Run() error {$/;"	f
Run	pkg/worker/xcron/cron.go	/^func (f FuncJob) Run() error { return f() }$/;"	f
Runner	pkg/worker/xjob/job.go	/^type Runner interface {$/;"	t
RuntimeStats	pkg/application/runtime.go	/^type RuntimeStats struct {$/;"	t
SAdd	pkg/client/redis/redis_cmds.go	/^func (r *Redis) SAdd(key string, member ...interface{}) (int64, error) {$/;"	f
SHELL	cmd/jupiter/new/templates/Makefile	/^SHELL:=\/bin\/bash$/;"	m
SHELL	tools/build/Makefile	/^SHELL:=\/bin\/bash$/;"	m
SIsMember	pkg/client/redis/redis_cmds.go	/^func (r *Redis) SIsMember(key string, member interface{}) (bool, error) {$/;"	f
SMembers	pkg/client/redis/redis_cmds.go	/^func (r *Redis) SMembers(key string) ([]string, error) {$/;"	f
SQLCommon	pkg/store/gorm/orm.go	/^	SQLCommon = gorm.SQLCommon$/;"	t
SafeGo	pkg/util/xgo/goroutine.go	/^func SafeGo(fn func(), rec func(error)) {$/;"	f
SayHello	example/all/internal/app/greeter/greeter.go	/^func (g Greeter) SayHello(context context.Context, request *helloworld.HelloRequest) (*helloworld.HelloReply, error) {$/;"	f
SayHello	example/grpc/direct/direct-server/main.go	/^func (g Greeter) SayHello(context context.Context, request *helloworld.HelloRequest) (*helloworld.HelloReply, error) {$/;"	f
SayHello	example/grpc/etcd/etcd-server/main.go	/^func (g Greeter) SayHello(context context.Context, request *helloworld.HelloRequest) (*helloworld.HelloReply, error) {$/;"	f
SayHello	example/monitor/main.go	/^func (g Greeter) SayHello(context context.Context, request *helloworld.HelloRequest) (*helloworld.HelloReply, error) {$/;"	f
SayHello	pkg/server/xecho/handler_test.go	/^func (mock GreeterMock) SayHello(context context.Context, request *helloworld.HelloRequest) (*helloworld.HelloReply, error) {$/;"	f
SayHello	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (c *greeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {$/;"	f
SayHello	pkg/util/xtest/server/yell/server.go	/^func (s *FooServer) SayHello(ctx context.Context, in *testproto.HelloRequest) (out *testproto.HelloReply, err error) {$/;"	f
Scan	pkg/client/redis/redis_cmds.go	/^func (r *Redis) Scan(cursor uint64, match string, count int64) ([]string, error) {$/;"	f
Schedule	pkg/application/application.go	/^func (app *Application) Schedule(w worker.Worker) error {$/;"	f
Schedule	pkg/worker/xcron/cron.go	/^	Schedule = cron.Schedule$/;"	t
Schedule	pkg/worker/xcron/cron.go	/^func (c *Cron) Schedule(schedule Schedule, job NamedJob) EntryID {$/;"	f
Scheme	pkg/client/grpc/resolver/resolver.go	/^func (b baseBuilder) Scheme() string {$/;"	f
Scope	pkg/store/gorm/orm.go	/^	Scope = gorm.Scope$/;"	t
Send	pkg/client/rocketmq/producer.go	/^func (pc *Producer) Send(msg []byte) error {$/;"	f
Send	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (x *greeterStreamHelloClient) Send(m *HelloRequest) error {$/;"	f
Send	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (x *greeterStreamHelloServer) Send(m *HelloReply) error {$/;"	f
SendMsg	pkg/client/rocketmq/producer.go	/^func (pc *Producer) SendMsg(msg *primitive.Message) (*primitive.SendResult, error) {$/;"	f
SendWithContext	pkg/client/rocketmq/producer.go	/^func (pc *Producer) SendWithContext(ctx context.Context, msg []byte) error {$/;"	f
SendWithResult	pkg/client/rocketmq/producer.go	/^func (pc *Producer) SendWithResult(msg []byte, tag string) (*primitive.SendResult, error) {$/;"	f
SendWithTag	pkg/client/rocketmq/producer.go	/^func (pc *Producer) SendWithTag(msg []byte, tag string) error {$/;"	f
Serial	pkg/util/xgo/goroutine.go	/^func Serial(fns ...func()) func() {$/;"	f
SerialUntilError	pkg/util/xgo/serial.go	/^func SerialUntilError(fns ...func() error) func() error {$/;"	f
SerialWhenError	pkg/util/xgo/serial.go	/^func SerialWhenError(we WhenError) func(fn ...func() error) func() error {$/;"	f
SerialWithError	pkg/util/xgo/serial.go	/^func SerialWithError(fns ...func() error) func() error {$/;"	f
Serve	pkg/application/application.go	/^func (app *Application) Serve(s ...server.Server) error {$/;"	f
Serve	pkg/application/application_test.go	/^func (s *testServer) Serve() error {$/;"	f
Serve	pkg/governor/server.go	/^func (s *Server) Serve() error {$/;"	f
Serve	pkg/server/xecho/server.go	/^func (s *Server) Serve() error {$/;"	f
Serve	pkg/server/xgin/server.go	/^func (s *Server) Serve() error {$/;"	f
Serve	pkg/server/xgoframe/server.go	/^func (s *Server) Serve() error {$/;"	f
Serve	pkg/server/xgrpc/server.go	/^func (s *Server) Serve() error {$/;"	f
Server	pkg/governor/server.go	/^type Server struct {$/;"	t
Server	pkg/server/server.go	/^type Server interface {$/;"	t
Server	pkg/server/xecho/server.go	/^type Server struct {$/;"	t
Server	pkg/server/xgin/server.go	/^type Server struct {$/;"	t
Server	pkg/server/xgoframe/server.go	/^type Server struct {$/;"	t
Server	pkg/server/xgrpc/server.go	/^type Server struct {$/;"	t
ServerHandleCounter	pkg/metric/metric.go	/^	ServerHandleCounter = CounterVecOpts{$/;"	v
ServerHandleHistogram	pkg/metric/metric.go	/^	ServerHandleHistogram = HistogramVecOpts{$/;"	v
ServerInstance	pkg/registry/registry.go	/^type ServerInstance struct {$/;"	t
Service	pkg/server/server.go	/^type Service struct {$/;"	t
ServiceConsumer	pkg/constant/service.go	/^	ServiceConsumer$/;"	c
ServiceGovernor	pkg/constant/service.go	/^	ServiceGovernor$/;"	c
ServiceInfo	pkg/server/server.go	/^type ServiceInfo struct {$/;"	t
ServiceKind	pkg/constant/service.go	/^type ServiceKind uint8$/;"	t
ServiceProvider	pkg/constant/service.go	/^	ServiceProvider$/;"	c
ServiceUnknown	pkg/constant/service.go	/^	ServiceUnknown ServiceKind = iota$/;"	c
Set	pkg/client/redis/redis_cmds.go	/^func (r *Redis) Set(key string, value interface{}, expire time.Duration) bool {$/;"	f
Set	pkg/conf/api.go	/^func Set(key string, val interface{}) {$/;"	f
Set	pkg/conf/conf.go	/^func (c *Configuration) Set(key string, val interface{}) error {$/;"	f
Set	pkg/conf/datasource/apollo/mockserver/mockserver.go	/^func (s *mockServer) Set(namespace, key, value string) {$/;"	f
Set	pkg/conf/datasource/apollo/mockserver/mockserver.go	/^func Set(namespace, key, value string) {$/;"	f
Set	pkg/datasource/apollo/mockserver/mockserver.go	/^func (s *mockServer) Set(namespace, key, value string) {$/;"	f
Set	pkg/datasource/apollo/mockserver/mockserver.go	/^func Set(namespace, key, value string) {$/;"	f
Set	pkg/imeta/md.go	/^func (md MD) Set(k string, vals ...string) {$/;"	f
Set	pkg/metric/gauge.go	/^func (gv *gaugeVec) Set(v float64, labels ...string) {$/;"	f
Set	pkg/trace/carrier.go	/^func (w MetadataReaderWriter) Set(key, val string) {$/;"	f
Set	pkg/util/xmap/map.go	/^func (flat *FlatMap) Set(key string, val interface{}) error {$/;"	f
SetAppHost	pkg/env.go	/^func SetAppHost(host string) {$/;"	f
SetAppID	pkg/pkg.go	/^func SetAppID(s string) {$/;"	f
SetAppLogDir	pkg/env.go	/^func SetAppLogDir(logDir string) {$/;"	f
SetAppMode	pkg/env.go	/^func SetAppMode(mode string) {$/;"	f
SetAppRegion	pkg/env.go	/^func SetAppRegion(region string) {$/;"	f
SetAppZone	pkg/env.go	/^func SetAppZone(zone string) {$/;"	f
SetBuildTime	pkg/pkg.go	/^func SetBuildTime(param string) {$/;"	f
SetGlobalTracer	pkg/trace/trace.go	/^func SetGlobalTracer(tracer opentracing.Tracer) {$/;"	f
SetHook	pkg/util/xtest/server/yell/server.go	/^func (s *FooServer) SetHook(f func(context.Context)) {$/;"	f
SetKeyDelim	pkg/conf/conf.go	/^func (c *Configuration) SetKeyDelim(delim string) {$/;"	f
SetLevel	pkg/xlog/log.go	/^func (logger *Logger) SetLevel(lv Level) {$/;"	f
SetLogger	pkg/xgrpclog/logger.go	/^func SetLogger(logger *xlog.Logger) {$/;"	f
SetName	pkg/pkg.go	/^func SetName(s string) {$/;"	f
SetName	pkg/util/xtest/server/yell/server.go	/^func (s *FooServer) SetName(f string) {$/;"	f
SetNx	pkg/client/redis/redis_cmds.go	/^func (r *Redis) SetNx(key string, value interface{}, expiration time.Duration) bool {$/;"	f
SetNxWithErr	pkg/client/redis/redis_cmds.go	/^func (r *Redis) SetNxWithErr(key string, value interface{}, expiration time.Duration) (bool, error) {$/;"	f
SetRegistry	pkg/application/application.go	/^func (app *Application) SetRegistry(reg registry.Registry) {$/;"	f
SetWithErr	pkg/client/redis/redis_cmds.go	/^func (r *Redis) SetWithErr(key string, value interface{}, expire time.Duration) error {$/;"	f
Shadow	pkg/client/rocketmq/option.go	/^type Shadow struct {$/;"	t
Shuffle	pkg/util/xrand/int.go	/^func Shuffle(length int, fn func(i, j int)) {$/;"	f
Shutdown	pkg/signals/signals.go	/^func Shutdown(stop func(grace bool)) {$/;"	f
Skip	pkg/xlog/log.go	/^	Skip = zap.Skip()$/;"	v
Sleep	pkg/util/xtime/rash_timer.go	/^func (w *rashTimer) Sleep(d time.Duration) {$/;"	f
Sleep	pkg/util/xtime/rash_timer.go	/^func Sleep(d time.Duration) {$/;"	f
SpanFromContext	pkg/trace/trace.go	/^func SpanFromContext(ctx context.Context) opentracing.Span {$/;"	f
Split	pkg/util/xstring/string.go	/^func Split(raw string, sep string) Strings {$/;"	f
StageAfterStop	jupiter.go	/^	StageAfterStop uint32 = application.StageAfterStop$/;"	v
StageAfterStop	pkg/application/application.go	/^	StageAfterStop uint32 = iota + 1$/;"	c
StageBeforeStop	jupiter.go	/^	StageBeforeStop = application.StageBeforeStop$/;"	v
StageBeforeStop	pkg/application/application.go	/^	StageBeforeStop$/;"	c
Start	pkg/client/rocketmq/consumer.go	/^func (cc *PushConsumer) Start() error {$/;"	f
Start	pkg/client/rocketmq/producer.go	/^func (pc *Producer) Start() error {$/;"	f
StartSpanFromContext	pkg/trace/trace.go	/^func StartSpanFromContext(ctx context.Context, op string, opts ...opentracing.StartSpanOption) (opentracing.Span, context.Context) {$/;"	f
StartTime	pkg/pkg.go	/^func StartTime() string {$/;"	f
StartTimeTicker	pkg/util/xtime/time_ticker.go	/^func StartTimeTicker() {$/;"	f
Startup	pkg/application/application.go	/^func (app *Application) Startup(fns ...func() error) error {$/;"	f
Stats	pkg/store/gorm/instance.go	/^func Stats() (stats map[string]interface{}) {$/;"	f
Status	pkg/ecode/status.go	/^type Status interface {$/;"	t
StatusAccepted	pkg/server/xgin/const.go	/^	StatusAccepted = 202$/;"	c
StatusBadGateway	pkg/server/xgin/const.go	/^	StatusBadGateway = 502$/;"	c
StatusBadRequest	pkg/server/xgin/const.go	/^	StatusBadRequest = 400$/;"	c
StatusConflict	pkg/server/xgin/const.go	/^	StatusConflict = 409$/;"	c
StatusContinue	pkg/server/xgin/const.go	/^	StatusContinue = 100$/;"	c
StatusCreated	pkg/server/xgin/const.go	/^	StatusCreated = 201$/;"	c
StatusErrorCodeReturned	pkg/server/xgin/const.go	/^	StatusErrorCodeReturned = 800$/;"	c
StatusExpectationFailed	pkg/server/xgin/const.go	/^	StatusExpectationFailed = 417$/;"	c
StatusFoo	pkg/util/xtest/server/yell/server.go	/^var StatusFoo = status.Errorf(codes.DataLoss, ErrFoo.Error())$/;"	v
StatusForbidden	pkg/server/xgin/const.go	/^	StatusForbidden = 403$/;"	c
StatusFound	pkg/server/xgin/const.go	/^	StatusFound = 302$/;"	c
StatusGatewayTimeout	pkg/server/xgin/const.go	/^	StatusGatewayTimeout = 504$/;"	c
StatusGone	pkg/server/xgin/const.go	/^	StatusGone = 410$/;"	c
StatusHTTPVersionNotSupported	pkg/server/xgin/const.go	/^	StatusHTTPVersionNotSupported = 505$/;"	c
StatusInternalServerError	pkg/server/xgin/const.go	/^	StatusInternalServerError = 500$/;"	c
StatusLengthRequired	pkg/server/xgin/const.go	/^	StatusLengthRequired = 411$/;"	c
StatusMethodNotAllowed	pkg/server/xgin/const.go	/^	StatusMethodNotAllowed = 405$/;"	c
StatusMovedPermanently	pkg/server/xgin/const.go	/^	StatusMovedPermanently = 301$/;"	c
StatusMultipleChoices	pkg/server/xgin/const.go	/^	StatusMultipleChoices = 300$/;"	c
StatusNetworkAuthenticationRequired	pkg/server/xgin/const.go	/^	StatusNetworkAuthenticationRequired = 511$/;"	c
StatusNoContent	pkg/server/xgin/const.go	/^	StatusNoContent = 204$/;"	c
StatusNonAuthoritativeInfo	pkg/server/xgin/const.go	/^	StatusNonAuthoritativeInfo = 203$/;"	c
StatusNotAcceptable	pkg/server/xgin/const.go	/^	StatusNotAcceptable = 406$/;"	c
StatusNotFound	pkg/server/xgin/const.go	/^	StatusNotFound = 404$/;"	c
StatusNotImplemented	pkg/server/xgin/const.go	/^	StatusNotImplemented = 501$/;"	c
StatusNotModified	pkg/server/xgin/const.go	/^	StatusNotModified = 304$/;"	c
StatusOK	pkg/server/xgin/const.go	/^	StatusOK = 200$/;"	c
StatusPartialContent	pkg/server/xgin/const.go	/^	StatusPartialContent = 206$/;"	c
StatusPaymentRequired	pkg/server/xgin/const.go	/^	StatusPaymentRequired = 402$/;"	c
StatusPreconditionFailed	pkg/server/xgin/const.go	/^	StatusPreconditionFailed = 412$/;"	c
StatusPreconditionRequired	pkg/server/xgin/const.go	/^	StatusPreconditionRequired = 428$/;"	c
StatusProxyAuthRequired	pkg/server/xgin/const.go	/^	StatusProxyAuthRequired = 407$/;"	c
StatusRequestEntityTooLarge	pkg/server/xgin/const.go	/^	StatusRequestEntityTooLarge = 413$/;"	c
StatusRequestHeaderFieldsTooLarge	pkg/server/xgin/const.go	/^	StatusRequestHeaderFieldsTooLarge = 431$/;"	c
StatusRequestTimeout	pkg/server/xgin/const.go	/^	StatusRequestTimeout = 408$/;"	c
StatusRequestURITooLong	pkg/server/xgin/const.go	/^	StatusRequestURITooLong = 414$/;"	c
StatusRequestedRangeNotSatisfiable	pkg/server/xgin/const.go	/^	StatusRequestedRangeNotSatisfiable = 416$/;"	c
StatusResetContent	pkg/server/xgin/const.go	/^	StatusResetContent = 205$/;"	c
StatusSeeOther	pkg/server/xgin/const.go	/^	StatusSeeOther = 303$/;"	c
StatusServiceUnavailable	pkg/server/xgin/const.go	/^	StatusServiceUnavailable = 503$/;"	c
StatusSwitchingProtocols	pkg/server/xgin/const.go	/^	StatusSwitchingProtocols = 101$/;"	c
StatusTeapot	pkg/server/xgin/const.go	/^	StatusTeapot = 418$/;"	c
StatusTemporaryRedirect	pkg/server/xgin/const.go	/^	StatusTemporaryRedirect = 307$/;"	c
StatusText	pkg/server/xgin/const.go	/^func StatusText(code int) string {$/;"	f
StatusTooManyRequests	pkg/server/xgin/const.go	/^	StatusTooManyRequests = 429$/;"	c
StatusUnauthorized	pkg/server/xgin/const.go	/^	StatusUnauthorized = 401$/;"	c
StatusUnavailableForLegalReasons	pkg/server/xgin/const.go	/^	StatusUnavailableForLegalReasons = 451$/;"	c
StatusUnsupportedMediaType	pkg/server/xgin/const.go	/^	StatusUnsupportedMediaType = 415$/;"	c
StatusUseProxy	pkg/server/xgin/const.go	/^	StatusUseProxy = 305$/;"	c
StdConfig	pkg/client/etcdv3/config.go	/^func StdConfig(name string) *Config {$/;"	f
StdConfig	pkg/client/grpc/config.go	/^func StdConfig(name string) *Config {$/;"	f
StdConfig	pkg/governor/config.go	/^func StdConfig(name string) *Config {$/;"	f
StdConfig	pkg/registry/etcdv3/config.go	/^func StdConfig(name string) *Config {$/;"	f
StdConfig	pkg/sentinel/config.go	/^func StdConfig(name string) *Config {$/;"	f
StdConfig	pkg/server/xecho/config.go	/^func StdConfig(name string) *Config {$/;"	f
StdConfig	pkg/server/xgin/config.go	/^func StdConfig(name string) *Config {$/;"	f
StdConfig	pkg/server/xgoframe/config.go	/^func StdConfig(name string) *Config {$/;"	f
StdConfig	pkg/server/xgrpc/config.go	/^func StdConfig(name string) *Config {$/;"	f
StdConfig	pkg/store/gorm/config.go	/^func StdConfig(name string) *Config {$/;"	f
StdConfig	pkg/store/mongox/option.go	/^func StdConfig(name string) Config {$/;"	f
StdConfig	pkg/trace/jaeger/config.go	/^func StdConfig() *Config {$/;"	f
StdConfig	pkg/worker/xcron/config.go	/^func StdConfig(name string) Config {$/;"	f
StdConfig	pkg/xlog/config.go	/^func StdConfig(name string) *Config {$/;"	f
StdLog	pkg/xlog/log.go	/^func (logger *Logger) StdLog() *log.Logger {$/;"	f
StdNewProducer	pkg/client/rocketmq/producer.go	/^func StdNewProducer(name string) *Producer {$/;"	f
StdProducerConfig	pkg/client/rocketmq/option.go	/^func StdProducerConfig(name string) *ProducerConfig {$/;"	f
StdPushConsumerConfig	pkg/client/rocketmq/option.go	/^func StdPushConsumerConfig(name string) *ConsumerConfig {$/;"	f
StdRedisClusterConfig	pkg/client/redis/config.go	/^func StdRedisClusterConfig(name string) Config {$/;"	f
StdRedisConfig	pkg/client/redis/config.go	/^func StdRedisConfig(name string) Config {$/;"	f
StdRedisStubConfig	pkg/client/redis/config.go	/^func StdRedisStubConfig(name string) Config {$/;"	f
Stop	pkg/application/application.go	/^func (app *Application) Stop() (err error) {$/;"	f
Stop	pkg/application/application_test.go	/^func (info *stopInfo) Stop() error {$/;"	f
Stop	pkg/application/application_test.go	/^func (s *testServer) Stop() error {$/;"	f
Stop	pkg/application/application_test.go	/^func (t *testWorker) Stop() error {$/;"	f
Stop	pkg/governor/server.go	/^func (s *Server) Stop() error {$/;"	f
Stop	pkg/server/xecho/server.go	/^func (s *Server) Stop() error {$/;"	f
Stop	pkg/server/xgin/server.go	/^func (s *Server) Stop() error {$/;"	f
Stop	pkg/server/xgoframe/server.go	/^func (s *Server) Stop() error {$/;"	f
Stop	pkg/server/xgrpc/server.go	/^func (s *Server) Stop() error {$/;"	f
Stop	pkg/util/xtime/rash_timer.go	/^func (t *Ticker) Stop() {$/;"	f
Stop	pkg/util/xtime/rash_timer.go	/^func (t *Timer) Stop() {$/;"	f
Stop	pkg/util/xtime/rash_timer.go	/^func (w *rashTimer) Stop() {$/;"	f
Stop	pkg/worker/xcron/cron.go	/^func (c *Cron) Stop() error {$/;"	f
StreamHello	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (c *greeterClient) StreamHello(ctx context.Context, opts ...grpc.CallOption) (Greeter_StreamHelloClient, error) {$/;"	f
StreamHello	pkg/util/xtest/server/yell/server.go	/^func (s *FooServer) StreamHello(ss testproto.Greeter_StreamHelloServer) (err error) {$/;"	f
StreamInterceptorChain	pkg/server/xgrpc/util.go	/^func StreamInterceptorChain(interceptors ...grpc.StreamServerInterceptor) grpc.StreamServerInterceptor {$/;"	f
String	cmd/jupiter/confgen/testdata/config.go	/^func (c Config) String() string {$/;"	f
String	pkg/constant/service.go	/^func (sk ServiceKind) String() string {$/;"	f
String	pkg/ecode/status.go	/^func (s *spbStatus) String() string {$/;"	f
String	pkg/flag/flag.go	/^func (fs *FlagSet) String(name string) string {$/;"	f
String	pkg/flag/flag.go	/^func String(name string) string { return flagset.String(name) }$/;"	f
String	pkg/registry/endpoint.go	/^func (config RouteConfig) String() string {$/;"	f
String	pkg/registry/registry.go	/^func (kind Kind) String() string {$/;"	f
String	pkg/server/xecho/status.go	/^func (m *EmptyMessage) String() string { return "{}" }$/;"	f
String	pkg/server/xecho/status.go	/^func (m *GRPCProxyMessage) String() string { return proto.CompactTextString(m) }$/;"	f
String	pkg/server/xgin/status.go	/^func (m *EmptyMessage) String() string { return "{}" }$/;"	f
String	pkg/server/xgin/status.go	/^func (m *GRPCProxyMessage) String() string { return proto.CompactTextString(m) }$/;"	f
String	pkg/server/xgoframe/status.go	/^func (m *EmptyMessage) String() string { return "{}" }$/;"	f
String	pkg/server/xgoframe/status.go	/^func (m *GRPCProxyMessage) String() string { return proto.CompactTextString(m) }$/;"	f
String	pkg/trace/trace.go	/^	String = log.String$/;"	v
String	pkg/util/xrand/string.go	/^func String(length uint8, charsets ...string) string {$/;"	f
String	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (m *HelloReply) String() string { return proto.CompactTextString(m) }$/;"	f
String	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (m *HelloRequest) String() string { return proto.CompactTextString(m) }$/;"	f
String	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (m *WhoServerReply) String() string { return proto.CompactTextString(m) }$/;"	f
String	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (m *WhoServerReq) String() string { return proto.CompactTextString(m) }$/;"	f
String	pkg/xlog/log.go	/^	String = zap.String$/;"	v
String	tools/ast_codes/main.go	/^func (node *Node) String() string {$/;"	f
StringE	pkg/flag/flag.go	/^func (fs *FlagSet) StringE(name string) (string, error) {$/;"	f
StringE	pkg/flag/flag.go	/^func StringE(name string) (string, error) { return flagset.StringE(name) }$/;"	f
StringFlag	pkg/flag/flag.go	/^type StringFlag struct {$/;"	t
StringToDate	pkg/util/xcast/interface.go	/^func StringToDate(s string) (time.Time, error) {$/;"	f
Strings	pkg/util/xstring/string.go	/^type Strings []string$/;"	t
StructField	pkg/store/gorm/orm.go	/^	StructField = gorm.StructField$/;"	t
Stub	pkg/client/redis/redis.go	/^func (r *Redis) Stub() *redis.Client {$/;"	f
StubMode	pkg/client/redis/config.go	/^	StubMode string = "stub"$/;"	c
Sub	pkg/conf/conf.go	/^func (c *Configuration) Sub(key string) *Configuration {$/;"	f
Subscribe	pkg/client/rocketmq/consumer.go	/^func (cc *PushConsumer) Subscribe(topic string, f func(context.Context, *primitive.MessageExt) error) *PushConsumer {$/;"	f
SummaryVecOpts	pkg/metric/summary.go	/^type SummaryVecOpts struct {$/;"	t
SwaggerInfo	example/http/gin-swagger/docs/docs.go	/^var SwaggerInfo = swaggerInfo{$/;"	v
Swap	pkg/xlog/rotate/lumberjack_darwin.go	/^func (b byFormatTime) Swap(i, j int) {$/;"	f
Swap	pkg/xlog/rotate/lumberjack_linux.go	/^func (b byFormatTime) Swap(i, j int) {$/;"	f
Swap	pkg/xlog/rotate/lumberjack_windows.go	/^func (b byFormatTime) Swap(i, j int) {$/;"	f
Symbols	pkg/util/xrand/string.go	/^	Symbols = "`" + `~!@#$%^&*()-_+={}[]|\\;:"<>,.\/?`$/;"	c
Sync	pkg/xlog/buffer_syncer.go	/^func (s *bufferWriterSyncer) Sync() error {$/;"	f
T	pkg/util/xcast/decode_test.go	/^type T struct {$/;"	t
TITLE	cmd/jupiter/new/templates/Makefile	/^TITLE:=$(shell basename $(BASE_PATH))$/;"	m
TITLE	tools/build/Makefile	/^TITLE:=$(shell basename $(BASE_PATH))$/;"	m
TS	pkg/util/xtime/time.go	/^var TS TimeFormat = "2006-01-02 15:04:05"$/;"	v
TTL	pkg/client/redis/redis_cmds.go	/^func (r *Redis) TTL(key string) (int64, error) {$/;"	f
Tag	pkg/util/xstring/json.go	/^func (mf *myfield) Tag() reflect.StructTag {$/;"	f
TagComponent	pkg/trace/const.go	/^func TagComponent(component string) opentracing.Tag {$/;"	f
TagName	pkg/conf/option.go	/^func TagName(tag string) GetOption {$/;"	f
TagNameJSON	pkg/conf/option.go	/^func TagNameJSON() GetOption {$/;"	f
TagNameTOML	pkg/conf/option.go	/^func TagNameTOML() GetOption {$/;"	f
TagNameYAML	pkg/conf/option.go	/^func TagNameYAML() GetOption {$/;"	f
TagSpanKind	pkg/trace/const.go	/^func TagSpanKind(kind string) opentracing.Tag {$/;"	f
TagSpanURL	pkg/trace/const.go	/^func TagSpanURL(url string) opentracing.Tag {$/;"	f
TestAddressesRemoved	pkg/client/grpc/balancer/p2c/least_loaded_test.go	/^func TestAddressesRemoved(t *testing.T) {$/;"	f
TestAllServersDown	pkg/client/grpc/balancer/p2c/least_loaded_test.go	/^func TestAllServersDown(t *testing.T) {$/;"	f
TestAnyBlank	pkg/util/xstring/string_test.go	/^func TestAnyBlank(t *testing.T) {$/;"	f
TestApplication_AfterStop	pkg/application/application_test.go	/^func TestApplication_AfterStop(t *testing.T) {$/;"	f
TestApplication_BeforeStop	pkg/application/application_test.go	/^func TestApplication_BeforeStop(t *testing.T) {$/;"	f
TestApplication_EmptyRun	pkg/application/application_test.go	/^func TestApplication_EmptyRun(t *testing.T) {$/;"	f
TestApplication_Run	pkg/application/application_test.go	/^func TestApplication_Run(t *testing.T) {$/;"	f
TestApplication_Serve	pkg/application/application_test.go	/^func TestApplication_Serve(t *testing.T) {$/;"	f
TestApplication_Startup	pkg/application/application_test.go	/^func TestApplication_Startup(t *testing.T) {$/;"	f
TestApplication_initialize	pkg/application/application_test.go	/^func TestApplication_initialize(t *testing.T) {$/;"	f
TestBackendsRandom	pkg/client/grpc/balancer/p2c/least_loaded_test.go	/^func TestBackendsRandom(t *testing.T) {$/;"	f
TestBlue	pkg/util/xcolor/xcolor_test.go	/^func TestBlue(t *testing.T) {$/;"	f
TestBufferWriter	pkg/xlog/buffer_syncer_test.go	/^func TestBufferWriter(t *testing.T) {$/;"	f
TestCallerName	pkg/util/xstring/function_test.go	/^func TestCallerName(t *testing.T) {$/;"	f
TestClean	pkg/defers/defer_test.go	/^func TestClean(t *testing.T) {$/;"	f
TestCloseWithPendingRPC	pkg/client/grpc/balancer/p2c/least_loaded_test.go	/^func TestCloseWithPendingRPC(t *testing.T) {$/;"	f
TestConfig	pkg/client/grpc/config_test.go	/^func TestConfig(t *testing.T) {$/;"	f
TestConfigBlockFalse	pkg/client/grpc/client_test.go	/^func TestConfigBlockFalse(t *testing.T) {$/;"	f
TestConfigBlockTrue	pkg/client/grpc/client_test.go	/^func TestConfigBlockTrue(t *testing.T) {$/;"	f
TestConfigSet	pkg/client/etcdv3/config_test.go	/^func TestConfigSet(t *testing.T) {$/;"	f
TestCycleClose	pkg/util/xcycle/lifecycle_test.go	/^func TestCycleClose(t *testing.T) {$/;"	f
TestCycleDone	pkg/util/xcycle/lifecycle_test.go	/^func TestCycleDone(t *testing.T) {$/;"	f
TestCycleDoneAndClose	pkg/util/xcycle/lifecycle_test.go	/^func TestCycleDoneAndClose(t *testing.T) {$/;"	f
TestCycleWithError	pkg/util/xcycle/lifecycle_test.go	/^func TestCycleWithError(t *testing.T) {$/;"	f
TestDefaultConfig	pkg/client/etcdv3/config_test.go	/^func TestDefaultConfig(t *testing.T) {$/;"	f
TestDirectGrpc	pkg/client/grpc/client_test.go	/^func TestDirectGrpc(t *testing.T) {$/;"	f
TestDuration	pkg/util/xtime/duration_test.go	/^func TestDuration(t *testing.T) {$/;"	f
TestExists	pkg/util/xfile/file_test.go	/^func TestExists(t *testing.T) {$/;"	f
TestFunctionName	pkg/util/xstring/function_test.go	/^func TestFunctionName(t *testing.T) {$/;"	f
TestGRPCProxyWrapper	pkg/server/xecho/handler_test.go	/^func TestGRPCProxyWrapper(t *testing.T) {$/;"	f
TestGenerateID	pkg/util/xstring/uuid_test.go	/^func TestGenerateID(t *testing.T) {$/;"	f
TestGenerateUUID	pkg/util/xstring/uuid_test.go	/^func TestGenerateUUID(t *testing.T) {$/;"	f
TestGetModPath	cmd/jupiter/common/util_test.go	/^func TestGetModPath(t *testing.T) {$/;"	f
TestIsDirectory	pkg/util/xfile/file_test.go	/^func TestIsDirectory(t *testing.T) {$/;"	f
TestIsFileChanged	pkg/util/xfile/file_test.go	/^func TestIsFileChanged(t *testing.T) {$/;"	f
TestJSON_OmitDefault	pkg/util/xstring/json_test.go	/^func TestJSON_OmitDefault(t *testing.T) {$/;"	f
TestKickEmpty	pkg/util/xstring/string_test.go	/^func TestKickEmpty(t *testing.T) {$/;"	f
TestLcfirst	cmd/jupiter/protoc/util_test.go	/^func TestLcfirst(t *testing.T) {$/;"	f
TestLeastLoaded	pkg/util/xp2c/leastloaded/least_loaded_test.go	/^func TestLeastLoaded(t *testing.T) {$/;"	f
TestLeastLoadedAbnormal	pkg/util/xp2c/leastloaded/least_loaded_test.go	/^func TestLeastLoadedAbnormal(t *testing.T) {$/;"	f
TestLock	pkg/util/xfile/lock_test.go	/^func TestLock(t *testing.T) {$/;"	f
TestMain	pkg/client/grpc/common_test.go	/^func TestMain(m *testing.M) {$/;"	f
TestMain	pkg/conf/datasource/apollo/apollo_test.go	/^func TestMain(m *testing.M) {$/;"	f
TestMain	pkg/datasource/apollo/apollo_test.go	/^func TestMain(m *testing.M) {$/;"	f
TestMain	pkg/store/mongox/option_test.go	/^func TestMain(m *testing.M) {$/;"	f
TestMergeStringMap	pkg/util/xmap/util_test.go	/^func TestMergeStringMap(t *testing.T) {$/;"	f
TestMultipleWriters	pkg/util/xbuffer/unbounded_test.go	/^func TestMultipleWriters(t *testing.T) {$/;"	f
TestNew	pkg/util/xattr/attr_test.go	/^func TestNew(t *testing.T) {$/;"	f
TestNewAddressWhileBlocking	pkg/client/grpc/balancer/p2c/least_loaded_test.go	/^func TestNewAddressWhileBlocking(t *testing.T) {$/;"	f
TestNewStack	pkg/util/xdefer/stack_test.go	/^func TestNewStack(t *testing.T) {$/;"	f
TestNow	pkg/util/xtime/time_test.go	/^func TestNow(t *testing.T) {$/;"	f
TestObjectName	pkg/util/xstring/function_test.go	/^func TestObjectName(t *testing.T) {$/;"	f
TestOneBackend	pkg/client/grpc/balancer/p2c/least_loaded_test.go	/^func TestOneBackend(t *testing.T) {$/;"	f
TestOneServerDown	pkg/client/grpc/balancer/p2c/least_loaded_test.go	/^func TestOneServerDown(t *testing.T) {$/;"	f
TestParallel	pkg/util/xgo/parallel_test.go	/^func TestParallel(t *testing.T) {$/;"	f
TestParseDSN	pkg/store/gorm/dsn_test.go	/^func TestParseDSN(t *testing.T) {$/;"	f
TestRawConfig	pkg/store/mongox/option_test.go	/^func TestRawConfig(t *testing.T) {$/;"	f
TestReadConfig	pkg/conf/datasource/apollo/apollo_test.go	/^func TestReadConfig(t *testing.T) {$/;"	f
TestReadConfig	pkg/datasource/apollo/apollo_test.go	/^func TestReadConfig(t *testing.T) {$/;"	f
TestRecursiveDirsLookup	pkg/util/xfile/file_test.go	/^func TestRecursiveDirsLookup(t *testing.T) {$/;"	f
TestRecursiveFilesLookup	pkg/util/xfile/file_test.go	/^func TestRecursiveFilesLookup(t *testing.T) {$/;"	f
TestRedis	pkg/client/redis/redis_test.go	/^func TestRedis(t *testing.T) {$/;"	f
TestRegister	pkg/defers/defer_test.go	/^func TestRegister(t *testing.T) {$/;"	f
TestSerialE	pkg/util/xgo/serial_test.go	/^func TestSerialE(t *testing.T) {$/;"	f
TestSerialUntilError	pkg/util/xgo/serial_test.go	/^func TestSerialUntilError(t *testing.T) {$/;"	f
TestSerialWhenError	pkg/util/xgo/serial_test.go	/^func TestSerialWhenError(t *testing.T) {$/;"	f
TestServer_Closed	pkg/server/xgrpc/server_test.go	/^func TestServer_Closed(t *testing.T) {$/;"	f
TestServer_GracefulStop	pkg/server/xgrpc/server_test.go	/^func TestServer_GracefulStop(t *testing.T) {$/;"	f
TestServer_Info	pkg/server/xgrpc/server_test.go	/^func TestServer_Info(t *testing.T) {$/;"	f
TestServer_Serve	pkg/server/xgrpc/server_test.go	/^func TestServer_Serve(t *testing.T) {$/;"	f
TestServer_Stop	pkg/server/xgrpc/server_test.go	/^func TestServer_Stop(t *testing.T) {$/;"	f
TestShutdownSIGQUIT	pkg/signals/signals_test.go	/^func TestShutdownSIGQUIT(t *testing.T) {$/;"	f
TestSingleWriter	pkg/util/xbuffer/unbounded_test.go	/^func TestSingleWriter(t *testing.T) {$/;"	f
TestStdConfig	pkg/store/mongox/option_test.go	/^func TestStdConfig(t *testing.T) {$/;"	f
TestTime_BeginOfDay	pkg/util/xtime/time_test.go	/^func TestTime_BeginOfDay(t *testing.T) {$/;"	f
TestTime_BeginOfHour	pkg/util/xtime/time_test.go	/^func TestTime_BeginOfHour(t *testing.T) {$/;"	f
TestTime_BeginOfMinute	pkg/util/xtime/time_test.go	/^func TestTime_BeginOfMinute(t *testing.T) {$/;"	f
TestTime_BeginOfMonth	pkg/util/xtime/time_test.go	/^func TestTime_BeginOfMonth(t *testing.T) {$/;"	f
TestTime_BeginOfWeek	pkg/util/xtime/time_test.go	/^func TestTime_BeginOfWeek(t *testing.T) {$/;"	f
TestTime_BeginOfYear	pkg/util/xtime/time_test.go	/^func TestTime_BeginOfYear(t *testing.T) {$/;"	f
TestTime_EndOfDay	pkg/util/xtime/time_test.go	/^func TestTime_EndOfDay(t *testing.T) {$/;"	f
TestTime_EndOfHour	pkg/util/xtime/time_test.go	/^func TestTime_EndOfHour(t *testing.T) {$/;"	f
TestTime_EndOfMinute	pkg/util/xtime/time_test.go	/^func TestTime_EndOfMinute(t *testing.T) {$/;"	f
TestTime_EndOfMonth	pkg/util/xtime/time_test.go	/^func TestTime_EndOfMonth(t *testing.T) {$/;"	f
TestTime_EndOfWeek	pkg/util/xtime/time_test.go	/^func TestTime_EndOfWeek(t *testing.T) {$/;"	f
TestTime_EndOfYear	pkg/util/xtime/time_test.go	/^func TestTime_EndOfYear(t *testing.T) {$/;"	f
TestTimer	pkg/util/xtime/rash_timer_test.go	/^func TestTimer(t *testing.T) {$/;"	f
TestToBool	pkg/util/xcast/interface_test.go	/^func TestToBool(t *testing.T) {$/;"	f
TestToCamelCase	pkg/util/xstring/conv_test.go	/^func TestToCamelCase(t *testing.T) {$/;"	f
TestToSnakeCase	pkg/util/xstring/conv_test.go	/^func TestToSnakeCase(t *testing.T) {$/;"	f
TestToday	pkg/util/xtime/time_test.go	/^func TestToday(t *testing.T) {$/;"	f
TestUcfirst	cmd/jupiter/protoc/util_test.go	/^func TestUcfirst(t *testing.T) {$/;"	f
TestUnix	pkg/util/xtime/time_test.go	/^func TestUnix(t *testing.T) {$/;"	f
Test_Decode	pkg/util/xcast/decode_test.go	/^func Test_Decode(t *testing.T) {$/;"	f
Test_GetKeyValue	pkg/client/etcdv3/client_test.go	/^func Test_GetKeyValue(t *testing.T) {$/;"	f
Test_Info	pkg/xlog/log_test.go	/^func Test_Info(t *testing.T) {$/;"	f
Test_MutexLock	pkg/client/etcdv3/client_test.go	/^func Test_MutexLock(t *testing.T) {$/;"	f
Test_Time	pkg/util/xtime/time_test.go	/^func Test_Time(t *testing.T) {$/;"	f
Test_Unit_Application_GracefulStop	pkg/application/application_test.go	/^func Test_Unit_Application_GracefulStop(t *testing.T) {$/;"	f
Test_Unit_Application_Job	pkg/application/application_test.go	/^func Test_Unit_Application_Job(t *testing.T) {$/;"	f
Test_Unit_Application_New	pkg/application/application_test.go	/^func Test_Unit_Application_New(t *testing.T) {$/;"	f
Test_Unit_Application_Schedule	pkg/application/application_test.go	/^func Test_Unit_Application_Schedule(t *testing.T) {$/;"	f
Test_Unit_Application_Stop	pkg/application/application_test.go	/^func Test_Unit_Application_Stop(t *testing.T) {$/;"	f
Test_Unit_Application_startJobs	pkg/application/application_test.go	/^func Test_Unit_Application_startJobs(t *testing.T) {$/;"	f
Test_Unit_Application_startServers	pkg/application/application_test.go	/^func Test_Unit_Application_startServers(t *testing.T) {$/;"	f
Test_Unit_Application_startWorkers	pkg/application/application_test.go	/^func Test_Unit_Application_startWorkers(t *testing.T) {$/;"	f
Test_baseResolver	pkg/client/grpc/resolver/resolver_test.go	/^func Test_baseResolver(t *testing.T) {$/;"	f
Test_etcdv3Registry	pkg/registry/etcdv3/registry_test.go	/^func Test_etcdv3Registry(t *testing.T) {$/;"	f
Test_etcdv3registry_UpdateAddressList	pkg/registry/etcdv3/registry_test.go	/^func Test_etcdv3registry_UpdateAddressList(t *testing.T) {$/;"	f
Test_parseDSNParams	pkg/store/gorm/dsn_test.go	/^func Test_parseDSNParams(t *testing.T) {$/;"	f
Tick	pkg/util/xtime/rash_timer.go	/^func (w *rashTimer) Tick(d time.Duration) <-chan time.Time {$/;"	f
Tick	pkg/util/xtime/rash_timer.go	/^func Tick(d time.Duration) <-chan time.Time {$/;"	f
TickFunc	pkg/util/xtime/rash_timer.go	/^func (w *rashTimer) TickFunc(d time.Duration, f func()) *Ticker {$/;"	f
TickFunc	pkg/util/xtime/rash_timer.go	/^func TickFunc(d time.Duration, f func()) *Ticker {$/;"	f
Ticker	pkg/util/xtime/rash_timer.go	/^type Ticker struct {$/;"	t
Time	pkg/util/xtime/time.go	/^type Time struct {$/;"	t
TimeFormat	pkg/util/xtime/time.go	/^type TimeFormat string$/;"	t
Timer	pkg/util/xtime/rash_timer.go	/^type Timer struct {$/;"	t
ToBool	pkg/util/xcast/interface.go	/^func ToBool(i interface{}) bool {$/;"	f
ToBoolE	pkg/util/xcast/interface.go	/^func ToBoolE(i interface{}) (bool, error) {$/;"	f
ToCamelCase	pkg/util/xstring/conv.go	/^func ToCamelCase(str string) string {$/;"	f
ToDuration	pkg/util/xcast/interface.go	/^func ToDuration(i interface{}) time.Duration {$/;"	f
ToDurationE	pkg/util/xcast/interface.go	/^func ToDurationE(i interface{}) (d time.Duration, err error) {$/;"	f
ToFloat64	pkg/util/xcast/interface.go	/^func ToFloat64(i interface{}) float64 {$/;"	f
ToFloat64E	pkg/util/xcast/interface.go	/^func ToFloat64E(i interface{}) (float64, error) {$/;"	f
ToInt	pkg/util/xcast/interface.go	/^func ToInt(i interface{}) int {$/;"	f
ToInt64	pkg/util/xcast/interface.go	/^func ToInt64(i interface{}) int64 {$/;"	f
ToInt64E	pkg/util/xcast/interface.go	/^func ToInt64E(i interface{}) (int64, error) {$/;"	f
ToIntE	pkg/util/xcast/interface.go	/^func ToIntE(i interface{}) (int, error) {$/;"	f
ToIntSlice	pkg/util/xcast/interface.go	/^func ToIntSlice(i interface{}) []int {$/;"	f
ToIntSliceE	pkg/util/xcast/interface.go	/^func ToIntSliceE(i interface{}) ([]int, error) {$/;"	f
ToKind	pkg/registry/registry.go	/^func ToKind(kindStr string) Kind {$/;"	f
ToMapStringInterface	pkg/util/xmap/util.go	/^func ToMapStringInterface(src map[interface{}]interface{}) map[string]interface{} {$/;"	f
ToSlice	pkg/util/xcast/interface.go	/^func ToSlice(i interface{}) []interface{} {$/;"	f
ToSliceE	pkg/util/xcast/interface.go	/^func ToSliceE(i interface{}) ([]interface{}, error) {$/;"	f
ToSliceStringMap	pkg/util/xcast/interface.go	/^func ToSliceStringMap(i interface{}) []map[string]interface{} {$/;"	f
ToSliceStringMapE	pkg/util/xcast/interface.go	/^func ToSliceStringMapE(i interface{}) ([]map[string]interface{}, error) {$/;"	f
ToSnakeCase	pkg/util/xstring/conv.go	/^func ToSnakeCase(str string) string {$/;"	f
ToString	pkg/util/xcast/interface.go	/^func ToString(i interface{}) string {$/;"	f
ToStringE	pkg/util/xcast/interface.go	/^func ToStringE(i interface{}) (string, error) {$/;"	f
ToStringMap	pkg/util/xcast/interface.go	/^func ToStringMap(i interface{}) map[string]interface{} {$/;"	f
ToStringMapBool	pkg/util/xcast/interface.go	/^func ToStringMapBool(i interface{}) map[string]bool {$/;"	f
ToStringMapBoolE	pkg/util/xcast/interface.go	/^func ToStringMapBoolE(i interface{}) (map[string]bool, error) {$/;"	f
ToStringMapE	pkg/util/xcast/interface.go	/^func ToStringMapE(i interface{}) (map[string]interface{}, error) {$/;"	f
ToStringMapString	pkg/util/xcast/interface.go	/^func ToStringMapString(i interface{}) map[string]string {$/;"	f
ToStringMapStringE	pkg/util/xcast/interface.go	/^func ToStringMapStringE(i interface{}) (map[string]string, error) {$/;"	f
ToStringMapStringSlice	pkg/util/xcast/interface.go	/^func ToStringMapStringSlice(i interface{}) map[string][]string {$/;"	f
ToStringMapStringSliceE	pkg/util/xcast/interface.go	/^func ToStringMapStringSliceE(i interface{}) (map[string][]string, error) {$/;"	f
ToStringSlice	pkg/util/xcast/interface.go	/^func ToStringSlice(i interface{}) []string {$/;"	f
ToStringSliceE	pkg/util/xcast/interface.go	/^func ToStringSliceE(i interface{}) ([]string, error) {$/;"	f
ToTime	pkg/util/xcast/interface.go	/^func ToTime(i interface{}) time.Time {$/;"	f
ToTimeE	pkg/util/xcast/interface.go	/^func ToTimeE(i interface{}) (tim time.Time, err error) {$/;"	f
Today	pkg/util/xtime/time.go	/^func Today() *Time {$/;"	f
Tracer	pkg/xlog/trace.go	/^type Tracer struct {$/;"	t
Traverse	pkg/conf/api.go	/^func Traverse(sep string) map[string]interface{} {$/;"	f
TryLock	pkg/client/etcdv3/lock.go	/^func (mutex *Mutex) TryLock(timeout time.Duration) (err error) {$/;"	f
Type	pkg/client/redis/redis_cmds.go	/^func (r *Redis) Type(key string) (string, error) {$/;"	f
TypeGRPCStream	pkg/metric/metric.go	/^	TypeGRPCStream = "stream"$/;"	v
TypeGRPCUnary	pkg/metric/metric.go	/^	TypeGRPCUnary = "unary"$/;"	v
TypeGorm	pkg/metric/metric.go	/^	TypeGorm  = "gorm"$/;"	v
TypeHTTP	pkg/metric/metric.go	/^	TypeHTTP = "http"$/;"	v
TypeMySQL	pkg/metric/metric.go	/^	TypeMySQL = "mysql"$/;"	v
TypeRedis	pkg/metric/metric.go	/^	TypeRedis = "redis"$/;"	v
TypeRocketMQ	pkg/metric/metric.go	/^	TypeRocketMQ = "rocketmq"$/;"	v
TypeWebsocket	pkg/metric/metric.go	/^	TypeWebsocket = "ws"$/;"	v
URL	pkg/util/xnet/url.go	/^type URL struct {$/;"	t
Ucfirst	cmd/jupiter/protoc/util.go	/^func Ucfirst(str string) string {$/;"	f
Uint	pkg/flag/flag.go	/^func (fs *FlagSet) Uint(name string) uint64 {$/;"	f
Uint	pkg/flag/flag.go	/^func Uint(name string) uint64 { return flagset.Uint(name) }$/;"	f
Uint	pkg/xlog/log.go	/^	Uint = zap.Uint$/;"	v
UintE	pkg/flag/flag.go	/^func (fs *FlagSet) UintE(name string) (uint64, error) {$/;"	f
UintE	pkg/flag/flag.go	/^func UintE(name string) (uint64, error) { return flagset.UintE(name) }$/;"	f
UintFlag	pkg/flag/flag.go	/^type UintFlag struct {$/;"	t
UnaryInterceptorChain	pkg/server/xgrpc/util.go	/^func UnaryInterceptorChain(interceptors ...grpc.UnaryServerInterceptor) grpc.UnaryServerInterceptor {$/;"	f
Unbounded	pkg/util/xbuffer/unbounded.go	/^type Unbounded struct {$/;"	t
Unix	pkg/util/xtime/time.go	/^func Unix(sec, nsec int64) *Time {$/;"	f
UnixTimeUnitOffset	pkg/util/xtime/time.go	/^	UnixTimeUnitOffset = uint64(time.Millisecond \/ time.Nanosecond)$/;"	c
Unlock	pkg/client/etcdv3/lock.go	/^func (mutex *Mutex) Unlock() (err error) {$/;"	f
UnmarshalKey	pkg/conf/conf.go	/^func (c *Configuration) UnmarshalKey(key string, rawVal interface{}, opts ...GetOption) error {$/;"	f
UnmarshalKey	pkg/conf/conf.go	/^func UnmarshalKey(key string, rawVal interface{}, opts ...GetOption) error {$/;"	f
UnmarshalKey	pkg/util/xmap/map.go	/^func (flat *FlatMap) UnmarshalKey(key string, rawVal interface{}, tagName string) error {$/;"	f
UnmarshalWithExpect	pkg/conf/conf.go	/^func (c *Configuration) UnmarshalWithExpect(key string, expect interface{}) interface{} {$/;"	f
UnmarshalWithExpect	pkg/conf/conf.go	/^func UnmarshalWithExpect(key string, expect interface{}) interface{} {$/;"	f
Unmarshaller	pkg/conf/api.go	/^type Unmarshaller = func([]byte, interface{}) error$/;"	t
Unmarshaller	pkg/util/xmap/map.go	/^type Unmarshaller = func([]byte, interface{}) error$/;"	t
UnregisterService	pkg/registry/etcdv3/registry.go	/^func (reg *etcdv3Registry) UnregisterService(ctx context.Context, info *server.ServiceInfo) error {$/;"	f
UnregisterService	pkg/registry/nop.go	/^func (n Local) UnregisterService(ctx context.Context, si *server.ServiceInfo) error {$/;"	f
UpdateClientConnState	pkg/client/grpc/balancer/base.go	/^func (b *baseBalancer) UpdateClientConnState(s balancer.ClientConnState) error {$/;"	f
UpdateFlow	pkg/istats/flow_info.go	/^func (f *FlowInfoBase) UpdateFlow() {$/;"	f
UpdateShadowFlow	pkg/istats/flow_info.go	/^func (f *FlowInfoBase) UpdateShadowFlow() {$/;"	f
UpdateStructDescriptor	pkg/util/xstring/json.go	/^func (ed emitDefaultExtension) UpdateStructDescriptor(structDescriptor *jsoniter.StructDescriptor) {$/;"	f
UpdateSubConnState	pkg/client/grpc/balancer/base.go	/^func (b *baseBalancer) UpdateSubConnState(sc balancer.SubConn, state balancer.SubConnState) {$/;"	f
Upgrade	pkg/server/xgin/server.go	/^func (s *Server) Upgrade(ws *WebSocket) gin.IRoutes {$/;"	f
Upgrade	pkg/server/xgin/websocket.go	/^func (ws *WebSocket) Upgrade(w http.ResponseWriter, r *http.Request) {$/;"	f
Uppercase	pkg/util/xrand/string.go	/^	Uppercase string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"$/;"	c
Upstream	pkg/registry/endpoint.go	/^type Upstream struct {$/;"	t
User	example/client/gorm/main.go	/^type User struct {$/;"	t
User	example/http/gin-swagger/main.go	/^type User struct {$/;"	t
Username	pkg/util/xnet/url.go	/^func (u *URL) Username() string {$/;"	f
V	pkg/xgrpclog/logger.go	/^func (l *loggerWrapper) V(v int) bool {$/;"	f
Value	pkg/util/xattr/attr.go	/^func (a *Attributes) Value(key interface{}) interface{} {$/;"	f
Version	cmd/jupiter/main.go	/^const Version = "0.1.0"$/;"	c
Visit	cmd/jupiter/confgen/command.go	/^func (v *configBuilderVisitor) Visit(n ast.Node) (w ast.Visitor) {$/;"	f
Visit	cmd/jupiter/confgen/command.go	/^func (v *configStructVisitor) Visit(n ast.Node) (w ast.Visitor) {$/;"	f
Visit	tools/ast_codes/main.go	/^func (pvv *MsgInfoVistor) Visit(node ast.Node) (w ast.Visitor) {$/;"	f
Wait	pkg/util/xcycle/lifecycle.go	/^func (c *Cycle) Wait() <-chan error {$/;"	f
Warn	pkg/xlog/api.go	/^func Warn(msg string, fields ...Field) {$/;"	f
Warn	pkg/xlog/log.go	/^func (logger *Logger) Warn(msg string, fields ...Field) {$/;"	f
Warn	pkg/xlog/trace.go	/^func (t *Tracer) Warn(fields ...Field) {$/;"	f
WarnLevel	pkg/xlog/log.go	/^	WarnLevel = zap.WarnLevel$/;"	c
Warnf	pkg/xlog/api.go	/^func Warnf(msg string, args ...interface{}) {$/;"	f
Warnf	pkg/xlog/log.go	/^func (logger *Logger) Warnf(template string, args ...interface{}) {$/;"	f
Warning	pkg/xgrpclog/logger.go	/^func (l *loggerWrapper) Warning(args ...interface{}) {$/;"	f
Warningf	pkg/xgrpclog/logger.go	/^func (l *loggerWrapper) Warningf(format string, args ...interface{}) {$/;"	f
Warningln	pkg/xgrpclog/logger.go	/^func (l *loggerWrapper) Warningln(args ...interface{}) {$/;"	f
Warnw	pkg/xlog/api.go	/^func Warnw(msg string, keysAndValues ...interface{}) {$/;"	f
Warnw	pkg/xlog/log.go	/^func (logger *Logger) Warnw(msg string, keysAndValues ...interface{}) {$/;"	f
Watch	pkg/client/etcdv3/watch.go	/^type Watch struct {$/;"	t
WatchPrefix	pkg/client/etcdv3/watch.go	/^func (client *Client) WatchPrefix(ctx context.Context, prefix string) (*Watch, error) {$/;"	f
WatchServices	pkg/registry/etcdv3/registry.go	/^func (reg *etcdv3Registry) WatchServices(ctx context.Context, name string, scheme string) (chan registry.Endpoints, error) {$/;"	f
WatchServices	pkg/registry/nop.go	/^func (n Local) WatchServices(ctx context.Context, s string, s2 string) (chan Endpoints, error) {$/;"	f
WebSocket	pkg/server/xgin/websocket.go	/^type WebSocket struct {$/;"	t
WebSocketConn	pkg/server/xgin/websocket.go	/^type WebSocketConn interface {$/;"	t
WebSocketFunc	pkg/server/xgin/websocket.go	/^type WebSocketFunc func(WebSocketConn, error)$/;"	t
WebSocketOption	pkg/server/xgin/websocket.go	/^type WebSocketOption func(*WebSocket)$/;"	t
WebSocketOptions	pkg/server/xgin/websocket.go	/^func WebSocketOptions(pattern string, handler WebSocketFunc, opts ...WebSocketOption) *WebSocket {$/;"	f
WeightGroup	pkg/registry/registry.go	/^type WeightGroup struct {$/;"	t
WeightGroup	pkg/server/server.go	/^type WeightGroup struct {$/;"	t
WhenError	pkg/util/xgo/serial.go	/^type WhenError int$/;"	t
WhoServer	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (c *greeterClient) WhoServer(ctx context.Context, in *WhoServerReq, opts ...grpc.CallOption) (*WhoServerReply, error) {$/;"	f
WhoServer	pkg/util/xtest/server/yell/server.go	/^func (s *FooServer) WhoServer(ctx context.Context, in *testproto.WhoServerReq) (out *testproto.WhoServerReply, err error) {$/;"	f
WhoServerReply	pkg/util/xtest/proto/testproto/hello.pb.go	/^type WhoServerReply struct {$/;"	t
WhoServerReq	pkg/util/xtest/proto/testproto/hello.pb.go	/^type WhoServerReq struct {$/;"	t
With	pkg/flag/flag.go	/^func (fs *FlagSet) With(flags ...Flag) {$/;"	f
With	pkg/flag/flag.go	/^func With(fs ...Flag) { flagset.With(fs...) }$/;"	f
With	pkg/xlog/api.go	/^func With(fields ...Field) *Logger {$/;"	f
With	pkg/xlog/log.go	/^func (logger *Logger) With(fields ...Field) *Logger {$/;"	f
WithAddress	pkg/server/server.go	/^func WithAddress(address string) Option {$/;"	f
WithChain	pkg/worker/xcron/config.go	/^func (config *Config) WithChain(wrappers ...JobWrapper) Config {$/;"	f
WithConfigParser	jupiter_option.go	/^var WithConfigParser = application.WithConfigParser$/;"	v
WithConfigParser	pkg/application/option.go	/^func WithConfigParser(unmarshaller conf.Unmarshaller) Option {$/;"	f
WithContext	pkg/imeta/context.go	/^func WithContext(ctx context.Context, md MD) context.Context {$/;"	f
WithContext	pkg/store/gorm/orm.go	/^func WithContext(ctx context.Context, db *DB) *DB {$/;"	f
WithDetails	pkg/ecode/status.go	/^func (s *spbStatus) WithDetails(details ...interface{}) (*spbStatus, error) {$/;"	f
WithDialOption	pkg/client/grpc/config.go	/^func (config *Config) WithDialOption(opts ...grpc.DialOption) *Config {$/;"	f
WithDisable	jupiter_option.go	/^var WithDisable = application.WithDisable$/;"	v
WithDisable	pkg/application/option.go	/^func WithDisable(d Disable) Option {$/;"	f
WithHost	pkg/server/xecho/config.go	/^func (config *Config) WithHost(host string) *Config {$/;"	f
WithHost	pkg/server/xgin/config.go	/^func (config *Config) WithHost(host string) *Config {$/;"	f
WithHost	pkg/server/xgoframe/config.go	/^func (config *Config) WithHost(host string) *Config {$/;"	f
WithInterceptor	pkg/client/rocketmq/consumer.go	/^func (cc *PushConsumer) WithInterceptor(fs ...primitive.Interceptor) *PushConsumer {$/;"	f
WithInterceptor	pkg/client/rocketmq/producer.go	/^func (pc *Producer) WithInterceptor(fs ...primitive.Interceptor) *Producer {$/;"	f
WithInterceptor	pkg/store/gorm/config.go	/^func (config *Config) WithInterceptor(intes ...Interceptor) *Config {$/;"	f
WithKind	pkg/server/server.go	/^func WithKind(kind constant.ServiceKind) Option {$/;"	f
WithLocation	pkg/worker/xcron/cron.go	/^	WithLocation = cron.WithLocation$/;"	v
WithLogger	pkg/client/etcdv3/config.go	/^func (config *Config) WithLogger(logger *xlog.Logger) *Config {$/;"	f
WithLogger	pkg/client/grpc/config.go	/^func (config *Config) WithLogger(logger *xlog.Logger) *Config {$/;"	f
WithLogger	pkg/server/xecho/config.go	/^func (config *Config) WithLogger(logger *xlog.Logger) *Config {$/;"	f
WithLogger	pkg/server/xgin/config.go	/^func (config *Config) WithLogger(logger *xlog.Logger) *Config {$/;"	f
WithLogger	pkg/server/xgoframe/config.go	/^func (config *Config) WithLogger(logger *xlog.Logger) *Config {$/;"	f
WithLogger	pkg/server/xgrpc/config.go	/^func (config *Config) WithLogger(logger *xlog.Logger) *Config {$/;"	f
WithLogger	pkg/store/gorm/config.go	/^func (config *Config) WithLogger(log *xlog.Logger) *Config {$/;"	f
WithLogger	pkg/worker/xcron/config.go	/^func (config *Config) WithLogger(logger *xlog.Logger) Config {$/;"	f
WithMetaData	pkg/server/server.go	/^func WithMetaData(key, value string) Option {$/;"	f
WithOption	pkg/trace/jaeger/config.go	/^func (config *Config) WithOption(options ...jconfig.Option) *Config {$/;"	f
WithOptions	pkg/application/option.go	/^func (a *Application) WithOptions(options ...Option) {$/;"	f
WithParser	pkg/worker/xcron/config.go	/^func (config *Config) WithParser(parser Parser) Config {$/;"	f
WithParser	pkg/worker/xcron/cron.go	/^	WithParser = cron.WithParser$/;"	v
WithPort	pkg/server/xecho/config.go	/^func (config *Config) WithPort(port int) *Config {$/;"	f
WithPort	pkg/server/xgin/config.go	/^func (config *Config) WithPort(port int) *Config {$/;"	f
WithPort	pkg/server/xgoframe/config.go	/^func (config *Config) WithPort(port int) *Config {$/;"	f
WithScheme	pkg/server/server.go	/^func WithScheme(scheme string) Option {$/;"	f
WithSeconds	pkg/worker/xcron/cron.go	/^	WithSeconds = cron.WithSeconds$/;"	v
WithServerOption	pkg/server/xgrpc/config.go	/^func (config *Config) WithServerOption(options ...grpc.ServerOption) *Config {$/;"	f
WithStreamInterceptor	pkg/server/xgrpc/config.go	/^func (config *Config) WithStreamInterceptor(intes ...grpc.StreamServerInterceptor) *Config {$/;"	f
WithTag	pkg/trace/jaeger/config.go	/^func (config *Config) WithTag(tags ...opentracing.Tag) *Config {$/;"	f
WithUnaryInterceptor	pkg/server/xgrpc/config.go	/^func (config *Config) WithUnaryInterceptor(intes ...grpc.UnaryServerInterceptor) *Config {$/;"	f
WithValues	pkg/util/xattr/attr.go	/^func (a *Attributes) WithValues(kvs ...interface{}) *Attributes {$/;"	f
Worker	pkg/worker/worker.go	/^type Worker interface {$/;"	t
WorkerLockDir	pkg/worker/xcron/config.go	/^	WorkerLockDir       = "\/xcron\/lock\/"$/;"	c
Write	pkg/xlog/buffer_syncer.go	/^func (s *bufferWriterSyncer) Write(bs []byte) (int, error) {$/;"	f
Write	pkg/xlog/buffer_syncer_test.go	/^func (*errorWriter) Write([]byte) (int, error) { return 0, errors.New("unimplemented") }$/;"	f
Write	pkg/xlog/rotate/lumberjack_darwin.go	/^func (l *Logger) Write(p []byte) (n int, err error) {$/;"	f
Write	pkg/xlog/rotate/lumberjack_linux.go	/^func (l *Logger) Write(p []byte) (n int, err error) {$/;"	f
Write	pkg/xlog/rotate/lumberjack_windows.go	/^func (l *Logger) Write(p []byte) (n int, err error) {$/;"	f
WriteConfig	pkg/conf/conf.go	/^func (c *Configuration) WriteConfig() error {$/;"	f
WriteConfigToFile	pkg/conf/datasource/http/cache.go	/^func WriteConfigToFile(cacheKey string, cacheDir string, content string) {$/;"	f
WriteConfigToFile	pkg/datasource/http/cache.go	/^func WriteConfigToFile(cacheKey string, cacheDir string, content string) {$/;"	f
XXX_DiscardUnknown	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (m *HelloReply) XXX_DiscardUnknown() {$/;"	f
XXX_DiscardUnknown	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (m *HelloRequest) XXX_DiscardUnknown() {$/;"	f
XXX_DiscardUnknown	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (m *WhoServerReply) XXX_DiscardUnknown() {$/;"	f
XXX_DiscardUnknown	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (m *WhoServerReq) XXX_DiscardUnknown() {$/;"	f
XXX_Marshal	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (m *HelloReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {$/;"	f
XXX_Marshal	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (m *HelloRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {$/;"	f
XXX_Marshal	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (m *WhoServerReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {$/;"	f
XXX_Marshal	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (m *WhoServerReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {$/;"	f
XXX_Merge	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (m *HelloReply) XXX_Merge(src proto.Message) {$/;"	f
XXX_Merge	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (m *HelloRequest) XXX_Merge(src proto.Message) {$/;"	f
XXX_Merge	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (m *WhoServerReply) XXX_Merge(src proto.Message) {$/;"	f
XXX_Merge	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (m *WhoServerReq) XXX_Merge(src proto.Message) {$/;"	f
XXX_Size	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (m *HelloReply) XXX_Size() int {$/;"	f
XXX_Size	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (m *HelloRequest) XXX_Size() int {$/;"	f
XXX_Size	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (m *WhoServerReply) XXX_Size() int {$/;"	f
XXX_Size	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (m *WhoServerReq) XXX_Size() int {$/;"	f
XXX_Unmarshal	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (m *HelloReply) XXX_Unmarshal(b []byte) error {$/;"	f
XXX_Unmarshal	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (m *HelloRequest) XXX_Unmarshal(b []byte) error {$/;"	f
XXX_Unmarshal	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (m *WhoServerReply) XXX_Unmarshal(b []byte) error {$/;"	f
XXX_Unmarshal	pkg/util/xtest/proto/testproto/hello.pb.go	/^func (m *WhoServerReq) XXX_Unmarshal(b []byte) error {$/;"	f
Yellow	pkg/util/xcolor/string_darwin.go	/^func Yellow(msg string, arg ...interface{}) string {$/;"	f
Yellow	pkg/util/xcolor/string_linux.go	/^func Yellow(msg string, arg ...interface{}) string {$/;"	f
Yellow	pkg/util/xcolor/string_windows.go	/^func Yellow(msg string, arg ...interface{}) string {$/;"	f
YellowColor	pkg/util/xcolor/util.go	/^	YellowColor$/;"	c
ZAdd	pkg/client/redis/redis_cmds.go	/^func (r *Redis) ZAdd(key string, members ...redis.Z) (int64, error) {$/;"	f
ZCard	pkg/client/redis/redis_cmds.go	/^func (r *Redis) ZCard(key string) (int64, error) {$/;"	f
ZCount	pkg/client/redis/redis_cmds.go	/^func (r *Redis) ZCount(key string, min, max string) (int64, error) {$/;"	f
ZRange	pkg/client/redis/redis_cmds.go	/^func (r *Redis) ZRange(key string, start, stop int64) ([]string, error) {$/;"	f
ZRem	pkg/client/redis/redis_cmds.go	/^func (r *Redis) ZRem(key string, members ...interface{}) (int64, error) {$/;"	f
ZRemRangeByRank	pkg/client/redis/redis_cmds.go	/^func (r *Redis) ZRemRangeByRank(key string, start, stop int64) (int64, error) {$/;"	f
ZRevRange	pkg/client/redis/redis_cmds.go	/^func (r *Redis) ZRevRange(key string, start, stop int64) ([]string, error) {$/;"	f
ZRevRangeByScore	pkg/client/redis/redis_cmds.go	/^func (r *Redis) ZRevRangeByScore(key string, opt redis.ZRangeBy) ([]string, error) {$/;"	f
ZRevRangeByScoreWithScores	pkg/client/redis/redis_cmds.go	/^func (r *Redis) ZRevRangeByScoreWithScores(key string, opt redis.ZRangeBy) ([]redis.Z, error) {$/;"	f
ZRevRangeWithScores	pkg/client/redis/redis_cmds.go	/^func (r *Redis) ZRevRangeWithScores(key string, start, stop int64) ([]redis.Z, error) {$/;"	f
ZRevRank	pkg/client/redis/redis_cmds.go	/^func (r *Redis) ZRevRank(key string, member string) (int64, error) {$/;"	f
ZScore	pkg/client/redis/redis_cmds.go	/^func (r *Redis) ZScore(key string, member string) (float64, error) {$/;"	f
_	cmd/jupiter/new/packrd/packed-packr.go	/^var _ = func() error {$/;"	v
_	pkg/client/grpc/balancer/base.go	/^var _ balancer.V2Balancer = (*baseBalancer)(nil) \/\/ Assert that we implement V2Balancer$/;"	v
_	pkg/util/xcolor/string_darwin.go	/^var _ = RandomColor()$/;"	v
_	pkg/util/xcolor/string_linux.go	/^var _ = RandomColor()$/;"	v
_	pkg/util/xcolor/string_windows.go	/^var _ = RandomColor()$/;"	v
_	pkg/util/xtest/proto/testproto/hello.pb.go	/^const _ = grpc.SupportPackageIsVersion4$/;"	c
_	pkg/util/xtest/proto/testproto/hello.pb.go	/^const _ = proto.ProtoPackageIsVersion3 \/\/ please upgrade the proto package$/;"	c
_	pkg/util/xtest/proto/testproto/hello.pb.go	/^var _ = fmt.Errorf$/;"	v
_	pkg/util/xtest/proto/testproto/hello.pb.go	/^var _ = math.Inf$/;"	v
_	pkg/util/xtest/proto/testproto/hello.pb.go	/^var _ = proto.Marshal$/;"	v
_	pkg/util/xtest/proto/testproto/hello.pb.go	/^var _ context.Context$/;"	v
_	pkg/util/xtest/proto/testproto/hello.pb.go	/^var _ grpc.ClientConn$/;"	v
_	pkg/xlog/rotate/lumberjack_darwin.go	/^var _ io.WriteCloser = (*Logger)(nil)$/;"	v
_	pkg/xlog/rotate/lumberjack_linux.go	/^var _ io.WriteCloser = (*Logger)(nil)$/;"	v
_	pkg/xlog/rotate/lumberjack_windows.go	/^var _ io.WriteCloser = (*Logger)(nil)$/;"	v
_Greeter_SayHello_Handler	pkg/util/xtest/proto/testproto/hello.pb.go	/^func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {$/;"	f
_Greeter_StreamHello_Handler	pkg/util/xtest/proto/testproto/hello.pb.go	/^func _Greeter_StreamHello_Handler(srv interface{}, stream grpc.ServerStream) error {$/;"	f
_Greeter_WhoServer_Handler	pkg/util/xtest/proto/testproto/hello.pb.go	/^func _Greeter_WhoServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {$/;"	f
_Greeter_serviceDesc	pkg/util/xtest/proto/testproto/hello.pb.go	/^var _Greeter_serviceDesc = grpc.ServiceDesc{$/;"	v
_asyncBufferPool	pkg/xlog/rotate/lumberjack_darwin.go	/^var _asyncBufferPool = sync.Pool{$/;"	v
_asyncBufferPool	pkg/xlog/rotate/lumberjack_linux.go	/^var _asyncBufferPool = sync.Pool{$/;"	v
_codes	pkg/ecode/code.go	/^	_codes           sync.Map$/;"	v
_consumers	pkg/client/rocketmq/init.go	/^var _consumers = &sync.Map{}$/;"	v
_genGoFastAddress	cmd/jupiter/protoc/grpc.go	/^	_genGoFastAddress = "go get -u -v github.com\/gogo\/protobuf\/protoc-gen-gofast"$/;"	c
_grpcProtocCmd	cmd/jupiter/protoc/grpc.go	/^	_grpcProtocCmd    = "protoc --gofast_out=plugins=grpc:%s %s"$/;"	c
_instances	pkg/store/mongox/instance.go	/^var _instances = sync.Map{}$/;"	v
_isNil	pkg/xlog/rotate/testing_test.go	/^func _isNil(obtained interface{}) bool {$/;"	f
_jsonAPI	pkg/util/xstring/json.go	/^var _jsonAPI = jsoniter.Config{$/;"	v
_jsonPrettyAPI	pkg/util/xstring/json.go	/^var _jsonPrettyAPI = jsoniter.Config{$/;"	v
_logger	pkg/store/gorm/init.go	/^	_logger = xlog.JupiterLogger.With(xlog.FieldMod("gorm"))$/;"	v
_logger	pkg/store/mongox/init.go	/^var _logger = xlog.JupiterLogger.With(xlog.FieldMod("mongodb"))$/;"	v
_logger	pkg/util/xgo/init.go	/^	_logger = xlog.JupiterLogger.With(zap.String("mod", "xgo"))$/;"	v
_mdTrace	pkg/xlog/trace.go	/^var _mdTrace = "_meta_trace"$/;"	v
_producers	pkg/client/rocketmq/init.go	/^var _producers = &sync.Map{}$/;"	v
add	pkg/ecode/code.go	/^func add(code int, message string) *spbStatus {$/;"	f
addTimer	pkg/util/xtime/rash_timer.go	/^func (w *rashTimer) addTimer(t *timer) {$/;"	f
addTimerInternal	pkg/util/xtime/rash_timer.go	/^func (w *rashTimer) addTimerInternal(t *timer) {$/;"	f
agolloLogger	pkg/conf/datasource/apollo/apollo.go	/^type agolloLogger struct {$/;"	t
agolloLogger	pkg/datasource/apollo/apollo.go	/^type agolloLogger struct {$/;"	t
aid	pkg/ecode/code.go	/^	aid              int$/;"	v
aidUnaryClientInterceptor	pkg/client/grpc/interceptor.go	/^func aidUnaryClientInterceptor() grpc.UnaryClientInterceptor {$/;"	f
apollo	pkg/conf/datasource/apollo/apollo.go	/^package apollo$/;"	p
apollo	pkg/conf/datasource/apollo/apollo_test.go	/^package apollo$/;"	p
apollo	pkg/conf/datasource/apollo/register.go	/^package apollo$/;"	p
apollo	pkg/datasource/apollo/apollo.go	/^package apollo$/;"	p
apollo	pkg/datasource/apollo/apollo_test.go	/^package apollo$/;"	p
apollo	pkg/datasource/apollo/register.go	/^package apollo$/;"	p
apolloDataSource	pkg/conf/datasource/apollo/apollo.go	/^type apolloDataSource struct {$/;"	t
apolloDataSource	pkg/datasource/apollo/apollo.go	/^type apolloDataSource struct {$/;"	t
appHost	pkg/application/runtime.go	/^	appHost  = os.Getenv("JUPITER_APP_HOST")$/;"	v
appHost	pkg/env.go	/^	appHost     string$/;"	v
appID	pkg/pkg.go	/^	appID           string$/;"	v
appInstance	pkg/env.go	/^	appInstance string$/;"	v
appLogDir	pkg/env.go	/^	appLogDir   string$/;"	v
appMode	pkg/env.go	/^	appMode     string$/;"	v
appName	pkg/pkg.go	/^	appName         string$/;"	v
appRegion	pkg/env.go	/^	appRegion   string$/;"	v
appZone	pkg/env.go	/^	appZone     string$/;"	v
application	pkg/application/application.go	/^package application$/;"	p
application	pkg/application/application_test.go	/^package application$/;"	p
application	pkg/application/init.go	/^package application$/;"	p
application	pkg/application/option.go	/^package application$/;"	p
application	pkg/application/runtime.go	/^package application$/;"	p
apply	pkg/conf/conf.go	/^func (c *Configuration) apply(conf map[string]interface{}) error {$/;"	f
apply	pkg/util/xmap/map.go	/^func (flat *FlatMap) apply(data map[string]interface{}) error {$/;"	f
arrToTransform	pkg/util/xcolor/util.go	/^func arrToTransform(arg []interface{}) interface{} {$/;"	f
assert	pkg/xlog/rotate/testing_test.go	/^func assert(condition bool, t testing.TB, msg string, v ...interface{}) {$/;"	f
assertUp	pkg/xlog/rotate/testing_test.go	/^func assertUp(condition bool, t testing.TB, caller int, msg string, v ...interface{}) {$/;"	f
autoproc	pkg/autoproc/autoproc.go	/^package autoproc$/;"	p
backupName	pkg/xlog/rotate/lumberjack_darwin.go	/^func backupName(name string, local bool) string {$/;"	f
backupName	pkg/xlog/rotate/lumberjack_linux.go	/^func backupName(name string, local bool) string {$/;"	f
backupName	pkg/xlog/rotate/lumberjack_windows.go	/^func backupName(name string, local bool) string {$/;"	f
backupTimeFormat	pkg/xlog/rotate/lumberjack_darwin.go	/^	backupTimeFormat = "2006-01-02T15-04-05.000"$/;"	c
backupTimeFormat	pkg/xlog/rotate/lumberjack_linux.go	/^	backupTimeFormat = "2006-01-02T15-04-05.000"$/;"	c
backupTimeFormat	pkg/xlog/rotate/lumberjack_windows.go	/^	backupTimeFormat = "2006-01-02T15-04-05.000"$/;"	c
balancer	pkg/client/grpc/balancer/base.go	/^package balancer$/;"	p
balancer	pkg/client/grpc/balancer/swr.go	/^package balancer$/;"	p
baseBalancer	pkg/client/grpc/balancer/base.go	/^type baseBalancer struct {$/;"	t
baseBuilder	pkg/client/grpc/balancer/base.go	/^type baseBuilder struct {$/;"	t
baseBuilder	pkg/client/grpc/resolver/resolver.go	/^type baseBuilder struct {$/;"	t
baseResolver	pkg/client/grpc/resolver/resolver.go	/^type baseResolver struct {$/;"	t
bindSQL	pkg/store/gorm/logger.go	/^func bindSQL(oriSql string, args []interface{}) (sql string) {$/;"	f
bufferWriterSyncer	pkg/xlog/buffer_syncer.go	/^type bufferWriterSyncer struct {$/;"	t
buildAppVersion	pkg/pkg.go	/^	buildAppVersion string$/;"	v
buildCluster	pkg/client/redis/config.go	/^func (config Config) buildCluster() *redis.ClusterClient {$/;"	f
buildHost	pkg/pkg.go	/^	buildHost       string$/;"	v
buildStatus	pkg/pkg.go	/^	buildStatus     string$/;"	v
buildStub	pkg/client/redis/config.go	/^func (config Config) buildStub() *redis.Client {$/;"	f
buildTime	pkg/pkg.go	/^	buildTime       string$/;"	v
buildUser	pkg/pkg.go	/^	buildUser       string$/;"	v
byFormatTime	pkg/xlog/rotate/lumberjack_darwin.go	/^type byFormatTime []logInfo$/;"	t
byFormatTime	pkg/xlog/rotate/lumberjack_linux.go	/^type byFormatTime []logInfo$/;"	t
byFormatTime	pkg/xlog/rotate/lumberjack_windows.go	/^type byFormatTime []logInfo$/;"	t
cascade	pkg/util/xtime/rash_timer.go	/^func (w *rashTimer) cascade(tv [][]*timer, index int) int {$/;"	f
centerDot	pkg/server/xgin/middleware.go	/^	centerDot = []byte("·")$/;"	v
charsetUTF8	pkg/server/xecho/const.go	/^	charsetUTF8 = "charset=utf-8"$/;"	c
charsetUTF8	pkg/server/xgin/const.go	/^	charsetUTF8 = "charset=utf-8"$/;"	c
check	pkg/util/xcast/decode.go	/^func check(val interface{}) error {$/;"	f
chown	pkg/xlog/rotate/chown.go	/^func chown(_ string, _ os.FileInfo) error {$/;"	f
chown	pkg/xlog/rotate/chown_linux.go	/^func chown(name string, info os.FileInfo) error {$/;"	f
clean	pkg/application/application.go	/^func (app *Application) clean() {$/;"	f
cleanup	pkg/client/grpc/balancer/p2c/least_loaded_test.go	/^func (t *test) cleanup() {$/;"	f
client	cmd/jupiter/confgen/testdata/config.go	/^package client$/;"	p
clockSeq	pkg/util/xstring/uuid.go	/^var clockSeq uint32$/;"	v
close	pkg/xlog/rotate/lumberjack_darwin.go	/^func (l *Logger) close() error {$/;"	f
close	pkg/xlog/rotate/lumberjack_linux.go	/^func (l *Logger) close() error {$/;"	f
close	pkg/xlog/rotate/lumberjack_windows.go	/^func (l *Logger) close() error {$/;"	f
codeMS	pkg/server/xecho/const.go	/^	codeMS                   = 1000$/;"	c
codeMS	pkg/server/xgin/const.go	/^	codeMS                   = 1000$/;"	c
codeMS	pkg/server/xgoframe/const.go	/^const codeMS = 1000$/;"	c
codeMSInvalidParam	pkg/server/xecho/const.go	/^	codeMSInvalidParam       = 1001$/;"	c
codeMSInvalidParam	pkg/server/xgin/const.go	/^	codeMSInvalidParam       = 1001$/;"	c
codeMSInvoke	pkg/server/xecho/const.go	/^	codeMSInvoke             = 1002$/;"	c
codeMSInvoke	pkg/server/xgin/const.go	/^	codeMSInvoke             = 1002$/;"	c
codeMSInvokeLen	pkg/server/xecho/const.go	/^	codeMSInvokeLen          = 1003$/;"	c
codeMSInvokeLen	pkg/server/xgin/const.go	/^	codeMSInvokeLen          = 1003$/;"	c
codeMSResErr	pkg/server/xecho/const.go	/^	codeMSResErr             = 1005$/;"	c
codeMSResErr	pkg/server/xgin/const.go	/^	codeMSResErr             = 1005$/;"	c
codeMSSecondItemNotError	pkg/server/xecho/const.go	/^	codeMSSecondItemNotError = 1004$/;"	c
codeMSSecondItemNotError	pkg/server/xgin/const.go	/^	codeMSSecondItemNotError = 1004$/;"	c
codesStatusTableTempldate	tools/ast_codes/main.go	/^var codesStatusTableTempldate = `$/;"	v
common	cmd/jupiter/common/util.go	/^package common$/;"	p
common	cmd/jupiter/common/util_test.go	/^package common$/;"	p
compressLogFile	pkg/xlog/rotate/lumberjack_darwin.go	/^func compressLogFile(src, dst string) (err error) {$/;"	f
compressLogFile	pkg/xlog/rotate/lumberjack_linux.go	/^func compressLogFile(src, dst string) (err error) {$/;"	f
compressLogFile	pkg/xlog/rotate/lumberjack_windows.go	/^func compressLogFile(src, dst string) (err error) {$/;"	f
compressSuffix	pkg/xlog/rotate/lumberjack_darwin.go	/^	compressSuffix   = ".gz"$/;"	c
compressSuffix	pkg/xlog/rotate/lumberjack_linux.go	/^	compressSuffix   = ".gz"$/;"	c
compressSuffix	pkg/xlog/rotate/lumberjack_windows.go	/^	compressSuffix   = ".gz"$/;"	c
conf	pkg/conf/api.go	/^package conf$/;"	p
conf	pkg/conf/conf.go	/^package conf$/;"	p
conf	pkg/conf/datasource.go	/^package conf$/;"	p
conf	pkg/conf/init.go	/^package conf$/;"	p
conf	pkg/conf/option.go	/^package conf$/;"	p
configBuilderVisitor	cmd/jupiter/confgen/command.go	/^type configBuilderVisitor struct {$/;"	t
configDecoder	pkg/conf/datasource.go	/^	configDecoder        map[string]Unmarshaller$/;"	v
configDescs	tools/ast_codes/main.go	/^var configDescs = make([]ConfigDesc, 0)$/;"	v
configMDTemplate	tools/ast_codes/main.go	/^var configMDTemplate = `$/;"	v
configMap	tools/ast_codes/main.go	/^var configMap = map[string]string{$/;"	v
configStructVisitor	cmd/jupiter/confgen/command.go	/^type configStructVisitor struct {$/;"	t
configText	example/config/onelineByEtcdv3/main.go	/^var configText = `$/;"	v
constant	pkg/constant/config.go	/^package constant$/;"	p
constant	pkg/constant/env.go	/^package constant$/;"	p
constant	pkg/constant/key.go	/^package constant$/;"	p
constant	pkg/constant/service.go	/^package constant$/;"	p
consumeResultStr	pkg/client/rocketmq/interceptor.go	/^func consumeResultStr(result consumer.ConsumeResult) string {$/;"	f
consumer	example/grpc/direct/direct-client/main.go	/^func (eng *Engine) consumer() error {$/;"	f
consumer	example/grpc/etcd/etcd-client/main.go	/^func (eng *Engine) consumer() error {$/;"	f
contextedServerStream	pkg/server/xgrpc/interceptor.go	/^type contextedServerStream struct {$/;"	t
counterVec	pkg/metric/counter.go	/^type counterVec struct {$/;"	t
createStatusErr	pkg/server/xecho/status.go	/^func createStatusErr(code uint32, msg string) string {$/;"	f
createStatusErr	pkg/server/xgin/status.go	/^func createStatusErr(code uint32, msg string) string {$/;"	f
createStatusErr	pkg/server/xgoframe/status.go	/^func createStatusErr(code uint32, msg string) string {$/;"	f
ctime	pkg/xlog/rotate/lumberjack_darwin.go	/^func ctime(file *os.File) (time.Time, error) {$/;"	f
ctime	pkg/xlog/rotate/lumberjack_linux.go	/^func ctime(file *os.File) (time.Time, error) {$/;"	f
ctime	pkg/xlog/rotate/lumberjack_windows.go	/^func ctime(file *os.File) (time.Time, error) {$/;"	f
currentTime	pkg/xlog/rotate/lumberjack_darwin.go	/^	currentTime = time.Now$/;"	v
currentTime	pkg/xlog/rotate/lumberjack_linux.go	/^	currentTime = time.Now$/;"	v
currentTime	pkg/xlog/rotate/lumberjack_windows.go	/^	currentTime = time.Now$/;"	v
datasourceBuilders	pkg/conf/datasource.go	/^	datasourceBuilders   map[string]DataSourceCreatorFunc$/;"	v
debugInterceptor	pkg/store/gorm/interceptor.go	/^func debugInterceptor(dsn *DSN, op string, options *Config) func(Handler) Handler {$/;"	f
debugUnaryClientInterceptor	pkg/client/grpc/interceptor.go	/^func debugUnaryClientInterceptor(addr string) grpc.UnaryClientInterceptor {$/;"	f
decode	pkg/util/xcast/decode.go	/^func decode(data interface{}, val reflect.Value) error {$/;"	f
decodeBool	pkg/util/xcast/decode.go	/^func decodeBool(data interface{}, val reflect.Value) error {$/;"	f
decodeFloat	pkg/util/xcast/decode.go	/^func decodeFloat(data interface{}, val reflect.Value) error {$/;"	f
decodeInt	pkg/util/xcast/decode.go	/^func decodeInt(data interface{}, val reflect.Value) error {$/;"	f
decodeInterface	pkg/util/xcast/decode.go	/^func decodeInterface(data interface{}, val reflect.Value) error {$/;"	f
decodePtr	pkg/util/xcast/decode.go	/^func decodePtr(data interface{}, val reflect.Value) error {$/;"	f
decodeString	pkg/util/xcast/decode.go	/^func decodeString(data interface{}, val reflect.Value) error {$/;"	f
decodeStruct	pkg/util/xcast/decode.go	/^func decodeStruct(data interface{}, val reflect.Value) error {$/;"	f
decodeUint	pkg/util/xcast/decode.go	/^func decodeUint(data interface{}, val reflect.Value) error {$/;"	f
deepSearch	pkg/conf/conf.go	/^func deepSearch(m map[string]interface{}, path []string) map[string]interface{} {$/;"	f
deepSearch	pkg/util/xmap/map.go	/^func deepSearch(m map[string]interface{}, path []string) map[string]interface{} {$/;"	f
defaultBufferSize	pkg/xlog/buffer_syncer.go	/^	defaultBufferSize = 256 * 1024$/;"	c
defaultConfiguration	pkg/conf/api.go	/^var defaultConfiguration = New()$/;"	v
defaultFlags	pkg/flag/init.go	/^var defaultFlags = []Flag{$/;"	v
defaultFlushInterval	pkg/xlog/buffer_syncer.go	/^	defaultFlushInterval = 30 * time.Second$/;"	c
defaultGetOptions	pkg/conf/option.go	/^var defaultGetOptions = GetOptions{$/;"	v
defaultKeyDelim	pkg/conf/conf.go	/^	defaultKeyDelim = "."$/;"	c
defaultMaxSize	pkg/xlog/rotate/lumberjack_darwin.go	/^	defaultMaxSize   = 100$/;"	c
defaultMaxSize	pkg/xlog/rotate/lumberjack_linux.go	/^	defaultMaxSize   = 100$/;"	c
defaultMaxSize	pkg/xlog/rotate/lumberjack_windows.go	/^	defaultMaxSize   = 100$/;"	c
defaultServiceInfo	pkg/server/server.go	/^func defaultServiceInfo() ServiceInfo {$/;"	f
defaultStreamServerInterceptor	pkg/server/xgrpc/interceptor.go	/^func defaultStreamServerInterceptor(logger *xlog.Logger, slowQueryThresholdInMilli int64) grpc.StreamServerInterceptor {$/;"	f
defaultTimerSize	pkg/util/xtime/rash_timer.go	/^	defaultTimerSize = 128$/;"	c
defaultUnaryServerInterceptor	pkg/server/xgrpc/interceptor.go	/^func defaultUnaryServerInterceptor(logger *xlog.Logger, slowQueryThresholdInMilli int64) grpc.UnaryServerInterceptor {$/;"	f
defaultWheel	pkg/util/xtime/rash_timer.go	/^var defaultWheel *rashTimer$/;"	v
defers	pkg/defers/defer.go	/^package defers$/;"	p
defers	pkg/defers/defer_test.go	/^package defers$/;"	p
delSession	pkg/registry/etcdv3/registry.go	/^func (reg *etcdv3Registry) delSession(k string) error {$/;"	f
delTimer	pkg/util/xtime/rash_timer.go	/^func (w *rashTimer) delTimer(t *timer) {$/;"	f
delayIfStillRunning	pkg/worker/xcron/intercept.go	/^func delayIfStillRunning(logger *xlog.Logger) JobWrapper {$/;"	f
deleteAddrList	pkg/registry/etcdv3/registry.go	/^func deleteAddrList(al *registry.Endpoints, prefix, scheme string, kvs ...*mvccpb.KeyValue) {$/;"	f
demo	example/all/internal/app/demo/engine.go	/^package demo$/;"	p
die	.githooks/pre-commit	/^function die {$/;"	f
dir	pkg/xlog/rotate/lumberjack_darwin.go	/^func (l *Logger) dir() string {$/;"	f
dir	pkg/xlog/rotate/lumberjack_linux.go	/^func (l *Logger) dir() string {$/;"	f
dir	pkg/xlog/rotate/lumberjack_windows.go	/^func (l *Logger) dir() string {$/;"	f
directClient	pkg/client/grpc/common_test.go	/^var directClient testproto.GreeterClient$/;"	v
doCreateProject	cmd/jupiter/new/tools.go	/^func doCreateProject() (err error) {$/;"	f
doGenerate	cmd/jupiter/protoc/grpc.go	/^func doGenerate() (err error) {$/;"	f
doWriteFile	cmd/jupiter/new/tools.go	/^func doWriteFile(path, tmpl string) (err error) {$/;"	f
doc	example/http/gin-swagger/docs/docs.go	/^var doc = `{$/;"	v
docs	example/http/gin-swagger/docs/docs.go	/^package docs$/;"	p
dot	pkg/server/xgin/middleware.go	/^	dot       = []byte(".")$/;"	v
dunno	pkg/server/xgin/middleware.go	/^	dunno     = []byte("???")$/;"	v
ecode	pkg/ecode/code.go	/^package ecode$/;"	p
ecode	pkg/ecode/status.go	/^package ecode$/;"	p
ecode	pkg/ecode/unified.go	/^package ecode$/;"	p
emitDefaultExtension	pkg/util/xstring/json.go	/^type emitDefaultExtension struct {$/;"	t
equals	pkg/xlog/rotate/testing_test.go	/^func equals(exp, act interface{}, t testing.TB) {$/;"	f
equalsUp	pkg/xlog/rotate/testing_test.go	/^func equalsUp(exp, act interface{}, t testing.TB, caller int) {$/;"	f
errBadRequest	pkg/server/xecho/error.go	/^	errBadRequest         = status.Errorf(codes.InvalidArgument, createStatusErr(codeMSInvalidParam, "bad request"))$/;"	v
errBadRequest	pkg/server/xgin/error.go	/^	errBadRequest         = status.Errorf(codes.InvalidArgument, createStatusErr(codeMSInvalidParam, "bad request"))$/;"	v
errInvalidDSNAddr	pkg/store/gorm/dsn.go	/^	errInvalidDSNAddr      = errors.New("invalid DSN: network address not terminated (missing closing brace)")$/;"	v
errInvalidDSNNoSlash	pkg/store/gorm/dsn.go	/^	errInvalidDSNNoSlash   = errors.New("invalid DSN: missing the slash separating the database name")$/;"	v
errInvalidDSNUnescaped	pkg/store/gorm/dsn.go	/^	errInvalidDSNUnescaped = errors.New("invalid DSN: did you forget to escape a param value")$/;"	v
errMicroDefault	pkg/server/xecho/error.go	/^	errMicroDefault       = status.Errorf(codes.Internal, createStatusErr(codeMS, "micro default"))$/;"	v
errMicroDefault	pkg/server/xgin/error.go	/^	errMicroDefault       = status.Errorf(codes.Internal, createStatusErr(codeMS, "micro default"))$/;"	v
errMicroDefault	pkg/server/xgoframe/error.go	/^var errMicroDefault = status.Errorf(codes.Internal, createStatusErr(codeMS, "micro default"))$/;"	v
errMicroInvoke	pkg/server/xecho/error.go	/^	errMicroInvoke        = status.Errorf(codes.Internal, createStatusErr(codeMSInvoke, "invoke failed"))$/;"	v
errMicroInvoke	pkg/server/xgin/error.go	/^	errMicroInvoke        = status.Errorf(codes.Internal, createStatusErr(codeMSInvoke, "invoke failed"))$/;"	v
errMicroInvokeInvalid	pkg/server/xecho/error.go	/^	errMicroInvokeInvalid = status.Errorf(codes.Internal, createStatusErr(codeMSSecondItemNotError, "second invoke res not a error"))$/;"	v
errMicroInvokeInvalid	pkg/server/xgin/error.go	/^	errMicroInvokeInvalid = status.Errorf(codes.Internal, createStatusErr(codeMSSecondItemNotError, "second invoke res not a error"))$/;"	v
errMicroInvokeLen	pkg/server/xecho/error.go	/^	errMicroInvokeLen     = status.Errorf(codes.Internal, createStatusErr(codeMSInvokeLen, "invoke result not 2 item"))$/;"	v
errMicroInvokeLen	pkg/server/xgin/error.go	/^	errMicroInvokeLen     = status.Errorf(codes.Internal, createStatusErr(codeMSInvokeLen, "invoke result not 2 item"))$/;"	v
errMicroResInvalid	pkg/server/xecho/error.go	/^	errMicroResInvalid    = status.Errorf(codes.Internal, createStatusErr(codeMSResErr, "response is not valid"))$/;"	v
errMicroResInvalid	pkg/server/xgin/error.go	/^	errMicroResInvalid    = status.Errorf(codes.Internal, createStatusErr(codeMSResErr, "response is not valid"))$/;"	v
errPickerV2	pkg/client/grpc/balancer/base.go	/^type errPickerV2 struct {$/;"	t
errSlowCommand	pkg/client/grpc/interceptor.go	/^	errSlowCommand = errors.New("grpc unary slow command")$/;"	v
errSlowCommand	pkg/store/gorm/orm.go	/^	errSlowCommand = errors.New("mysql slow command")$/;"	v
errTest	pkg/application/application_test.go	/^var errTest = fmt.Errorf("test error")$/;"	v
errorDesc	pkg/server/xgrpc/server_test.go	/^func errorDesc(err error) string {$/;"	f
errorWriter	pkg/xlog/buffer_syncer_test.go	/^type errorWriter struct{}$/;"	t
etcdv3	pkg/client/etcdv3/client.go	/^package etcdv3$/;"	p
etcdv3	pkg/client/etcdv3/client_test.go	/^package etcdv3$/;"	p
etcdv3	pkg/client/etcdv3/config.go	/^package etcdv3$/;"	p
etcdv3	pkg/client/etcdv3/config_test.go	/^package etcdv3$/;"	p
etcdv3	pkg/client/etcdv3/lock.go	/^package etcdv3$/;"	p
etcdv3	pkg/client/etcdv3/watch.go	/^package etcdv3$/;"	p
etcdv3	pkg/conf/datasource/etcdv3/etcdv3.go	/^package etcdv3$/;"	p
etcdv3	pkg/conf/datasource/etcdv3/register.go	/^package etcdv3$/;"	p
etcdv3	pkg/datasource/etcdv3/etcdv3.go	/^package etcdv3$/;"	p
etcdv3	pkg/datasource/etcdv3/register.go	/^package etcdv3$/;"	p
etcdv3	pkg/registry/etcdv3/config.go	/^package etcdv3$/;"	p
etcdv3	pkg/registry/etcdv3/init.go	/^package etcdv3$/;"	p
etcdv3	pkg/registry/etcdv3/registry.go	/^package etcdv3$/;"	p
etcdv3	pkg/registry/etcdv3/registry_test.go	/^package etcdv3$/;"	p
etcdv3DataSource	pkg/conf/datasource/etcdv3/etcdv3.go	/^type etcdv3DataSource struct {$/;"	t
etcdv3DataSource	pkg/datasource/etcdv3/etcdv3.go	/^type etcdv3DataSource struct {$/;"	t
etcdv3Registry	pkg/registry/etcdv3/registry.go	/^type etcdv3Registry struct {$/;"	t
exampleForRedis	example/client/redis/main.go	/^func (eng *Engine) exampleForRedis() (err error) {$/;"	f
exampleForRedisClusterStub	example/client/redis/main.go	/^func (eng *Engine) exampleForRedisClusterStub() (err error) {$/;"	f
exampleForRedisStub	example/client/redis/main.go	/^func (eng *Engine) exampleForRedisStub() (err error) {$/;"	f
exampleMongo	example/store/mongo/main.go	/^func (eng *Engine) exampleMongo() (err error) {$/;"	f
exampleRocketMQConsumer	example/client/rocketmq/main.go	/^func (eng *Engine) exampleRocketMQConsumer() (err error) {$/;"	f
exampleRocketMQProducer	example/client/rocketmq/main.go	/^func (eng *Engine) exampleRocketMQProducer() (err error) {$/;"	f
exampleSentinel	example/sentinel/main.go	/^func (eng *Engine) exampleSentinel() (err error) {$/;"	f
execJob	example/all/internal/app/demo/engine.go	/^func (eng *Engine) execJob() error {$/;"	f
execJob	example/worker/cron/main.go	/^func (eng *Engine) execJob() error {$/;"	f
executeGoGet	cmd/jupiter/protoc/grpc.go	/^func executeGoGet(address string) error {$/;"	f
extractAID	pkg/server/xecho/middleware.go	/^func extractAID(c echo.Context) string {$/;"	f
extractAID	pkg/server/xgin/middleware.go	/^func extractAID(ctx *gin.Context) string {$/;"	f
extractAID	pkg/server/xgrpc/interceptor.go	/^func extractAID(ctx context.Context) string {$/;"	f
fieldMap	tools/ast_codes/main.go	/^var fieldMap = map[string]string{$/;"	v
file	pkg/conf/datasource/file/file.go	/^package file$/;"	p
file	pkg/conf/datasource/file/register.go	/^package file$/;"	p
file	pkg/datasource/file/file.go	/^package file$/;"	p
file	pkg/datasource/file/register.go	/^package file$/;"	p
fileDataSource	pkg/conf/datasource/file/file.go	/^type fileDataSource struct {$/;"	t
fileDataSource	pkg/datasource/file/file.go	/^type fileDataSource struct {$/;"	t
fileDescriptor_61ef911816e0a8ce	pkg/util/xtest/proto/testproto/hello.pb.go	/^var fileDescriptor_61ef911816e0a8ce = []byte{$/;"	v
fileWatch	example/config/onelineByFileWatch/main.go	/^func (s *Engine) fileWatch() error {$/;"	f
fileWatch	example/config/structByFileWatch/main.go	/^func (s *Engine) fileWatch() error {$/;"	f
filename	pkg/xlog/rotate/lumberjack_darwin.go	/^func (l *Logger) filename() string {$/;"	f
filename	pkg/xlog/rotate/lumberjack_linux.go	/^func (l *Logger) filename() string {$/;"	f
filename	pkg/xlog/rotate/lumberjack_windows.go	/^func (l *Logger) filename() string {$/;"	f
find	pkg/conf/conf.go	/^func (c *Configuration) find(key string) interface{} {$/;"	f
find	pkg/util/xmap/map.go	/^func (flat *FlatMap) find(key string) interface{} {$/;"	f
flag	pkg/flag/flag.go	/^package flag$/;"	p
flag	pkg/flag/init.go	/^package flag$/;"	p
flagset	pkg/flag/flag.go	/^	flagset *FlagSet$/;"	v
fn1	pkg/util/xgo/parallel_test.go	/^	fn1     = func() error { return nil }$/;"	v
fn2	pkg/util/xgo/parallel_test.go	/^	fn2     = func() error { return errors.New("BOOM") }$/;"	v
function	pkg/server/xgin/middleware.go	/^func function(pc uintptr) []byte {$/;"	f
gaugeVec	pkg/metric/gauge.go	/^type gaugeVec struct {$/;"	t
generateGRPC	cmd/jupiter/protoc/grpc.go	/^func generateGRPC() (err error) {$/;"	f
generateServer	cmd/jupiter/protoc/server.go	/^func (server *GRPCServerGen) generateServer() (err error) {$/;"	f
getClientIP	pkg/server/xgrpc/interceptor.go	/^func getClientIP(ctx context.Context) (string, error) {$/;"	f
getConfig	pkg/conf/datasource/http/yasee.go	/^func (y *yaseeDataSource) getConfig(addr string, enableWatch bool) (string, error) {$/;"	f
getConfig	pkg/datasource/http/yasee.go	/^func (y *yaseeDataSource) getConfig(addr string, enableWatch bool) (string, error) {$/;"	f
getConfigInner	pkg/conf/datasource/http/yasee.go	/^func (y *yaseeDataSource) getConfigInner(addr string, enableWatch bool) (string, error) {$/;"	f
getConfigInner	pkg/datasource/http/yasee.go	/^func (y *yaseeDataSource) getConfigInner(addr string, enableWatch bool) (string, error) {$/;"	f
getIndex	pkg/util/xtime/rash_timer.go	/^func (w *rashTimer) getIndex(n int) int {$/;"	f
getParentDirectory	pkg/util/xfile/file.go	/^func getParentDirectory(dirctory string) string {$/;"	f
getPeer	pkg/server/xgrpc/interceptor.go	/^func getPeer(ctx context.Context) map[string]string {$/;"	f
getSession	pkg/registry/etcdv3/registry.go	/^func (reg *etcdv3Registry) getSession(k string, opts ...concurrency.SessionOption) (*concurrency.Session, error) {$/;"	f
getUser	example/http/gin-swagger/main.go	/^func getUser(ctx *gin.Context) {$/;"	f
globalDefers	pkg/defers/defer.go	/^	globalDefers = xdefer.NewStack()$/;"	v
goFunc	pkg/util/xtime/rash_timer.go	/^func goFunc(t time.Time, arg interface{}) {$/;"	f
goVersion	pkg/pkg.go	/^	goVersion string$/;"	v
gorm	pkg/store/gorm/config.go	/^package gorm$/;"	p
gorm	pkg/store/gorm/dsn.go	/^package gorm$/;"	p
gorm	pkg/store/gorm/dsn_test.go	/^package gorm$/;"	p
gorm	pkg/store/gorm/init.go	/^package gorm$/;"	p
gorm	pkg/store/gorm/instance.go	/^package gorm$/;"	p
gorm	pkg/store/gorm/interceptor.go	/^package gorm$/;"	p
gorm	pkg/store/gorm/logger.go	/^package gorm$/;"	p
gorm	pkg/store/gorm/orm.go	/^package gorm$/;"	p
gormDB	example/client/gorm/main.go	/^var gormDB *gorm.DB$/;"	v
governor	pkg/governor/config.go	/^package governor$/;"	p
governor	pkg/governor/http.go	/^package governor$/;"	p
governor	pkg/governor/init.go	/^package governor$/;"	p
governor	pkg/governor/server.go	/^package governor$/;"	p
greeter	example/all/internal/app/greeter/greeter.go	/^package greeter$/;"	p
greeterClient	pkg/util/xtest/proto/testproto/hello.pb.go	/^type greeterClient struct {$/;"	t
greeterStreamHelloClient	pkg/util/xtest/proto/testproto/hello.pb.go	/^type greeterStreamHelloClient struct {$/;"	t
greeterStreamHelloServer	pkg/util/xtest/proto/testproto/hello.pb.go	/^type greeterStreamHelloServer struct {$/;"	t
grpc	pkg/client/grpc/client.go	/^package grpc$/;"	p
grpc	pkg/client/grpc/client_test.go	/^package grpc$/;"	p
grpc	pkg/client/grpc/common_test.go	/^package grpc$/;"	p
grpc	pkg/client/grpc/config.go	/^package grpc$/;"	p
grpc	pkg/client/grpc/config_test.go	/^package grpc$/;"	p
grpc	pkg/client/grpc/interceptor.go	/^package grpc$/;"	p
handle	pkg/conf/datasource/etcdv3/etcdv3.go	/^func (s *etcdv3DataSource) handle(resp *clientv3.WatchResponse) {$/;"	f
handle	pkg/datasource/etcdv3/etcdv3.go	/^func (s *etcdv3DataSource) handle(resp *clientv3.WatchResponse) {$/;"	f
handleCheckOrigin	example/http/gin_ws_cors/main.go	/^func handleCheckOrigin(ws *xgin.WebSocket) {$/;"	f
handleMessage	cmd/jupiter/protoc/server.go	/^func (server *GRPCServerGen) handleMessage(m *proto.Message) {$/;"	f
handlePackage	cmd/jupiter/protoc/server.go	/^func (server *GRPCServerGen) handlePackage(pkg *proto.Package) {$/;"	f
handleRPC	cmd/jupiter/protoc/server.go	/^func (server *GRPCServerGen) handleRPC(rpc *proto.RPC) {$/;"	f
handleService	cmd/jupiter/protoc/server.go	/^func (server *GRPCServerGen) handleService(s *proto.Service) {$/;"	f
handleWebSocketConn	example/http/gin_ws_cors/main.go	/^func handleWebSocketConn(ws xgin.WebSocketConn, err error) {$/;"	f
hardwareAddr	pkg/util/xstring/uuid.go	/^var hardwareAddr []byte$/;"	v
hdrRequestKey	pkg/trace/const.go	/^type hdrRequestKey struct{}$/;"	t
histogramVec	pkg/metric/histogram.go	/^type histogramVec struct {$/;"	t
hostName	pkg/pkg.go	/^	hostName        string$/;"	v
hostname	pkg/application/runtime.go	/^	hostname string$/;"	v
http	pkg/conf/datasource/http/cache.go	/^package http$/;"	p
http	pkg/conf/datasource/http/register.go	/^package http$/;"	p
http	pkg/conf/datasource/http/yasee.go	/^package http$/;"	p
http	pkg/datasource/http/cache.go	/^package http$/;"	p
http	pkg/datasource/http/register.go	/^package http$/;"	p
http	pkg/datasource/http/yasee.go	/^package http$/;"	p
imeta	pkg/imeta/context.go	/^package imeta$/;"	p
imeta	pkg/imeta/md.go	/^package imeta$/;"	p
immediatelyScheduler	pkg/worker/xcron/cron.go	/^type immediatelyScheduler struct {$/;"	t
indirect	pkg/util/xcast/interface.go	/^func indirect(a interface{}) interface{} {$/;"	f
indirectToStringerOrError	pkg/util/xcast/interface.go	/^func indirectToStringerOrError(a interface{}) interface{} {$/;"	f
init	example/http/gin-swagger/docs/docs.go	/^func init() {$/;"	f
init	pkg/application/init.go	/^func init() {$/;"	f
init	pkg/application/runtime.go	/^func init() {$/;"	f
init	pkg/autoproc/autoproc.go	/^func init() {$/;"	f
init	pkg/client/grpc/balancer/p2c/least_loaded.go	/^func init() {$/;"	f
init	pkg/client/grpc/balancer/swr.go	/^func init() {$/;"	f
init	pkg/client/rocketmq/init.go	/^func init() {$/;"	f
init	pkg/conf/conf.go	/^func init() {$/;"	f
init	pkg/conf/datasource/apollo/mockserver/mockserver.go	/^func init() {$/;"	f
init	pkg/conf/datasource/apollo/register.go	/^func init() {$/;"	f
init	pkg/conf/datasource/etcdv3/register.go	/^func init() {$/;"	f
init	pkg/conf/datasource/file/register.go	/^func init() {$/;"	f
init	pkg/conf/datasource/http/register.go	/^func init() {$/;"	f
init	pkg/conf/init.go	/^func init() {$/;"	f
init	pkg/constant/service.go	/^func init() {$/;"	f
init	pkg/datasource/apollo/mockserver/mockserver.go	/^func init() {$/;"	f
init	pkg/datasource/apollo/register.go	/^func init() {$/;"	f
init	pkg/datasource/etcdv3/register.go	/^func init() {$/;"	f
init	pkg/datasource/file/register.go	/^func init() {$/;"	f
init	pkg/datasource/http/register.go	/^func init() {$/;"	f
init	pkg/datasource/manager/manager.go	/^func init() {$/;"	f
init	pkg/ecode/code.go	/^func init() {$/;"	f
init	pkg/flag/flag.go	/^func init() {$/;"	f
init	pkg/governor/http.go	/^func init() {$/;"	f
init	pkg/governor/init.go	/^func init() {$/;"	f
init	pkg/metric/metric.go	/^func init() {$/;"	f
init	pkg/pkg.go	/^func init() {$/;"	f
init	pkg/registry/etcdv3/init.go	/^func init() {$/;"	f
init	pkg/registry/init.go	/^func init() {$/;"	f
init	pkg/sentinel/init.go	/^func init() {$/;"	f
init	pkg/server/init.go	/^func init() {$/;"	f
init	pkg/server/xecho/status.go	/^func init() {$/;"	f
init	pkg/server/xgin/status.go	/^func init() {$/;"	f
init	pkg/server/xgoframe/status.go	/^func init() {$/;"	f
init	pkg/store/gorm/init.go	/^func init() {$/;"	f
init	pkg/store/mongox/init.go	/^func init() {$/;"	f
init	pkg/trace/init.go	/^func init() {$/;"	f
init	pkg/util/xbuffer/unbounded_test.go	/^func init() {$/;"	f
init	pkg/util/xdebug/testing.go	/^func init() {$/;"	f
init	pkg/util/xstring/json.go	/^func init() {$/;"	f
init	pkg/util/xstring/uuid.go	/^func init() {$/;"	f
init	pkg/util/xtest/proto/testproto/hello.pb.go	/^func init() { proto.RegisterFile("hello.proto", fileDescriptor_61ef911816e0a8ce) }$/;"	f
init	pkg/util/xtest/proto/testproto/hello.pb.go	/^func init() {$/;"	f
init	pkg/util/xtime/rash_timer.go	/^func init() {$/;"	f
init	pkg/worker/xjob/job.go	/^func init() {$/;"	f
init	pkg/xlog/config.go	/^func init() {$/;"	f
init	tools/ast_codes/main.go	/^func init() {$/;"	f
initHooks	pkg/application/application.go	/^func (app *Application) initHooks(hookKeys ...uint32) {$/;"	f
initJob	example/job/main.go	/^func (e *Engine) initJob() error {$/;"	f
initPrefix	cmd/jupiter/protoc/server.go	/^func (server *GRPCServerGen) initPrefix() (err error) {$/;"	f
initResolver	example/grpc/etcd/etcd-client/main.go	/^func (eng *Engine) initResolver() error {$/;"	f
initSentinel	example/all/internal/app/demo/engine.go	/^func (eng *Engine) initSentinel() error {$/;"	f
initTestData	example/config/onelineByEtcdv3/main.go	/^func initTestData() {$/;"	f
initialize	pkg/application/application.go	/^func (app *Application) initialize() {$/;"	f
installGRPCGen	cmd/jupiter/protoc/grpc.go	/^func installGRPCGen() (err error) {$/;"	f
instances	pkg/store/gorm/instance.go	/^var instances = sync.Map{}$/;"	v
isConfigErr	pkg/store/mongox/mongo.go	/^func isConfigErr(config Config) {$/;"	f
isDevelopmentMode	pkg/util/xdebug/testing.go	/^	isDevelopmentMode = os.Getenv("JUPITER_MODE") == "dev"$/;"	v
isDisable	pkg/application/application.go	/^func (app *Application) isDisable(d Disable) bool {$/;"	f
isIPPort	pkg/registry/etcdv3/registry.go	/^func isIPPort(addr string) bool {$/;"	f
isNil	pkg/xlog/rotate/testing_test.go	/^func isNil(obtained interface{}, t testing.TB) {$/;"	f
isNilUp	pkg/xlog/rotate/testing_test.go	/^func isNilUp(obtained interface{}, t testing.TB, caller int) {$/;"	f
isPrintable	pkg/store/gorm/logger.go	/^func isPrintable(s string) bool {$/;"	f
isTestingMode	pkg/util/xdebug/testing.go	/^	isTestingMode     bool$/;"	v
istats	pkg/istats/flow_info.go	/^package istats$/;"	p
jaeger	pkg/trace/jaeger/config.go	/^package jaeger$/;"	p
job	pkg/worker/xjob/job.go	/^package job$/;"	p
jsonpbMarshaler	pkg/server/xecho/status.go	/^	jsonpbMarshaler = jsonpb.Marshaler{$/;"	v
jsonpbMarshaler	pkg/server/xgin/status.go	/^	jsonpbMarshaler = jsonpb.Marshaler{$/;"	v
jsonpbMarshaler	pkg/server/xgoframe/status.go	/^	jsonpbMarshaler = jsonpb.Marshaler{$/;"	v
jupiter	jupiter.go	/^package jupiter$/;"	p
jupiter	jupiter_option.go	/^package jupiter$/;"	p
jupiterVersion	pkg/pkg.go	/^const jupiterVersion = "0.2.0"$/;"	c
kill	pkg/signals/signals_test.go	/^func kill(sig os.Signal) {$/;"	f
leastLoaded	pkg/util/xp2c/leastloaded/least_loaded.go	/^type leastLoaded struct {$/;"	t
leastLoadedNode	pkg/util/xp2c/leastloaded/least_loaded.go	/^type leastLoadedNode struct {$/;"	t
leastloaded	pkg/util/xp2c/leastloaded/least_loaded.go	/^package leastloaded$/;"	p
leastloaded_test	pkg/util/xp2c/leastloaded/least_loaded_test.go	/^package leastloaded_test$/;"	p
lockCloser	pkg/util/xfile/lock_unix.go	/^type lockCloser struct {$/;"	t
lockCloser	pkg/util/xfile/lock_windows.go	/^type lockCloser struct {$/;"	t
lockFilename	pkg/util/xfile/lock_test.go	/^var lockFilename = flag.String("lockfile", "", "File to lock.  Non-empty value pimples child process.")$/;"	v
logInfo	pkg/xlog/rotate/lumberjack_darwin.go	/^type logInfo struct {$/;"	t
logInfo	pkg/xlog/rotate/lumberjack_linux.go	/^type logInfo struct {$/;"	t
logInfo	pkg/xlog/rotate/lumberjack_windows.go	/^type logInfo struct {$/;"	t
logSQL	pkg/store/gorm/interceptor.go	/^func logSQL(sql string, args []interface{}, containArgs bool) string {$/;"	f
loggerUnaryClientInterceptor	pkg/client/grpc/interceptor.go	/^func loggerUnaryClientInterceptor(_logger *xlog.Logger, name string, accessInterceptorLevel string) grpc.UnaryClientInterceptor {$/;"	f
loggerWrapper	pkg/xgrpclog/logger.go	/^type loggerWrapper struct {$/;"	t
lookup	pkg/conf/conf.go	/^func lookup(prefix string, target map[string]interface{}, data map[string]interface{}, sep string) {$/;"	f
lookup	pkg/util/xmap/map.go	/^func lookup(prefix string, target map[string]interface{}, data map[string]interface{}, sep string) {$/;"	f
main	cmd/jupiter/confgen/command.go	/^func main() {$/;"	f
main	cmd/jupiter/confgen/command.go	/^package main$/;"	p
main	cmd/jupiter/main.go	/^func main() {$/;"	f
main	cmd/jupiter/main.go	/^package main$/;"	p
main	example/all/cmd/demo/main.go	/^func main() {$/;"	f
main	example/all/cmd/demo/main.go	/^package main$/;"	p
main	example/build/main.go	/^func main() {$/;"	f
main	example/build/main.go	/^package main$/;"	p
main	example/client/etcd/main.go	/^func main() {$/;"	f
main	example/client/etcd/main.go	/^package main$/;"	p
main	example/client/gorm/main.go	/^func main() {$/;"	f
main	example/client/gorm/main.go	/^package main$/;"	p
main	example/client/redis/main.go	/^func main() {$/;"	f
main	example/client/redis/main.go	/^package main$/;"	p
main	example/client/rocketmq/main.go	/^func main() {$/;"	f
main	example/client/rocketmq/main.go	/^package main$/;"	p
main	example/config/onelineByEtcdv3/main.go	/^func main() {$/;"	f
main	example/config/onelineByEtcdv3/main.go	/^package main$/;"	p
main	example/config/onelineByFile/main.go	/^func main() {$/;"	f
main	example/config/onelineByFile/main.go	/^package main$/;"	p
main	example/config/onelineByFileWatch/main.go	/^func main() {$/;"	f
main	example/config/onelineByFileWatch/main.go	/^package main$/;"	p
main	example/config/onelineByRemoteConfig/main.go	/^func main() {$/;"	f
main	example/config/onelineByRemoteConfig/main.go	/^package main$/;"	p
main	example/config/onelineByRemoteConfigWatch/main.go	/^func main() {$/;"	f
main	example/config/onelineByRemoteConfigWatch/main.go	/^package main$/;"	p
main	example/config/onelinebyApollo/main.go	/^func main() {$/;"	f
main	example/config/onelinebyApollo/main.go	/^package main$/;"	p
main	example/config/structByFile/main.go	/^func main() {$/;"	f
main	example/config/structByFile/main.go	/^package main$/;"	p
main	example/config/structByFileWatch/main.go	/^func main() {$/;"	f
main	example/config/structByFileWatch/main.go	/^package main$/;"	p
main	example/config/structByRemoteConfigWatch/main.go	/^func main() {$/;"	f
main	example/config/structByRemoteConfigWatch/main.go	/^package main$/;"	p
main	example/config/structByremoteConfig/main.go	/^func main() {$/;"	f
main	example/config/structByremoteConfig/main.go	/^package main$/;"	p
main	example/grpc/direct/direct-client/main.go	/^func main() {$/;"	f
main	example/grpc/direct/direct-client/main.go	/^package main$/;"	p
main	example/grpc/direct/direct-server/main.go	/^func main() {$/;"	f
main	example/grpc/direct/direct-server/main.go	/^package main$/;"	p
main	example/grpc/etcd/etcd-client/main.go	/^func main() {$/;"	f
main	example/grpc/etcd/etcd-client/main.go	/^package main$/;"	p
main	example/grpc/etcd/etcd-server/main.go	/^func main() {$/;"	f
main	example/grpc/etcd/etcd-server/main.go	/^package main$/;"	p
main	example/helloworld/main.go	/^func main() {$/;"	f
main	example/helloworld/main.go	/^package main$/;"	p
main	example/http/all/main.go	/^func main() {$/;"	f
main	example/http/all/main.go	/^package main$/;"	p
main	example/http/gin-swagger/main.go	/^func main() {$/;"	f
main	example/http/gin-swagger/main.go	/^package main$/;"	p
main	example/http/gin/main.go	/^func main() {$/;"	f
main	example/http/gin/main.go	/^package main$/;"	p
main	example/http/gin_ws_cors/main.go	/^func main() {$/;"	f
main	example/http/gin_ws_cors/main.go	/^package main$/;"	p
main	example/http/gofame/main.go	/^func main() {$/;"	f
main	example/http/gofame/main.go	/^package main$/;"	p
main	example/http/register/main.go	/^func main() {$/;"	f
main	example/http/register/main.go	/^package main$/;"	p
main	example/http/simple/main.go	/^func main() {$/;"	f
main	example/http/simple/main.go	/^package main$/;"	p
main	example/job/main.go	/^func main() {$/;"	f
main	example/job/main.go	/^package main$/;"	p
main	example/logger/command/main.go	/^func main() {$/;"	f
main	example/logger/command/main.go	/^package main$/;"	p
main	example/logger/file/main.go	/^func main() {$/;"	f
main	example/logger/file/main.go	/^package main$/;"	p
main	example/logger/fileByWatch/main.go	/^func main() {$/;"	f
main	example/logger/fileByWatch/main.go	/^package main$/;"	p
main	example/monitor/main.go	/^func main() {$/;"	f
main	example/monitor/main.go	/^package main$/;"	p
main	example/remoteconfig/main.go	/^func main() {$/;"	f
main	example/remoteconfig/main.go	/^package main$/;"	p
main	example/sentinel/main.go	/^func main() {$/;"	f
main	example/sentinel/main.go	/^package main$/;"	p
main	example/simple/main.go	/^func main() {$/;"	f
main	example/simple/main.go	/^package main$/;"	p
main	example/startup/main.go	/^func main() {$/;"	f
main	example/startup/main.go	/^package main$/;"	p
main	example/store/mongo/main.go	/^func main() {$/;"	f
main	example/store/mongo/main.go	/^package main$/;"	p
main	example/trace/main.go	/^func main() {$/;"	f
main	example/trace/main.go	/^package main$/;"	p
main	example/worker/cron/main.go	/^func main() {$/;"	f
main	example/worker/cron/main.go	/^package main$/;"	p
main	tools/ast_codes/main.go	/^func main() {$/;"	f
main	tools/ast_codes/main.go	/^package main$/;"	p
manager	pkg/datasource/manager/manager.go	/^package manager$/;"	p
marshalAny	pkg/ecode/status.go	/^func marshalAny(obj interface{}) (*any.Any, error) {$/;"	f
marshalAnyProtoMessage	pkg/ecode/status.go	/^func marshalAnyProtoMessage(pb proto.Message) (*any.Any, error) {$/;"	f
max	pkg/xlog/rotate/lumberjack_darwin.go	/^func (l *Logger) max() int64 {$/;"	f
max	pkg/xlog/rotate/lumberjack_linux.go	/^func (l *Logger) max() int64 {$/;"	f
max	pkg/xlog/rotate/lumberjack_windows.go	/^func (l *Logger) max() int64 {$/;"	f
maxCustomizeCode	pkg/ecode/code.go	/^	maxCustomizeCode = 9999$/;"	v
mdKey	pkg/imeta/context.go	/^type mdKey struct{}$/;"	t
megabyte	pkg/xlog/rotate/lumberjack_darwin.go	/^	megabyte = 1024 * 1024$/;"	v
megabyte	pkg/xlog/rotate/lumberjack_linux.go	/^	megabyte = 1024 * 1024$/;"	v
megabyte	pkg/xlog/rotate/lumberjack_windows.go	/^	megabyte = 1024 * 1024$/;"	v
metric	pkg/metric/counter.go	/^package metric$/;"	p
metric	pkg/metric/gauge.go	/^package metric$/;"	p
metric	pkg/metric/histogram.go	/^package metric$/;"	p
metric	pkg/metric/metric.go	/^package metric$/;"	p
metric	pkg/metric/summary.go	/^package metric$/;"	p
metricInterceptor	pkg/store/gorm/interceptor.go	/^func metricInterceptor(dsn *DSN, op string, options *Config) func(Handler) Handler {$/;"	f
metricServerInterceptor	pkg/server/xecho/middleware.go	/^func metricServerInterceptor() echo.MiddlewareFunc {$/;"	f
metricServerInterceptor	pkg/server/xgin/middleware.go	/^func metricServerInterceptor() gin.HandlerFunc {$/;"	f
metricServerInterceptor	pkg/server/xgoframe/middleware.go	/^func metricServerInterceptor() ghttp.HandlerFunc {$/;"	f
metricStreamClientInterceptor	pkg/client/grpc/interceptor.go	/^func metricStreamClientInterceptor(name string) func(ctx context.Context, desc *grpc.StreamDesc, cc *grpc.ClientConn, method string, streamer grpc.Streamer, opts ...grpc.CallOption) (grpc.ClientStream, error) {$/;"	f
metricUnaryClientInterceptor	pkg/client/grpc/interceptor.go	/^func metricUnaryClientInterceptor(name string) func(ctx context.Context, method string, req, reply interface{}, cc *grpc.ClientConn, invoker grpc.UnaryInvoker, opts ...grpc.CallOption) error {$/;"	f
mill	pkg/xlog/rotate/lumberjack_darwin.go	/^func (l *Logger) mill() {$/;"	f
mill	pkg/xlog/rotate/lumberjack_linux.go	/^func (l *Logger) mill() {$/;"	f
mill	pkg/xlog/rotate/lumberjack_windows.go	/^func (l *Logger) mill() {$/;"	f
millRun	pkg/xlog/rotate/lumberjack_darwin.go	/^func (l *Logger) millRun() {$/;"	f
millRun	pkg/xlog/rotate/lumberjack_linux.go	/^func (l *Logger) millRun() {$/;"	f
millRun	pkg/xlog/rotate/lumberjack_windows.go	/^func (l *Logger) millRun() {$/;"	f
millRunOnce	pkg/xlog/rotate/lumberjack_darwin.go	/^func (l *Logger) millRunOnce() error {$/;"	f
millRunOnce	pkg/xlog/rotate/lumberjack_linux.go	/^func (l *Logger) millRunOnce() error {$/;"	f
millRunOnce	pkg/xlog/rotate/lumberjack_windows.go	/^func (l *Logger) millRunOnce() error {$/;"	f
mockServer	pkg/conf/datasource/apollo/mockserver/mockserver.go	/^type mockServer struct {$/;"	t
mockServer	pkg/datasource/apollo/mockserver/mockserver.go	/^type mockServer struct {$/;"	t
mockserver	pkg/conf/datasource/apollo/mockserver/mockserver.go	/^package mockserver$/;"	p
mockserver	pkg/datasource/apollo/mockserver/mockserver.go	/^package mockserver$/;"	p
mongox	pkg/store/mongox/init.go	/^package mongox$/;"	p
mongox	pkg/store/mongox/instance.go	/^package mongox$/;"	p
mongox	pkg/store/mongox/mongo.go	/^package mongox$/;"	p
mongox	pkg/store/mongox/option.go	/^package mongox$/;"	p
mongox	pkg/store/mongox/option_test.go	/^package mongox$/;"	p
monitor	pkg/store/gorm/init.go	/^func monitor() {$/;"	f
mu	pkg/util/xrand/init.go	/^	mu sync.Mutex$/;"	v
myfield	pkg/util/xstring/json.go	/^type myfield struct{ reflect2.StructField }$/;"	t
namedJobRunner	pkg/application/application_test.go	/^type namedJobRunner struct{}$/;"	t
new	cmd/jupiter/new/new-packr.go	/^package new$/;"	p
new	cmd/jupiter/new/new_cmd.go	/^package new$/;"	p
new	cmd/jupiter/new/option.go	/^package new$/;"	p
new	cmd/jupiter/new/tools.go	/^package new$/;"	p
new	cmd/jupiter/new/usage.go	/^package new$/;"	p
newBuilder	pkg/client/grpc/balancer/p2c/least_loaded.go	/^func newBuilder() balancer.Builder {$/;"	f
newClient	pkg/client/etcdv3/client.go	/^func newClient(config *Config) (*Client, error) {$/;"	f
newCron	pkg/worker/xcron/cron.go	/^func newCron(config *Config) *Cron {$/;"	f
newETCDRegistry	pkg/registry/etcdv3/registry.go	/^func newETCDRegistry(config *Config) (*etcdv3Registry, error) {$/;"	f
newETCDXcron	pkg/worker/xcron/config.go	/^func newETCDXcron(config *Config) {$/;"	f
newEndpoints	pkg/registry/endpoint.go	/^func newEndpoints() *Endpoints {$/;"	f
newGRPCClient	pkg/client/grpc/client.go	/^func newGRPCClient(config *Config) *grpc.ClientConn {$/;"	f
newLogger	pkg/xlog/log.go	/^func newLogger(config *Config) *Logger {$/;"	f
newRotate	pkg/xlog/rotate.go	/^func newRotate(config *Config) io.Writer {$/;"	f
newSWRPicker	pkg/client/grpc/balancer/swr.go	/^func newSWRPicker(info PickerBuildInfo) *swrPicker {$/;"	f
newServer	pkg/governor/server.go	/^func newServer(config *Config) *Server {$/;"	f
newServer	pkg/server/xecho/server.go	/^func newServer(config *Config) (*Server, error) {$/;"	f
newServer	pkg/server/xgin/server.go	/^func newServer(config *Config) *Server {$/;"	f
newServer	pkg/server/xgoframe/server.go	/^func newServer(config *Config) *Server {$/;"	f
newServer	pkg/server/xgrpc/server.go	/^func newServer(config *Config) (*Server, error) {$/;"	f
newSession	pkg/store/mongox/mongo.go	/^func newSession(config Config) *mongo.Client {$/;"	f
newTimer	pkg/util/xtime/rash_timer.go	/^func (w *rashTimer) newTimer(when time.Duration, period time.Duration,$/;"	f
nodes	tools/ast_codes/main.go	/^var nodes = make(map[string][]*Node)$/;"	v
nonamedJobRunner	pkg/application/application_test.go	/^type nonamedJobRunner struct{}$/;"	t
normalizeMessage	pkg/xlog/log.go	/^func normalizeMessage(msg string) string {$/;"	f
notNil	pkg/xlog/rotate/testing_test.go	/^func notNil(obtained interface{}, t testing.TB) {$/;"	f
notNilUp	pkg/xlog/rotate/testing_test.go	/^func notNilUp(obtained interface{}, t testing.TB, caller int) {$/;"	f
notification	pkg/conf/datasource/apollo/mockserver/mockserver.go	/^type notification struct {$/;"	t
notification	pkg/datasource/apollo/mockserver/mockserver.go	/^type notification struct {$/;"	t
notifyChanges	pkg/conf/conf.go	/^func (c *Configuration) notifyChanges(changes map[string]interface{}) {$/;"	f
nowInMs	pkg/util/xtime/time_ticker.go	/^var nowInMs = uint64(0)$/;"	v
numWriters	pkg/util/xbuffer/unbounded_test.go	/^	numWriters = 10$/;"	c
numWrites	pkg/util/xbuffer/unbounded_test.go	/^	numWrites  = 10$/;"	c
numericPlaceHolderRegexp	pkg/store/gorm/logger.go	/^	numericPlaceHolderRegexp = regexp.MustCompile(`\\$\\d+`)$/;"	v
oldLogFiles	pkg/xlog/rotate/lumberjack_darwin.go	/^func (l *Logger) oldLogFiles() ([]logInfo, error) {$/;"	f
oldLogFiles	pkg/xlog/rotate/lumberjack_linux.go	/^func (l *Logger) oldLogFiles() ([]logInfo, error) {$/;"	f
oldLogFiles	pkg/xlog/rotate/lumberjack_windows.go	/^func (l *Logger) oldLogFiles() ([]logInfo, error) {$/;"	f
onTick	pkg/util/xtime/rash_timer.go	/^func (w *rashTimer) onTick() {$/;"	f
onceTest	pkg/util/xdebug/testing.go	/^var onceTest = sync.Once{}$/;"	v
openDB	example/client/gorm/main.go	/^func openDB() error {$/;"	f
openExistingOrNew	pkg/xlog/rotate/lumberjack_darwin.go	/^func (l *Logger) openExistingOrNew(writeLen int) error {$/;"	f
openExistingOrNew	pkg/xlog/rotate/lumberjack_linux.go	/^func (l *Logger) openExistingOrNew(writeLen int) error {$/;"	f
openExistingOrNew	pkg/xlog/rotate/lumberjack_windows.go	/^func (l *Logger) openExistingOrNew(writeLen int) error {$/;"	f
openNew	pkg/xlog/rotate/lumberjack_darwin.go	/^func (l *Logger) openNew() error {$/;"	f
openNew	pkg/xlog/rotate/lumberjack_linux.go	/^func (l *Logger) openNew() error {$/;"	f
openNew	pkg/xlog/rotate/lumberjack_windows.go	/^func (l *Logger) openNew() error {$/;"	f
option	cmd/jupiter/protoc/option.go	/^	option Option$/;"	v
osStat	pkg/xlog/rotate/lumberjack_darwin.go	/^	osStat = os.Stat$/;"	v
osStat	pkg/xlog/rotate/lumberjack_linux.go	/^	osStat = os.Stat$/;"	v
osStat	pkg/xlog/rotate/lumberjack_windows.go	/^	osStat = os.Stat$/;"	v
os_Chown	pkg/xlog/rotate/chown_linux.go	/^var os_Chown = os.Chown$/;"	v
p2c	pkg/client/grpc/balancer/p2c/least_loaded.go	/^package p2c$/;"	p
p2cPicker	pkg/client/grpc/balancer/p2c/least_loaded.go	/^type p2cPicker struct {$/;"	t
p2cPickerBuilder	pkg/client/grpc/balancer/p2c/least_loaded.go	/^type p2cPickerBuilder struct{}$/;"	t
p2c_test	pkg/client/grpc/balancer/p2c/least_loaded_test.go	/^package p2c_test$/;"	p
packages	tools/ast_codes/main.go	/^var packages = []string{$/;"	v
packrd	cmd/jupiter/new/packrd/packed-packr.go	/^package packrd$/;"	p
panicDetail	pkg/xlog/log.go	/^func panicDetail(msg string, fields ...Field) {$/;"	f
parseBuildInfo	pkg/client/grpc/balancer/swr.go	/^func (p *swrPicker) parseBuildInfo(info PickerBuildInfo) {$/;"	f
parseDSNParams	pkg/store/gorm/dsn.go	/^func parseDSNParams(cfg *DSN, params string) (err error) {$/;"	f
parseDateWith	pkg/util/xcast/interface.go	/^func parseDateWith(s string, dates []string) (d time.Time, e error) {$/;"	f
parseFlags	pkg/application/application.go	/^func (app *Application) parseFlags() error {$/;"	f
parseProtoFile	cmd/jupiter/protoc/server.go	/^func (server *GRPCServerGen) parseProtoFile(protoFilePath string) (err error) {$/;"	f
parseTmpl	cmd/jupiter/new/tools.go	/^func parseTmpl(tmpl string) ([]byte, error) {$/;"	f
pkg	pkg/env.go	/^package pkg$/;"	p
pkg	pkg/pkg.go	/^package pkg$/;"	p
prefixAndExt	pkg/xlog/rotate/lumberjack_darwin.go	/^func (l *Logger) prefixAndExt() (prefix, ext string) {$/;"	f
prefixAndExt	pkg/xlog/rotate/lumberjack_linux.go	/^func (l *Logger) prefixAndExt() (prefix, ext string) {$/;"	f
prefixAndExt	pkg/xlog/rotate/lumberjack_windows.go	/^func (l *Logger) prefixAndExt() (prefix, ext string) {$/;"	f
printBanner	pkg/application/application.go	/^func (app *Application) printBanner() error {$/;"	f
printConfig	example/config/onelineByEtcdv3/main.go	/^func (s *Engine) printConfig() error {$/;"	f
printConfig	example/config/onelineByFile/main.go	/^func (s *Engine) printConfig() error {$/;"	f
printConfig	example/config/onelinebyApollo/main.go	/^func (s *Engine) printConfig() error {$/;"	f
printConfig	example/config/structByFile/main.go	/^func (s *Engine) printConfig() error {$/;"	f
printLogger	example/logger/command/main.go	/^func (s *Engine) printLogger() error {$/;"	f
printLogger	example/logger/file/main.go	/^func (s *Engine) printLogger() error {$/;"	f
printLogger	example/logger/fileByWatch/main.go	/^func (s *Engine) printLogger() error {$/;"	f
produceResultStr	pkg/client/rocketmq/interceptor.go	/^func produceResultStr(result primitive.SendStatus) string {$/;"	f
producerDefaultInterceptor	pkg/client/rocketmq/interceptor.go	/^func producerDefaultInterceptor(producer *Producer) primitive.Interceptor {$/;"	f
producerMDInterceptor	pkg/client/rocketmq/interceptor.go	/^func producerMDInterceptor(producer *Producer) primitive.Interceptor {$/;"	f
producerShadowInterceptor	pkg/client/rocketmq/interceptor.go	/^func producerShadowInterceptor(producer *Producer, config Shadow) primitive.Interceptor {$/;"	f
project	cmd/jupiter/new/option.go	/^	project            ProjectInfo$/;"	v
prometheusStreamServerInterceptor	pkg/server/xgrpc/interceptor.go	/^func prometheusStreamServerInterceptor(srv interface{}, ss grpc.ServerStream, info *grpc.StreamServerInfo, handler grpc.StreamHandler) error {$/;"	f
prometheusUnaryServerInterceptor	pkg/server/xgrpc/interceptor.go	/^func prometheusUnaryServerInterceptor(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {$/;"	f
protoc	cmd/jupiter/protoc/grpc.go	/^package protoc$/;"	p
protoc	cmd/jupiter/protoc/option.go	/^package protoc$/;"	p
protoc	cmd/jupiter/protoc/protoc_cmd.go	/^package protoc$/;"	p
protoc	cmd/jupiter/protoc/server.go	/^package protoc$/;"	p
protoc	cmd/jupiter/protoc/tools.go	/^package protoc$/;"	p
protoc	cmd/jupiter/protoc/usage.go	/^package protoc$/;"	p
protoc	cmd/jupiter/protoc/util.go	/^package protoc$/;"	p
protoc	cmd/jupiter/protoc/util_test.go	/^package protoc$/;"	p
protocEnvCheck	cmd/jupiter/protoc/grpc.go	/^func protocEnvCheck() (err error) {$/;"	f
pushConsumerDefaultInterceptor	pkg/client/rocketmq/interceptor.go	/^func pushConsumerDefaultInterceptor(pushConsumer *PushConsumer) primitive.Interceptor {$/;"	f
pushConsumerMDInterceptor	pkg/client/rocketmq/interceptor.go	/^func pushConsumerMDInterceptor(pushConsumer *PushConsumer) primitive.Interceptor {$/;"	f
pushConsumerShadowInterceptor	pkg/client/rocketmq/interceptor.go	/^func pushConsumerShadowInterceptor(pushConsumer *PushConsumer, config Shadow) primitive.Interceptor {$/;"	f
r	pkg/util/xrand/init.go	/^	r  = rand.New(rand.NewSource(time.Now().UnixNano()))$/;"	v
randInstance	pkg/util/xstring/uuid.go	/^var randInstance *rand.Rand$/;"	v
rashTimer	pkg/util/xtime/rash_timer.go	/^type rashTimer struct {$/;"	t
read	example/store/mongo/main.go	/^func read(client *mongo.Client) {$/;"	f
recoverMiddleware	pkg/server/xecho/middleware.go	/^func recoverMiddleware(logger *xlog.Logger, slowQueryThresholdInMilli int64) echo.MiddlewareFunc {$/;"	f
recoverMiddleware	pkg/server/xgin/middleware.go	/^func recoverMiddleware(logger *xlog.Logger, slowQueryThresholdInMilli int64) gin.HandlerFunc {$/;"	f
recoverMiddleware	pkg/server/xgoframe/middleware.go	/^func recoverMiddleware(logger *xlog.Logger, slowQueryThresholdInMilli int64) ghttp.HandlerFunc {$/;"	f
recursiveLookup	pkg/util/xfile/file.go	/^func recursiveLookup(root string, pattern string, dirsLookup bool) ([]string, error) {$/;"	f
redis	pkg/client/redis/config.go	/^package redis$/;"	p
redis	pkg/client/redis/redis.go	/^package redis$/;"	p
redis	pkg/client/redis/redis_cmds.go	/^package redis$/;"	p
redis	pkg/client/redis/redis_test.go	/^package redis$/;"	p
reflush	pkg/conf/conf.go	/^func (c *Configuration) reflush(content []byte, unmarshal Unmarshaller) error {$/;"	f
regeneratePicker	pkg/client/grpc/balancer/base.go	/^func (b *baseBalancer) regeneratePicker(err error) {$/;"	f
registerBiz	pkg/registry/etcdv3/registry.go	/^func (reg *etcdv3Registry) registerBiz(ctx context.Context, info *server.ServiceInfo) error {$/;"	f
registerHandlers	pkg/governor/init.go	/^func registerHandlers() {$/;"	f
registerKey	pkg/registry/etcdv3/registry.go	/^func (reg *etcdv3Registry) registerKey(info *server.ServiceInfo) string {$/;"	f
registerMetric	pkg/registry/etcdv3/registry.go	/^func (reg *etcdv3Registry) registerMetric(ctx context.Context, info *server.ServiceInfo) error {$/;"	f
registerValue	pkg/registry/etcdv3/registry.go	/^func (reg *etcdv3Registry) registerValue(info *server.ServiceInfo) string {$/;"	f
registry	pkg/datasource/manager/manager.go	/^	registry             map[string]DataSourceCreatorFunc$/;"	v
registry	pkg/registry/endpoint.go	/^package registry$/;"	p
registry	pkg/registry/init.go	/^package registry$/;"	p
registry	pkg/registry/nop.go	/^package registry$/;"	p
registry	pkg/registry/registry.go	/^package registry$/;"	p
registryBuilder	pkg/registry/init.go	/^var registryBuilder = make(map[string]Builder)$/;"	v
remoteConfig	example/config/onelineByRemoteConfig/main.go	/^func (eng *Engine) remoteConfig() error {$/;"	f
remoteConfigWatch	example/config/onelineByRemoteConfigWatch/main.go	/^func (eng *Engine) remoteConfigWatch() error {$/;"	f
remoteConfigWatch	example/config/structByRemoteConfigWatch/main.go	/^func (eng *Engine) remoteConfigWatch() error {$/;"	f
remoteConfigWatch	example/config/structByremoteConfig/main.go	/^func (eng *Engine) remoteConfigWatch() error {$/;"	f
render	cmd/jupiter/protoc/server.go	/^func (server *GRPCServerGen) render(file *os.File, data string, rpcMeta *RPCMeta) (err error) {$/;"	f
requestJSON	pkg/server/xecho/handler_test.go	/^	requestJSON = `$/;"	v
requireWriteWorks	pkg/xlog/buffer_syncer_test.go	/^func requireWriteWorks(t testing.TB, ws zapcore.WriteSyncer) {$/;"	f
resetTimer	pkg/util/xtime/rash_timer.go	/^func (w *rashTimer) resetTimer(t *timer, when time.Duration, period time.Duration) {$/;"	f
resolver	pkg/client/grpc/resolver/resolver.go	/^package resolver$/;"	p
resolver	pkg/client/grpc/resolver/resolver_test.go	/^package resolver$/;"	p
result	pkg/conf/datasource/apollo/mockserver/mockserver.go	/^type result struct {$/;"	t
result	pkg/datasource/apollo/mockserver/mockserver.go	/^type result struct {$/;"	t
rocketmq	pkg/client/rocketmq/consumer.go	/^package rocketmq$/;"	p
rocketmq	pkg/client/rocketmq/init.go	/^package rocketmq$/;"	p
rocketmq	pkg/client/rocketmq/interceptor.go	/^package rocketmq$/;"	p
rocketmq	pkg/client/rocketmq/option.go	/^package rocketmq$/;"	p
rocketmq	pkg/client/rocketmq/producer.go	/^package rocketmq$/;"	p
rotate	pkg/xlog/rotate/chown.go	/^package rotate$/;"	p
rotate	pkg/xlog/rotate/chown_linux.go	/^package rotate$/;"	p
rotate	pkg/xlog/rotate/lumberjack_darwin.go	/^func (l *Logger) rotate() error {$/;"	f
rotate	pkg/xlog/rotate/lumberjack_darwin.go	/^package rotate$/;"	p
rotate	pkg/xlog/rotate/lumberjack_linux.go	/^func (l *Logger) rotate() error {$/;"	f
rotate	pkg/xlog/rotate/lumberjack_linux.go	/^package rotate$/;"	p
rotate	pkg/xlog/rotate/lumberjack_windows.go	/^func (l *Logger) rotate() error {$/;"	f
rotate	pkg/xlog/rotate/lumberjack_windows.go	/^package rotate$/;"	p
rotate	pkg/xlog/rotate/testing_test.go	/^package rotate$/;"	p
rotate_test	pkg/xlog/rotate/example_test.go	/^package rotate_test$/;"	p
rotate_test	pkg/xlog/rotate/rotate_test.go	/^package rotate_test$/;"	p
routes	pkg/governor/http.go	/^	routes          = []string{}$/;"	v
run	pkg/util/xtime/rash_timer.go	/^func (w *rashTimer) run() {$/;"	f
run	pkg/worker/xcron/config.go	/^func (wj wrappedJob) run() (err error) {$/;"	f
run	pkg/xlog/rotate/lumberjack_darwin.go	/^func (l *Logger) run() {$/;"	f
run	pkg/xlog/rotate/lumberjack_linux.go	/^func (l *Logger) run() {$/;"	f
runHooks	pkg/application/application.go	/^func (app *Application) runHooks(k uint32) {$/;"	f
s	example/http/gin-swagger/docs/docs.go	/^type s struct{}$/;"	t
sendTime	pkg/util/xtime/rash_timer.go	/^func sendTime(t time.Time, arg interface{}) {$/;"	f
sentinel	pkg/sentinel/config.go	/^package sentinel$/;"	p
sentinel	pkg/sentinel/init.go	/^package sentinel$/;"	p
serveGRPC	example/all/internal/app/demo/engine.go	/^func (eng *Engine) serveGRPC() error {$/;"	f
serveGRPC	example/grpc/direct/direct-server/main.go	/^func (eng *Engine) serveGRPC() error {$/;"	f
serveGRPC	example/grpc/etcd/etcd-server/main.go	/^func (eng *Engine) serveGRPC() error {$/;"	f
serveGRPC	example/monitor/main.go	/^func (eng *Engine) serveGRPC() error {$/;"	f
serveHTTP	example/all/internal/app/demo/engine.go	/^func (eng *Engine) serveHTTP() error {$/;"	f
serveHTTP	example/build/main.go	/^func (eng *Engine) serveHTTP() error {$/;"	f
serveHTTP	example/config/onelineByFileWatch/main.go	/^func (eng *Engine) serveHTTP() error {$/;"	f
serveHTTP	example/config/onelineByRemoteConfig/main.go	/^func (eng *Engine) serveHTTP() error {$/;"	f
serveHTTP	example/config/onelineByRemoteConfigWatch/main.go	/^func (eng *Engine) serveHTTP() error {$/;"	f
serveHTTP	example/config/structByFileWatch/main.go	/^func (eng *Engine) serveHTTP() error {$/;"	f
serveHTTP	example/config/structByRemoteConfigWatch/main.go	/^func (eng *Engine) serveHTTP() error {$/;"	f
serveHTTP	example/config/structByremoteConfig/main.go	/^func (eng *Engine) serveHTTP() error {$/;"	f
serveHTTP	example/helloworld/main.go	/^func (eng *Engine) serveHTTP() error {$/;"	f
serveHTTP	example/http/all/main.go	/^func (eng *Engine) serveHTTP() error {$/;"	f
serveHTTP	example/http/gin-swagger/main.go	/^func (eng *Engine) serveHTTP() error {$/;"	f
serveHTTP	example/http/gin/main.go	/^func (eng *Engine) serveHTTP() error {$/;"	f
serveHTTP	example/http/gin_ws_cors/main.go	/^func (eng *Engine) serveHTTP() error {$/;"	f
serveHTTP	example/http/gofame/main.go	/^func (eng *Engine) serveHTTP() error {$/;"	f
serveHTTP	example/http/register/main.go	/^func (eng *Engine) serveHTTP() error {$/;"	f
serveHTTP	example/http/simple/main.go	/^func (eng *Engine) serveHTTP() error {$/;"	f
serveHTTP	example/remoteconfig/main.go	/^func (eng *Engine) serveHTTP() error {$/;"	f
serveHTTP	example/store/mongo/main.go	/^func (eng *Engine) serveHTTP() error {$/;"	f
server	pkg/conf/datasource/apollo/mockserver/mockserver.go	/^var server *mockServer$/;"	v
server	pkg/datasource/apollo/mockserver/mockserver.go	/^var server *mockServer$/;"	v
server	pkg/server/init.go	/^package server$/;"	p
server	pkg/server/server.go	/^package server$/;"	p
serviceKinds	pkg/constant/service.go	/^var serviceKinds = make(map[ServiceKind]string)$/;"	v
setLogger	example/http/all/main.go	/^func (eng *Engine) setLogger() error {$/;"	f
setup	pkg/conf/datasource/apollo/apollo_test.go	/^func setup() {$/;"	f
setup	pkg/datasource/apollo/apollo_test.go	/^func setup() {$/;"	f
shutdownSignals	pkg/signals/signal_posix.go	/^var shutdownSignals = []os.Signal{syscall.SIGQUIT, os.Interrupt, syscall.SIGTERM}$/;"	v
shutdownSignals	pkg/signals/signal_windows.go	/^var shutdownSignals = []os.Signal{syscall.SIGQUIT, os.Interrupt}$/;"	v
signals	pkg/signals/signal_posix.go	/^package signals$/;"	p
signals	pkg/signals/signal_windows.go	/^package signals$/;"	p
signals	pkg/signals/signals.go	/^package signals$/;"	p
signals	pkg/signals/signals_test.go	/^package signals$/;"	p
skipIfStillRunning	pkg/worker/xcron/intercept.go	/^func skipIfStillRunning(logger *xlog.Logger) JobWrapper {$/;"	f
slash	pkg/server/xgin/middleware.go	/^	slash     = []byte("\/")$/;"	v
source	pkg/server/xgin/middleware.go	/^func source(lines [][]byte, n int) []byte {$/;"	f
spawn	pkg/util/xfile/lock_test.go	/^func spawn(prog, filename string) ([]byte, error) {$/;"	f
spbStatus	pkg/ecode/status.go	/^type spbStatus struct {$/;"	t
sprint	pkg/util/xcolor/string_darwin.go	/^func sprint(colorValue int, msg string, arg ...interface{}) string {$/;"	f
sprint	pkg/util/xcolor/string_linux.go	/^func sprint(colorValue int, msg string, arg ...interface{}) string {$/;"	f
sprint	pkg/util/xcolor/string_windows.go	/^func sprint(msg string, arg ...interface{}) string {$/;"	f
sprint	pkg/xgrpclog/logger.go	/^func sprint(args ...interface{}) string {$/;"	f
sprintf	pkg/xgrpclog/logger.go	/^func sprintf(format string, args ...interface{}) string {$/;"	f
sprintf	pkg/xlog/log.go	/^func sprintf(template string, args ...interface{}) string {$/;"	f
sqlRegexp	pkg/store/gorm/logger.go	/^	sqlRegexp                = regexp.MustCompile(`\\?`)$/;"	v
stack	pkg/server/xgin/middleware.go	/^func stack(skip int) []byte {$/;"	f
startGRPCServer	example/startup/main.go	/^func startGRPCServer() server.Server {$/;"	f
startHTTPServer	example/simple/main.go	/^func startHTTPServer() server.Server {$/;"	f
startHTTPServer	example/startup/main.go	/^func startHTTPServer() server.Server {$/;"	f
startJobs	example/all/internal/app/demo/engine.go	/^func (eng *Engine) startJobs() error {$/;"	f
startJobs	example/worker/cron/main.go	/^func (eng *Engine) startJobs() error {$/;"	f
startJobs	pkg/application/application.go	/^func (app *Application) startJobs() error {$/;"	f
startServer	pkg/client/grpc/common_test.go	/^func startServer(addr, name string) (net.Listener, *grpc.Server) {$/;"	f
startServers	pkg/application/application.go	/^func (app *Application) startServers() error {$/;"	f
startTest	example/client/gorm/main.go	/^func startTest() *xcron.Cron {$/;"	f
startTestServers	pkg/client/grpc/balancer/p2c/least_loaded_test.go	/^func startTestServers(count int) (_ *test, err error) {$/;"	f
startTime	pkg/pkg.go	/^	startTime string$/;"	v
startWorker	example/startup/main.go	/^func startWorker() worker.Worker {$/;"	f
startWorkers	pkg/application/application.go	/^func (app *Application) startWorkers() error {$/;"	f
statusErr	pkg/server/xecho/status.go	/^type statusErr struct {$/;"	t
statusErr	pkg/server/xgin/status.go	/^type statusErr struct {$/;"	t
statusErr	pkg/server/xgoframe/status.go	/^type statusErr struct {$/;"	t
statusFromString	pkg/server/xecho/status.go	/^func statusFromString(s string) (*statusErr, bool) {$/;"	f
statusFromString	pkg/server/xgin/status.go	/^func statusFromString(s string) (*statusErr, bool) {$/;"	f
statusFromString	pkg/server/xgoframe/status.go	/^func statusFromString(s string) (*statusErr, bool) {$/;"	f
statusMSDefault	pkg/server/xecho/status.go	/^	statusMSDefault *rstatus.Status$/;"	v
statusMSDefault	pkg/server/xgin/status.go	/^	statusMSDefault *rstatus.Status$/;"	v
statusMSDefault	pkg/server/xgoframe/status.go	/^	statusMSDefault *rstatus.Status$/;"	v
statusText	pkg/server/xgin/const.go	/^var statusText = map[int]string{$/;"	v
stopInfo	pkg/application/application_test.go	/^type stopInfo struct {$/;"	t
substr	pkg/util/xfile/file.go	/^func substr(s string, pos, length int) string {$/;"	f
summaryVec	pkg/metric/summary.go	/^type summaryVec struct {$/;"	t
swaggerInfo	example/http/gin-swagger/docs/docs.go	/^type swaggerInfo struct {$/;"	t
swrPicker	pkg/client/grpc/balancer/swr.go	/^type swrPicker struct {$/;"	t
swrPickerBuilder	pkg/client/grpc/balancer/swr.go	/^type swrPickerBuilder struct{}$/;"	t
teardown	pkg/conf/datasource/apollo/apollo_test.go	/^func teardown() {$/;"	f
teardown	pkg/datasource/apollo/apollo_test.go	/^func teardown() {$/;"	f
template	cmd/jupiter/protoc/template/server_tmpl.go	/^package template$/;"	p
test	pkg/client/grpc/balancer/p2c/least_loaded_test.go	/^type test struct {$/;"	t
testDB	example/client/gorm/main.go	/^func testDB() error {$/;"	f
testRun	pkg/util/xgo/parallel_test.go	/^func testRun(t *testing.T) {$/;"	f
testRunLimit	pkg/util/xgo/parallel_test.go	/^func testRunLimit(t *testing.T) {$/;"	f
testRunLimitWithConcurrencyGreaterThanPassedFunctions	pkg/util/xgo/parallel_test.go	/^func testRunLimitWithConcurrencyGreaterThanPassedFunctions(t *testing.T) {$/;"	f
testRunLimitWithNegativeConcurrencyValue	pkg/util/xgo/parallel_test.go	/^func testRunLimitWithNegativeConcurrencyValue(t *testing.T) {$/;"	f
testServer	pkg/application/application_test.go	/^type testServer struct {$/;"	t
testServer	pkg/client/grpc/balancer/p2c/least_loaded_test.go	/^type testServer struct {$/;"	t
testWorker	pkg/application/application_test.go	/^type testWorker struct {$/;"	t
testproto	pkg/util/xtest/proto/testproto/hello.pb.go	/^package testproto$/;"	p
timeBase	pkg/util/xstring/uuid.go	/^var timeBase = time.Date(1582, time.October, 15, 0, 0, 0, 0, time.UTC).Unix()$/;"	v
timeEncoder	pkg/xlog/log.go	/^func timeEncoder(t time.Time, enc zapcore.PrimitiveArrayEncoder) {$/;"	f
timeFormat	pkg/server/xgin/middleware.go	/^func timeFormat(t time.Time) string {$/;"	f
timeFromName	pkg/xlog/rotate/lumberjack_darwin.go	/^func (l *Logger) timeFromName(filename, prefix, ext string) (time.Time, error) {$/;"	f
timeFromName	pkg/xlog/rotate/lumberjack_linux.go	/^func (l *Logger) timeFromName(filename, prefix, ext string) (time.Time, error) {$/;"	f
timeFromName	pkg/xlog/rotate/lumberjack_windows.go	/^func (l *Logger) timeFromName(filename, prefix, ext string) (time.Time, error) {$/;"	f
timeout	pkg/util/xgo/parallel_test.go	/^	timeout = time.After(2 * time.Second)$/;"	v
timeoutUnaryClientInterceptor	pkg/client/grpc/interceptor.go	/^func timeoutUnaryClientInterceptor(_logger *xlog.Logger, timeout time.Duration, slowThreshold time.Duration) grpc.UnaryClientInterceptor {$/;"	f
timer	pkg/util/xtime/rash_timer.go	/^type timer struct {$/;"	t
trace	pkg/trace/carrier.go	/^package trace$/;"	p
trace	pkg/trace/const.go	/^package trace$/;"	p
trace	pkg/trace/init.go	/^package trace$/;"	p
trace	pkg/trace/trace.go	/^package trace$/;"	p
traceInterceptor	pkg/store/gorm/interceptor.go	/^func traceInterceptor(dsn *DSN, op string, options *Config) func(Handler) Handler {$/;"	f
traceServerInterceptor	pkg/server/xecho/middleware.go	/^func traceServerInterceptor() echo.MiddlewareFunc {$/;"	f
traceServerInterceptor	pkg/server/xgin/middleware.go	/^func traceServerInterceptor() gin.HandlerFunc {$/;"	f
traceServerInterceptor	pkg/server/xgoframe/middleware.go	/^func traceServerInterceptor() ghttp.HandlerFunc {$/;"	f
traceStreamServerInterceptor	pkg/server/xgrpc/interceptor.go	/^func traceStreamServerInterceptor(srv interface{}, ss grpc.ServerStream, info *grpc.StreamServerInfo, handler grpc.StreamHandler) error {$/;"	f
traceTest	example/trace/main.go	/^func traceTest() {$/;"	f
traceUnaryClientInterceptor	pkg/client/grpc/interceptor.go	/^func traceUnaryClientInterceptor() grpc.UnaryClientInterceptor {$/;"	f
traceUnaryServerInterceptor	pkg/server/xgrpc/interceptor.go	/^func traceUnaryServerInterceptor(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {$/;"	f
trace_test	pkg/trace/trace_example_test.go	/^package trace_test$/;"	p
tracerKey	pkg/xlog/trace.go	/^type tracerKey struct{}$/;"	t
traverse	pkg/conf/conf.go	/^func (c *Configuration) traverse(sep string) map[string]interface{} {$/;"	f
traverse	pkg/util/xmap/map.go	/^func (flat *FlatMap) traverse(sep string) map[string]interface{} {$/;"	f
try	pkg/util/xgo/init.go	/^func try(fn func() error, cleaner func()) (ret error) {$/;"	f
try2	pkg/util/xgo/init.go	/^func try2(fn func(), cleaner func()) (ret error) {$/;"	f
tvn_bits	pkg/util/xtime/rash_timer.go	/^	tvn_bits uint64 = 6$/;"	c
tvn_mask	pkg/util/xtime/rash_timer.go	/^	tvn_mask uint64 = 63  \/\/ tvn_size - 1$/;"	c
tvn_size	pkg/util/xtime/rash_timer.go	/^	tvn_size uint64 = 64  \/\/ 1 << tvn_bits$/;"	c
tvr_bits	pkg/util/xtime/rash_timer.go	/^	tvr_bits uint64 = 8$/;"	c
tvr_mask	pkg/util/xtime/rash_timer.go	/^	tvr_mask uint64 = 255 \/\/ tvr_size -1$/;"	c
tvr_size	pkg/util/xtime/rash_timer.go	/^	tvr_size uint64 = 256 \/\/ 1 << tvr_bits$/;"	c
unregister	pkg/registry/etcdv3/registry.go	/^func (reg *etcdv3Registry) unregister(ctx context.Context, key string) error {$/;"	f
updateAddrList	pkg/registry/etcdv3/registry.go	/^func updateAddrList(al *registry.Endpoints, prefix, scheme string, kvs ...*mvccpb.KeyValue) {$/;"	f
updateConfig	pkg/conf/datasource/http/yasee.go	/^func (y *yaseeDataSource) updateConfig(data string, version int64) {$/;"	f
updateConfig	pkg/datasource/http/yasee.go	/^func (y *yaseeDataSource) updateConfig(data string, version int64) {$/;"	f
waitSignals	pkg/application/application.go	/^func (app *Application) waitSignals() {$/;"	f
wantReads	pkg/util/xbuffer/unbounded_test.go	/^var wantReads []int$/;"	v
watch	pkg/conf/datasource/etcdv3/etcdv3.go	/^func (s *etcdv3DataSource) watch() {$/;"	f
watch	pkg/conf/datasource/file/file.go	/^func (fp *fileDataSource) watch() {$/;"	f
watch	pkg/conf/datasource/http/yasee.go	/^func (y *yaseeDataSource) watch() {$/;"	f
watch	pkg/datasource/etcdv3/etcdv3.go	/^func (s *etcdv3DataSource) watch() {$/;"	f
watch	pkg/datasource/file/file.go	/^func (fp *fileDataSource) watch() {$/;"	f
watch	pkg/datasource/http/yasee.go	/^func (y *yaseeDataSource) watch() {$/;"	f
worker	pkg/worker/worker.go	/^package worker$/;"	p
wrappedJob	pkg/worker/xcron/config.go	/^type wrappedJob struct {$/;"	t
wrappedLogger	pkg/worker/xcron/config.go	/^type wrappedLogger struct {$/;"	t
write	example/store/mongo/main.go	/^func write(client *mongo.Client) {$/;"	f
write	pkg/xlog/rotate/lumberjack_darwin.go	/^func (l *Logger) write(p []byte) (n int, err error) {$/;"	f
write	pkg/xlog/rotate/lumberjack_linux.go	/^func (l *Logger) write(p []byte) (n int, err error) {$/;"	f
xattr	pkg/util/xattr/attr.go	/^package xattr$/;"	p
xattr	pkg/util/xattr/attr_test.go	/^package xattr$/;"	p
xbuffer	pkg/util/xbuffer/unbounded.go	/^package xbuffer$/;"	p
xbuffer	pkg/util/xbuffer/unbounded_test.go	/^package xbuffer$/;"	p
xcast	pkg/util/xcast/decode.go	/^package xcast$/;"	p
xcast	pkg/util/xcast/decode_test.go	/^package xcast$/;"	p
xcast	pkg/util/xcast/interface.go	/^package xcast$/;"	p
xcast	pkg/util/xcast/interface_test.go	/^package xcast$/;"	p
xcolor	pkg/util/xcolor/string_darwin.go	/^package xcolor$/;"	p
xcolor	pkg/util/xcolor/string_linux.go	/^package xcolor$/;"	p
xcolor	pkg/util/xcolor/string_windows.go	/^package xcolor$/;"	p
xcolor	pkg/util/xcolor/util.go	/^package xcolor$/;"	p
xcolor	pkg/util/xcolor/xcolor_test.go	/^package xcolor$/;"	p
xcron	pkg/worker/xcron/config.go	/^package xcron$/;"	p
xcron	pkg/worker/xcron/cron.go	/^package xcron$/;"	p
xcron	pkg/worker/xcron/intercept.go	/^package xcron$/;"	p
xcycle	pkg/util/xcycle/lifecycle.go	/^package xcycle$/;"	p
xcycle	pkg/util/xcycle/lifecycle_test.go	/^package xcycle$/;"	p
xdebug	pkg/util/xdebug/debug.go	/^package xdebug$/;"	p
xdebug	pkg/util/xdebug/print.go	/^package xdebug$/;"	p
xdebug	pkg/util/xdebug/testing.go	/^package xdebug$/;"	p
xdefer	pkg/util/xdefer/stack.go	/^package xdefer$/;"	p
xdefer	pkg/util/xdefer/stack_test.go	/^package xdefer$/;"	p
xecho	pkg/server/xecho/config.go	/^package xecho$/;"	p
xecho	pkg/server/xecho/const.go	/^package xecho$/;"	p
xecho	pkg/server/xecho/error.go	/^package xecho$/;"	p
xecho	pkg/server/xecho/handler.go	/^package xecho$/;"	p
xecho	pkg/server/xecho/handler_test.go	/^package xecho$/;"	p
xecho	pkg/server/xecho/middleware.go	/^package xecho$/;"	p
xecho	pkg/server/xecho/server.go	/^package xecho$/;"	p
xecho	pkg/server/xecho/status.go	/^package xecho$/;"	p
xfile	pkg/util/xfile/dir.go	/^package xfile$/;"	p
xfile	pkg/util/xfile/file.go	/^package xfile$/;"	p
xfile	pkg/util/xfile/file_test.go	/^package xfile$/;"	p
xfile	pkg/util/xfile/filestat_posix.go	/^package xfile$/;"	p
xfile	pkg/util/xfile/filestat_windows.go	/^package xfile$/;"	p
xfile	pkg/util/xfile/lock.go	/^package xfile$/;"	p
xfile	pkg/util/xfile/lock_test.go	/^package xfile$/;"	p
xfile	pkg/util/xfile/lock_unix.go	/^package xfile$/;"	p
xfile	pkg/util/xfile/lock_windows.go	/^package xfile$/;"	p
xgin	pkg/server/xgin/config.go	/^package xgin$/;"	p
xgin	pkg/server/xgin/const.go	/^package xgin$/;"	p
xgin	pkg/server/xgin/error.go	/^package xgin$/;"	p
xgin	pkg/server/xgin/middleware.go	/^package xgin$/;"	p
xgin	pkg/server/xgin/server.go	/^package xgin$/;"	p
xgin	pkg/server/xgin/status.go	/^package xgin$/;"	p
xgin	pkg/server/xgin/websocket.go	/^package xgin$/;"	p
xgo	pkg/util/xgo/goroutine.go	/^package xgo$/;"	p
xgo	pkg/util/xgo/init.go	/^package xgo$/;"	p
xgo	pkg/util/xgo/parallel.go	/^package xgo$/;"	p
xgo	pkg/util/xgo/parallel_test.go	/^package xgo$/;"	p
xgo	pkg/util/xgo/serial.go	/^package xgo$/;"	p
xgo	pkg/util/xgo/serial_test.go	/^package xgo$/;"	p
xgoframe	pkg/server/xgoframe/config.go	/^package xgoframe$/;"	p
xgoframe	pkg/server/xgoframe/const.go	/^package xgoframe$/;"	p
xgoframe	pkg/server/xgoframe/error.go	/^package xgoframe$/;"	p
xgoframe	pkg/server/xgoframe/middleware.go	/^package xgoframe$/;"	p
xgoframe	pkg/server/xgoframe/server.go	/^package xgoframe$/;"	p
xgoframe	pkg/server/xgoframe/status.go	/^package xgoframe$/;"	p
xgrpc	pkg/server/xgrpc/config.go	/^package xgrpc$/;"	p
xgrpc	pkg/server/xgrpc/interceptor.go	/^package xgrpc$/;"	p
xgrpc	pkg/server/xgrpc/server.go	/^package xgrpc$/;"	p
xgrpc	pkg/server/xgrpc/server_test.go	/^package xgrpc$/;"	p
xgrpc	pkg/server/xgrpc/util.go	/^package xgrpc$/;"	p
xgrpclog	pkg/xgrpclog/logger.go	/^package xgrpclog$/;"	p
xlog	pkg/xlog/api.go	/^package xlog$/;"	p
xlog	pkg/xlog/buffer_syncer.go	/^package xlog$/;"	p
xlog	pkg/xlog/buffer_syncer_bench_test.go	/^package xlog$/;"	p
xlog	pkg/xlog/buffer_syncer_test.go	/^package xlog$/;"	p
xlog	pkg/xlog/config.go	/^package xlog$/;"	p
xlog	pkg/xlog/field.go	/^package xlog$/;"	p
xlog	pkg/xlog/log.go	/^package xlog$/;"	p
xlog	pkg/xlog/rotate.go	/^package xlog$/;"	p
xlog	pkg/xlog/trace.go	/^package xlog$/;"	p
xlog_test	pkg/xlog/log_test.go	/^package xlog_test$/;"	p
xmap	pkg/util/xmap/map.go	/^package xmap$/;"	p
xmap	pkg/util/xmap/util.go	/^package xmap$/;"	p
xmap	pkg/util/xmap/util_test.go	/^package xmap$/;"	p
xnet	pkg/util/xnet/ip.go	/^package xnet$/;"	p
xnet	pkg/util/xnet/listener.go	/^package xnet$/;"	p
xnet	pkg/util/xnet/ping.go	/^package xnet$/;"	p
xnet	pkg/util/xnet/url.go	/^package xnet$/;"	p
xp2c	pkg/util/xp2c/p2c.go	/^package xp2c$/;"	p
xrand	pkg/util/xrand/init.go	/^package xrand$/;"	p
xrand	pkg/util/xrand/int.go	/^package xrand$/;"	p
xrand	pkg/util/xrand/string.go	/^package xrand$/;"	p
xregexp	pkg/util/xregexp/regexp.go	/^package xregexp$/;"	p
xstring	pkg/util/xstring/conv.go	/^package xstring$/;"	p
xstring	pkg/util/xstring/conv_test.go	/^package xstring$/;"	p
xstring	pkg/util/xstring/format.go	/^package xstring$/;"	p
xstring	pkg/util/xstring/function.go	/^package xstring$/;"	p
xstring	pkg/util/xstring/function_test.go	/^package xstring$/;"	p
xstring	pkg/util/xstring/json.go	/^package xstring$/;"	p
xstring	pkg/util/xstring/json_test.go	/^package xstring$/;"	p
xstring	pkg/util/xstring/string.go	/^package xstring$/;"	p
xstring	pkg/util/xstring/string_test.go	/^package xstring$/;"	p
xstring	pkg/util/xstring/uuid.go	/^package xstring$/;"	p
xstring	pkg/util/xstring/uuid_test.go	/^package xstring$/;"	p
xstruct	pkg/util/xstruct/clone.go	/^package xstruct$/;"	p
xtime	pkg/util/xtime/api.go	/^package xtime$/;"	p
xtime	pkg/util/xtime/duration.go	/^package xtime$/;"	p
xtime	pkg/util/xtime/duration_test.go	/^package xtime$/;"	p
xtime	pkg/util/xtime/rash_timer.go	/^package xtime$/;"	p
xtime	pkg/util/xtime/rash_timer_test.go	/^package xtime$/;"	p
xtime	pkg/util/xtime/time.go	/^package xtime$/;"	p
xtime	pkg/util/xtime/time_test.go	/^package xtime$/;"	p
xtime	pkg/util/xtime/time_ticker.go	/^package xtime$/;"	p
xxx_messageInfo_HelloReply	pkg/util/xtest/proto/testproto/hello.pb.go	/^var xxx_messageInfo_HelloReply proto.InternalMessageInfo$/;"	v
xxx_messageInfo_HelloRequest	pkg/util/xtest/proto/testproto/hello.pb.go	/^var xxx_messageInfo_HelloRequest proto.InternalMessageInfo$/;"	v
xxx_messageInfo_WhoServerReply	pkg/util/xtest/proto/testproto/hello.pb.go	/^var xxx_messageInfo_WhoServerReply proto.InternalMessageInfo$/;"	v
xxx_messageInfo_WhoServerReq	pkg/util/xtest/proto/testproto/hello.pb.go	/^var xxx_messageInfo_WhoServerReq proto.InternalMessageInfo$/;"	v
yaseeDataSource	pkg/conf/datasource/http/yasee.go	/^type yaseeDataSource struct {$/;"	t
yaseeDataSource	pkg/datasource/http/yasee.go	/^type yaseeDataSource struct {$/;"	t
yaseeRes	pkg/conf/datasource/http/yasee.go	/^type yaseeRes struct {$/;"	t
yaseeRes	pkg/datasource/http/yasee.go	/^type yaseeRes struct {$/;"	t
yell	pkg/util/xtest/server/yell/server.go	/^package yell$/;"	p
